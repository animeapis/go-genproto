// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: animeshon/knowledge/v1alpha1/knowledge.proto

package knowledge

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Boolean int32

const (
	Boolean_UNKNOWN Boolean = 0
	Boolean_TRUE    Boolean = 1
	Boolean_FALSE   Boolean = 2
)

// Enum value maps for Boolean.
var (
	Boolean_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRUE",
		2: "FALSE",
	}
	Boolean_value = map[string]int32{
		"UNKNOWN": 0,
		"TRUE":    1,
		"FALSE":   2,
	}
)

func (x Boolean) Enum() *Boolean {
	p := new(Boolean)
	*p = x
	return p
}

func (x Boolean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Boolean) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[0].Descriptor()
}

func (Boolean) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[0]
}

func (x Boolean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Boolean.Descriptor instead.
func (Boolean) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{0}
}

type ContentStatus int32

const (
	// Unknown status
	ContentStatus_CNT_STS_UNKNOWN ContentStatus = 0
	// Publishing or airing is still ongoing.
	ContentStatus_CNT_STS_ONGOING ContentStatus = 1
	// Publishing or airing has been completed.
	ContentStatus_CNT_STS_COMPLETED ContentStatus = 2
	// Publishing or airing has been scheduled.
	ContentStatus_CNT_STS_SCHEDULED ContentStatus = 3
	// Publishing or airing started but never finished.
	ContentStatus_CNT_STS_INTERRUPTED ContentStatus = 4
	// Publishing or airing was scheduled but later canceled.
	ContentStatus_CNT_STS_CANCELED ContentStatus = 5
	// Publishing or airing has been suspended / has been put on hold.
	ContentStatus_CNT_STS_SUSPENDED ContentStatus = 6
	// The content is in work in progress
	ContentStatus_CNT_STS_WORK_IN_PROGRESS ContentStatus = 7
)

// Enum value maps for ContentStatus.
var (
	ContentStatus_name = map[int32]string{
		0: "CNT_STS_UNKNOWN",
		1: "CNT_STS_ONGOING",
		2: "CNT_STS_COMPLETED",
		3: "CNT_STS_SCHEDULED",
		4: "CNT_STS_INTERRUPTED",
		5: "CNT_STS_CANCELED",
		6: "CNT_STS_SUSPENDED",
		7: "CNT_STS_WORK_IN_PROGRESS",
	}
	ContentStatus_value = map[string]int32{
		"CNT_STS_UNKNOWN":          0,
		"CNT_STS_ONGOING":          1,
		"CNT_STS_COMPLETED":        2,
		"CNT_STS_SCHEDULED":        3,
		"CNT_STS_INTERRUPTED":      4,
		"CNT_STS_CANCELED":         5,
		"CNT_STS_SUSPENDED":        6,
		"CNT_STS_WORK_IN_PROGRESS": 7,
	}
)

func (x ContentStatus) Enum() *ContentStatus {
	p := new(ContentStatus)
	*p = x
	return p
}

func (x ContentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[1].Descriptor()
}

func (ContentStatus) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[1]
}

func (x ContentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentStatus.Descriptor instead.
func (ContentStatus) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{1}
}

type ContentPublishingType int32

const (
	// Unknown status
	ContentPublishingType_CNT_PBL_UNKNOWN ContentPublishingType = 0
	// Self publishing
	ContentPublishingType_CNT_PBL_SELF ContentPublishingType = 1
	// Publisched by a corporation
	ContentPublishingType_CNT_PBL_CORPORATE ContentPublishingType = 2
)

// Enum value maps for ContentPublishingType.
var (
	ContentPublishingType_name = map[int32]string{
		0: "CNT_PBL_UNKNOWN",
		1: "CNT_PBL_SELF",
		2: "CNT_PBL_CORPORATE",
	}
	ContentPublishingType_value = map[string]int32{
		"CNT_PBL_UNKNOWN":   0,
		"CNT_PBL_SELF":      1,
		"CNT_PBL_CORPORATE": 2,
	}
)

func (x ContentPublishingType) Enum() *ContentPublishingType {
	p := new(ContentPublishingType)
	*p = x
	return p
}

func (x ContentPublishingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentPublishingType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[2].Descriptor()
}

func (ContentPublishingType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[2]
}

func (x ContentPublishingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentPublishingType.Descriptor instead.
func (ContentPublishingType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{2}
}

type Gender int32

const (
	// Unknown gender
	Gender_GND_TYP_UNKNOWN Gender = 0
	// Male
	Gender_GND_TYP_MALE Gender = 1
	// Female
	Gender_GND_TYP_FEMALE Gender = 2
	// Male which seems a female
	Gender_GND_TYP_MALE_TRAP Gender = 3
	// Female which seems a male
	Gender_GND_TYP_FEMALE_TRAP Gender = 4
	// Both male and female
	Gender_GND_TYP_HERMAPHRODITIC Gender = 5
	// None of the default gender applies
	Gender_GND_TYP_OTHER Gender = 6
	// The gender is undefined
	Gender_GND_TYP_UNDEFINED Gender = 7
	// The gender something between male and female
	Gender_GND_TYP_INTERSEXUAL Gender = 8
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GND_TYP_UNKNOWN",
		1: "GND_TYP_MALE",
		2: "GND_TYP_FEMALE",
		3: "GND_TYP_MALE_TRAP",
		4: "GND_TYP_FEMALE_TRAP",
		5: "GND_TYP_HERMAPHRODITIC",
		6: "GND_TYP_OTHER",
		7: "GND_TYP_UNDEFINED",
		8: "GND_TYP_INTERSEXUAL",
	}
	Gender_value = map[string]int32{
		"GND_TYP_UNKNOWN":        0,
		"GND_TYP_MALE":           1,
		"GND_TYP_FEMALE":         2,
		"GND_TYP_MALE_TRAP":      3,
		"GND_TYP_FEMALE_TRAP":    4,
		"GND_TYP_HERMAPHRODITIC": 5,
		"GND_TYP_OTHER":          6,
		"GND_TYP_UNDEFINED":      7,
		"GND_TYP_INTERSEXUAL":    8,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[3].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[3]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{3}
}

type BloodType int32

const (
	// Unknown blood type
	BloodType_BLD_TYP_UNKNOWN BloodType = 0
	// A (no Rh info)
	BloodType_BLD_TYP_A BloodType = 1
	// B (no Rh info)
	BloodType_BLD_TYP_B BloodType = 2
	// AB (no Rh info)
	BloodType_BLD_TYP_AB BloodType = 3
	// O (no Rh info)
	BloodType_BLD_TYP_O BloodType = 4
	// A+
	BloodType_BLD_TYP_A_PLUS BloodType = 5
	// B+
	BloodType_BLD_TYP_B_PLUS BloodType = 6
	// AB+
	BloodType_BLD_TYP_AB_PLUS BloodType = 7
	// O+
	BloodType_BLD_TYP_O_PLUS BloodType = 8
	// A-
	BloodType_BLD_TYP_A_MINUS BloodType = 9
	// B-
	BloodType_BLD_TYP_B_MINUS BloodType = 10
	// AB-
	BloodType_BLD_TYP_AB_MINUS BloodType = 11
	// O-
	BloodType_BLD_TYP_O_MINUS BloodType = 12
)

// Enum value maps for BloodType.
var (
	BloodType_name = map[int32]string{
		0:  "BLD_TYP_UNKNOWN",
		1:  "BLD_TYP_A",
		2:  "BLD_TYP_B",
		3:  "BLD_TYP_AB",
		4:  "BLD_TYP_O",
		5:  "BLD_TYP_A_PLUS",
		6:  "BLD_TYP_B_PLUS",
		7:  "BLD_TYP_AB_PLUS",
		8:  "BLD_TYP_O_PLUS",
		9:  "BLD_TYP_A_MINUS",
		10: "BLD_TYP_B_MINUS",
		11: "BLD_TYP_AB_MINUS",
		12: "BLD_TYP_O_MINUS",
	}
	BloodType_value = map[string]int32{
		"BLD_TYP_UNKNOWN":  0,
		"BLD_TYP_A":        1,
		"BLD_TYP_B":        2,
		"BLD_TYP_AB":       3,
		"BLD_TYP_O":        4,
		"BLD_TYP_A_PLUS":   5,
		"BLD_TYP_B_PLUS":   6,
		"BLD_TYP_AB_PLUS":  7,
		"BLD_TYP_O_PLUS":   8,
		"BLD_TYP_A_MINUS":  9,
		"BLD_TYP_B_MINUS":  10,
		"BLD_TYP_AB_MINUS": 11,
		"BLD_TYP_O_MINUS":  12,
	}
)

func (x BloodType) Enum() *BloodType {
	p := new(BloodType)
	*p = x
	return p
}

func (x BloodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BloodType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[4].Descriptor()
}

func (BloodType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[4]
}

func (x BloodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BloodType.Descriptor instead.
func (BloodType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{4}
}

type Censorship int32

const (
	// Unknown censorship
	Censorship_CNS_TYP_UNKNOWN Censorship = 0
	// No censorship
	Censorship_CNS_TYP_NONE Censorship = 1
	// Censorship applied
	Censorship_CNS_TYP_CENSORED Censorship = 2
)

// Enum value maps for Censorship.
var (
	Censorship_name = map[int32]string{
		0: "CNS_TYP_UNKNOWN",
		1: "CNS_TYP_NONE",
		2: "CNS_TYP_CENSORED",
	}
	Censorship_value = map[string]int32{
		"CNS_TYP_UNKNOWN":  0,
		"CNS_TYP_NONE":     1,
		"CNS_TYP_CENSORED": 2,
	}
)

func (x Censorship) Enum() *Censorship {
	p := new(Censorship)
	*p = x
	return p
}

func (x Censorship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Censorship) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[5].Descriptor()
}

func (Censorship) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[5]
}

func (x Censorship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Censorship.Descriptor instead.
func (Censorship) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{5}
}

type ContentFocus int32

const (
	// Unknown focus
	ContentFocus_CNT_FCS_UNKNOWN ContentFocus = 0
	// Main content handled are games
	ContentFocus_CNT_FCS_GAME ContentFocus = 1
	// Main content handled are anime
	ContentFocus_CNT_FCS_ANIME ContentFocus = 2
	// Main content handled are manga
	ContentFocus_CNT_FCS_MANGA ContentFocus = 3
	// Main content handled are light novels
	ContentFocus_CNT_FCS_LIGHT_NOVEL ContentFocus = 4
	// ContentFocusOther other
	ContentFocus_CNT_FCS_OTHER ContentFocus = 5
)

// Enum value maps for ContentFocus.
var (
	ContentFocus_name = map[int32]string{
		0: "CNT_FCS_UNKNOWN",
		1: "CNT_FCS_GAME",
		2: "CNT_FCS_ANIME",
		3: "CNT_FCS_MANGA",
		4: "CNT_FCS_LIGHT_NOVEL",
		5: "CNT_FCS_OTHER",
	}
	ContentFocus_value = map[string]int32{
		"CNT_FCS_UNKNOWN":     0,
		"CNT_FCS_GAME":        1,
		"CNT_FCS_ANIME":       2,
		"CNT_FCS_MANGA":       3,
		"CNT_FCS_LIGHT_NOVEL": 4,
		"CNT_FCS_OTHER":       5,
	}
)

func (x ContentFocus) Enum() *ContentFocus {
	p := new(ContentFocus)
	*p = x
	return p
}

func (x ContentFocus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentFocus) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[6].Descriptor()
}

func (ContentFocus) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[6]
}

func (x ContentFocus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentFocus.Descriptor instead.
func (ContentFocus) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{6}
}

type TrackVersion int32

const (
	// Unknown version
	TrackVersion_TRK_VRS_UNKNOWN TrackVersion = 0
	// Normal version of the track
	TrackVersion_TRK_VRS_NORMAL TrackVersion = 1
	// Instrumental version
	TrackVersion_TRK_VRS_INSTRUMENTAL TrackVersion = 2
	// Only piano version
	TrackVersion_TRK_VRS_PIANO TrackVersion = 3
	// Japanese version
	TrackVersion_TRK_VRS_JAPANESE TrackVersion = 4
	// English version
	TrackVersion_TRK_VRS_ENGLISH TrackVersion = 5
	// TV version of the track
	TrackVersion_TRK_VRS_TV TrackVersion = 6
	// The track has been mixed with another
	TrackVersion_TRK_VRS_MIX TrackVersion = 7
	// The track has been remixed
	TrackVersion_TRK_VRS_REMIX TrackVersion = 8
	// Extended version of the track
	TrackVersion_TRK_VRS_EXTENDED TrackVersion = 9
	// other
	TrackVersion_TRK_VRS_OTHER TrackVersion = 10
)

// Enum value maps for TrackVersion.
var (
	TrackVersion_name = map[int32]string{
		0:  "TRK_VRS_UNKNOWN",
		1:  "TRK_VRS_NORMAL",
		2:  "TRK_VRS_INSTRUMENTAL",
		3:  "TRK_VRS_PIANO",
		4:  "TRK_VRS_JAPANESE",
		5:  "TRK_VRS_ENGLISH",
		6:  "TRK_VRS_TV",
		7:  "TRK_VRS_MIX",
		8:  "TRK_VRS_REMIX",
		9:  "TRK_VRS_EXTENDED",
		10: "TRK_VRS_OTHER",
	}
	TrackVersion_value = map[string]int32{
		"TRK_VRS_UNKNOWN":      0,
		"TRK_VRS_NORMAL":       1,
		"TRK_VRS_INSTRUMENTAL": 2,
		"TRK_VRS_PIANO":        3,
		"TRK_VRS_JAPANESE":     4,
		"TRK_VRS_ENGLISH":      5,
		"TRK_VRS_TV":           6,
		"TRK_VRS_MIX":          7,
		"TRK_VRS_REMIX":        8,
		"TRK_VRS_EXTENDED":     9,
		"TRK_VRS_OTHER":        10,
	}
)

func (x TrackVersion) Enum() *TrackVersion {
	p := new(TrackVersion)
	*p = x
	return p
}

func (x TrackVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[7].Descriptor()
}

func (TrackVersion) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[7]
}

func (x TrackVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackVersion.Descriptor instead.
func (TrackVersion) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{7}
}

type LanguageComplexity int32

const (
	// Unknown complexity
	LanguageComplexity_LNG_CMPL_UNKNOWN LanguageComplexity = 0
	// For beginners
	LanguageComplexity_LNG_CMPL_BEGINNER LanguageComplexity = 1
	// For intermedium
	LanguageComplexity_LNG_CMPL_INTERMEDIUM LanguageComplexity = 2
	// For advanced
	LanguageComplexity_LNG_CMPL_ADVANCED LanguageComplexity = 3
	// For experts
	LanguageComplexity_LNG_CMPL_EXPERT LanguageComplexity = 4
)

// Enum value maps for LanguageComplexity.
var (
	LanguageComplexity_name = map[int32]string{
		0: "LNG_CMPL_UNKNOWN",
		1: "LNG_CMPL_BEGINNER",
		2: "LNG_CMPL_INTERMEDIUM",
		3: "LNG_CMPL_ADVANCED",
		4: "LNG_CMPL_EXPERT",
	}
	LanguageComplexity_value = map[string]int32{
		"LNG_CMPL_UNKNOWN":     0,
		"LNG_CMPL_BEGINNER":    1,
		"LNG_CMPL_INTERMEDIUM": 2,
		"LNG_CMPL_ADVANCED":    3,
		"LNG_CMPL_EXPERT":      4,
	}
)

func (x LanguageComplexity) Enum() *LanguageComplexity {
	p := new(LanguageComplexity)
	*p = x
	return p
}

func (x LanguageComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[8].Descriptor()
}

func (LanguageComplexity) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[8]
}

func (x LanguageComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageComplexity.Descriptor instead.
func (LanguageComplexity) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{8}
}

type WritingSystem int32

const (
	// Unknown writing system
	WritingSystem_WRT_SYS_UNKNOWN WritingSystem = 0
	// The opera is written with latin characters
	WritingSystem_WRT_SYS_ALPHABETIC WritingSystem = 1
	// The opera has the furigana transliteraion on each kanji
	WritingSystem_WRT_SYS_FURIGANA_FULL WritingSystem = 2
	// The opera has the furigana transliteraion only on advanced words or words used for the first time
	WritingSystem_WRT_SYS_FURIGANA_PARTIAL WritingSystem = 3
	// The opera has the furigana transliteraion only on non common words, if any
	WritingSystem_WRT_SYS_KANJI WritingSystem = 4
)

// Enum value maps for WritingSystem.
var (
	WritingSystem_name = map[int32]string{
		0: "WRT_SYS_UNKNOWN",
		1: "WRT_SYS_ALPHABETIC",
		2: "WRT_SYS_FURIGANA_FULL",
		3: "WRT_SYS_FURIGANA_PARTIAL",
		4: "WRT_SYS_KANJI",
	}
	WritingSystem_value = map[string]int32{
		"WRT_SYS_UNKNOWN":          0,
		"WRT_SYS_ALPHABETIC":       1,
		"WRT_SYS_FURIGANA_FULL":    2,
		"WRT_SYS_FURIGANA_PARTIAL": 3,
		"WRT_SYS_KANJI":            4,
	}
)

func (x WritingSystem) Enum() *WritingSystem {
	p := new(WritingSystem)
	*p = x
	return p
}

func (x WritingSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WritingSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[9].Descriptor()
}

func (WritingSystem) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[9]
}

func (x WritingSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WritingSystem.Descriptor instead.
func (WritingSystem) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{9}
}

type RegionRestriction int32

const (
	// Unknown Region Restriction
	RegionRestriction_RGN_RST_UNKNOWN RegionRestriction = 0
	// No Region Restriction
	RegionRestriction_RGN_RST_NONE RegionRestriction = 1
	// The Entity is illegal following the U.N. guidelines
	RegionRestriction_RGN_RST_ILLEGAL RegionRestriction = 2
)

// Enum value maps for RegionRestriction.
var (
	RegionRestriction_name = map[int32]string{
		0: "RGN_RST_UNKNOWN",
		1: "RGN_RST_NONE",
		2: "RGN_RST_ILLEGAL",
	}
	RegionRestriction_value = map[string]int32{
		"RGN_RST_UNKNOWN": 0,
		"RGN_RST_NONE":    1,
		"RGN_RST_ILLEGAL": 2,
	}
)

func (x RegionRestriction) Enum() *RegionRestriction {
	p := new(RegionRestriction)
	*p = x
	return p
}

func (x RegionRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[10].Descriptor()
}

func (RegionRestriction) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[10]
}

func (x RegionRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionRestriction.Descriptor instead.
func (RegionRestriction) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{10}
}

type MaturityRating int32

const (
	// Unknown Maturity Rating
	MaturityRating_MTR_RTN_UNKNOWN MaturityRating = 0
	// Over 18 in USA
	MaturityRating_MTR_RTN_USA_NC17 MaturityRating = 1
	// Over 18 in USA
	MaturityRating_MTR_RTN_USA_R MaturityRating = 2
	// Over 13 in USA
	MaturityRating_MTR_RTN_USA_PG13 MaturityRating = 3
	// Over 3 in USA
	MaturityRating_MTR_RTN_USA_PG MaturityRating = 4
	// Safe in USA
	MaturityRating_MTR_RTN_USA_G MaturityRating = 5
)

// Enum value maps for MaturityRating.
var (
	MaturityRating_name = map[int32]string{
		0: "MTR_RTN_UNKNOWN",
		1: "MTR_RTN_USA_NC17",
		2: "MTR_RTN_USA_R",
		3: "MTR_RTN_USA_PG13",
		4: "MTR_RTN_USA_PG",
		5: "MTR_RTN_USA_G",
	}
	MaturityRating_value = map[string]int32{
		"MTR_RTN_UNKNOWN":  0,
		"MTR_RTN_USA_NC17": 1,
		"MTR_RTN_USA_R":    2,
		"MTR_RTN_USA_PG13": 3,
		"MTR_RTN_USA_PG":   4,
		"MTR_RTN_USA_G":    5,
	}
)

func (x MaturityRating) Enum() *MaturityRating {
	p := new(MaturityRating)
	*p = x
	return p
}

func (x MaturityRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaturityRating) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[11].Descriptor()
}

func (MaturityRating) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[11]
}

func (x MaturityRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaturityRating.Descriptor instead.
func (MaturityRating) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{11}
}

type Contribution_State int32

const (
	Contribution_PENDING  Contribution_State = 0
	Contribution_APPROVED Contribution_State = 1
	Contribution_REJECTED Contribution_State = 2
	Contribution_DRAFT    Contribution_State = 3
)

// Enum value maps for Contribution_State.
var (
	Contribution_State_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
		3: "DRAFT",
	}
	Contribution_State_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
		"DRAFT":    3,
	}
)

func (x Contribution_State) Enum() *Contribution_State {
	p := new(Contribution_State)
	*p = x
	return p
}

func (x Contribution_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contribution_State) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[12].Descriptor()
}

func (Contribution_State) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[12]
}

func (x Contribution_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contribution_State.Descriptor instead.
func (Contribution_State) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{1, 0}
}

type Anime_AnimeType int32

const (
	// Unknown type
	Anime_ANM_TYP_UNKNOWN Anime_AnimeType = 0
	// Tv serie
	Anime_ANM_TYP_TV Anime_AnimeType = 1
	// Movie
	Anime_ANM_TYP_MOVIE Anime_AnimeType = 2
	// Original video animation
	Anime_ANM_TYP_OVA Anime_AnimeType = 3
	// Original Net Anime
	Anime_ANM_TYP_ONA Anime_AnimeType = 4
	// Special
	Anime_ANM_TYP_SPECIAL Anime_AnimeType = 5
	// Web anime
	Anime_ANM_TYP_WEB Anime_AnimeType = 6
	// Music video
	Anime_ANM_TYP_MUSIC_VIDEO Anime_AnimeType = 7
	// Other
	Anime_ANM_TYP_OTHER Anime_AnimeType = 8
)

// Enum value maps for Anime_AnimeType.
var (
	Anime_AnimeType_name = map[int32]string{
		0: "ANM_TYP_UNKNOWN",
		1: "ANM_TYP_TV",
		2: "ANM_TYP_MOVIE",
		3: "ANM_TYP_OVA",
		4: "ANM_TYP_ONA",
		5: "ANM_TYP_SPECIAL",
		6: "ANM_TYP_WEB",
		7: "ANM_TYP_MUSIC_VIDEO",
		8: "ANM_TYP_OTHER",
	}
	Anime_AnimeType_value = map[string]int32{
		"ANM_TYP_UNKNOWN":     0,
		"ANM_TYP_TV":          1,
		"ANM_TYP_MOVIE":       2,
		"ANM_TYP_OVA":         3,
		"ANM_TYP_ONA":         4,
		"ANM_TYP_SPECIAL":     5,
		"ANM_TYP_WEB":         6,
		"ANM_TYP_MUSIC_VIDEO": 7,
		"ANM_TYP_OTHER":       8,
	}
)

func (x Anime_AnimeType) Enum() *Anime_AnimeType {
	p := new(Anime_AnimeType)
	*p = x
	return p
}

func (x Anime_AnimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Anime_AnimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[13].Descriptor()
}

func (Anime_AnimeType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[13]
}

func (x Anime_AnimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Anime_AnimeType.Descriptor instead.
func (Anime_AnimeType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{11, 0}
}

type Chapter_ChapterType int32

const (
	// Unknown type
	Chapter_CHT_TYP_UNKNOWN Chapter_ChapterType = 0
	// Regular chapter
	Chapter_CHT_TYP_REGULAR Chapter_ChapterType = 1
	// Extra chapter
	Chapter_CHT_TYP_EXTRA Chapter_ChapterType = 2
)

// Enum value maps for Chapter_ChapterType.
var (
	Chapter_ChapterType_name = map[int32]string{
		0: "CHT_TYP_UNKNOWN",
		1: "CHT_TYP_REGULAR",
		2: "CHT_TYP_EXTRA",
	}
	Chapter_ChapterType_value = map[string]int32{
		"CHT_TYP_UNKNOWN": 0,
		"CHT_TYP_REGULAR": 1,
		"CHT_TYP_EXTRA":   2,
	}
)

func (x Chapter_ChapterType) Enum() *Chapter_ChapterType {
	p := new(Chapter_ChapterType)
	*p = x
	return p
}

func (x Chapter_ChapterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chapter_ChapterType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[14].Descriptor()
}

func (Chapter_ChapterType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[14]
}

func (x Chapter_ChapterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chapter_ChapterType.Descriptor instead.
func (Chapter_ChapterType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{13, 0}
}

type Character_AgeRange int32

const (
	// Unknown
	Character_CHR_AGE_UNKNOWN Character_AgeRange = 0
	// The character is an infant. 1-3
	Character_CHR_AGE_INFANT Character_AgeRange = 1
	// The character is a child. 4-12
	Character_CHR_AGE_CHILD Character_AgeRange = 2
	// The character is a teen. 13-17
	Character_CHR_AGE_TEEN Character_AgeRange = 3
	// The character is a young adult. 18-25
	Character_CHR_AGE_YOUNG_ADULT Character_AgeRange = 4
	// The character is a grown up adult. 26-59
	Character_CHR_AGE_ADULT Character_AgeRange = 5
	// The character is an eldery. 60+
	Character_CHR_AGE_ELDERY Character_AgeRange = 6
	// The character is an entity which the concept of age do not makes sense (robots, ...)
	Character_CHR_AGE_NOT_APPLICABLE Character_AgeRange = 7
	// The character can't be fit in any any of the other category. (Gods, planets, ...)
	Character_CHR_AGE_WITHOUT Character_AgeRange = 8
)

// Enum value maps for Character_AgeRange.
var (
	Character_AgeRange_name = map[int32]string{
		0: "CHR_AGE_UNKNOWN",
		1: "CHR_AGE_INFANT",
		2: "CHR_AGE_CHILD",
		3: "CHR_AGE_TEEN",
		4: "CHR_AGE_YOUNG_ADULT",
		5: "CHR_AGE_ADULT",
		6: "CHR_AGE_ELDERY",
		7: "CHR_AGE_NOT_APPLICABLE",
		8: "CHR_AGE_WITHOUT",
	}
	Character_AgeRange_value = map[string]int32{
		"CHR_AGE_UNKNOWN":        0,
		"CHR_AGE_INFANT":         1,
		"CHR_AGE_CHILD":          2,
		"CHR_AGE_TEEN":           3,
		"CHR_AGE_YOUNG_ADULT":    4,
		"CHR_AGE_ADULT":          5,
		"CHR_AGE_ELDERY":         6,
		"CHR_AGE_NOT_APPLICABLE": 7,
		"CHR_AGE_WITHOUT":        8,
	}
)

func (x Character_AgeRange) Enum() *Character_AgeRange {
	p := new(Character_AgeRange)
	*p = x
	return p
}

func (x Character_AgeRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Character_AgeRange) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[15].Descriptor()
}

func (Character_AgeRange) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[15]
}

func (x Character_AgeRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Character_AgeRange.Descriptor instead.
func (Character_AgeRange) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{14, 0}
}

type Character_CupSize int32

const (
	Character_CHR_CUP_UNKNOWN Character_CupSize = 0
	Character_CHR_CUP_AAA     Character_CupSize = 1
	Character_CHR_CUP_AA      Character_CupSize = 2
	Character_CHR_CUP_A       Character_CupSize = 3
	Character_CHR_CUP_B       Character_CupSize = 4
	Character_CHR_CUP_C       Character_CupSize = 5
	Character_CHR_CUP_D       Character_CupSize = 6
	Character_CHR_CUP_E       Character_CupSize = 7
	Character_CHR_CUP_F       Character_CupSize = 8
	Character_CHR_CUP_G       Character_CupSize = 9
	Character_CHR_CUP_H       Character_CupSize = 10
	Character_CHR_CUP_I       Character_CupSize = 11
	Character_CHR_CUP_J       Character_CupSize = 12
	Character_CHR_CUP_K       Character_CupSize = 13
	Character_CHR_CUP_L       Character_CupSize = 14
	Character_CHR_CUP_M       Character_CupSize = 15
	Character_CHR_CUP_N       Character_CupSize = 16
	Character_CHR_CUP_O       Character_CupSize = 17
	Character_CHR_CUP_P       Character_CupSize = 18
	Character_CHR_CUP_Q       Character_CupSize = 19
	Character_CHR_CUP_R       Character_CupSize = 20
	Character_CHR_CUP_S       Character_CupSize = 21
	Character_CHR_CUP_T       Character_CupSize = 22
	Character_CHR_CUP_U       Character_CupSize = 23
	Character_CHR_CUP_V       Character_CupSize = 24
	Character_CHR_CUP_W       Character_CupSize = 25
	Character_CHR_CUP_X       Character_CupSize = 26
	Character_CHR_CUP_Y       Character_CupSize = 27
	Character_CHR_CUP_Z       Character_CupSize = 28
)

// Enum value maps for Character_CupSize.
var (
	Character_CupSize_name = map[int32]string{
		0:  "CHR_CUP_UNKNOWN",
		1:  "CHR_CUP_AAA",
		2:  "CHR_CUP_AA",
		3:  "CHR_CUP_A",
		4:  "CHR_CUP_B",
		5:  "CHR_CUP_C",
		6:  "CHR_CUP_D",
		7:  "CHR_CUP_E",
		8:  "CHR_CUP_F",
		9:  "CHR_CUP_G",
		10: "CHR_CUP_H",
		11: "CHR_CUP_I",
		12: "CHR_CUP_J",
		13: "CHR_CUP_K",
		14: "CHR_CUP_L",
		15: "CHR_CUP_M",
		16: "CHR_CUP_N",
		17: "CHR_CUP_O",
		18: "CHR_CUP_P",
		19: "CHR_CUP_Q",
		20: "CHR_CUP_R",
		21: "CHR_CUP_S",
		22: "CHR_CUP_T",
		23: "CHR_CUP_U",
		24: "CHR_CUP_V",
		25: "CHR_CUP_W",
		26: "CHR_CUP_X",
		27: "CHR_CUP_Y",
		28: "CHR_CUP_Z",
	}
	Character_CupSize_value = map[string]int32{
		"CHR_CUP_UNKNOWN": 0,
		"CHR_CUP_AAA":     1,
		"CHR_CUP_AA":      2,
		"CHR_CUP_A":       3,
		"CHR_CUP_B":       4,
		"CHR_CUP_C":       5,
		"CHR_CUP_D":       6,
		"CHR_CUP_E":       7,
		"CHR_CUP_F":       8,
		"CHR_CUP_G":       9,
		"CHR_CUP_H":       10,
		"CHR_CUP_I":       11,
		"CHR_CUP_J":       12,
		"CHR_CUP_K":       13,
		"CHR_CUP_L":       14,
		"CHR_CUP_M":       15,
		"CHR_CUP_N":       16,
		"CHR_CUP_O":       17,
		"CHR_CUP_P":       18,
		"CHR_CUP_Q":       19,
		"CHR_CUP_R":       20,
		"CHR_CUP_S":       21,
		"CHR_CUP_T":       22,
		"CHR_CUP_U":       23,
		"CHR_CUP_V":       24,
		"CHR_CUP_W":       25,
		"CHR_CUP_X":       26,
		"CHR_CUP_Y":       27,
		"CHR_CUP_Z":       28,
	}
)

func (x Character_CupSize) Enum() *Character_CupSize {
	p := new(Character_CupSize)
	*p = x
	return p
}

func (x Character_CupSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Character_CupSize) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[16].Descriptor()
}

func (Character_CupSize) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[16]
}

func (x Character_CupSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Character_CupSize.Descriptor instead.
func (Character_CupSize) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{14, 1}
}

type Episode_EpisodeType int32

const (
	// Unknown episode type
	Episode_EPS_TYP_UNKNOWN Episode_EpisodeType = 0
	// Regular episode
	Episode_EPS_TYP_REGULAR Episode_EpisodeType = 1
	// Recapitolation episode
	Episode_EPS_TYP_RECAP Episode_EpisodeType = 2
	// Parody
	Episode_EPS_TYP_PARODY Episode_EpisodeType = 3
	// Promo episode
	Episode_EPS_TYP_PROMO Episode_EpisodeType = 4
	// Special episode
	Episode_EPS_TYP_SPECIAL Episode_EpisodeType = 5
	// Opening / ending episode
	Episode_EPS_TYP_OPENING_ENDING Episode_EpisodeType = 6
	// Other
	Episode_EPS_TYP_OTHER Episode_EpisodeType = 7
)

// Enum value maps for Episode_EpisodeType.
var (
	Episode_EpisodeType_name = map[int32]string{
		0: "EPS_TYP_UNKNOWN",
		1: "EPS_TYP_REGULAR",
		2: "EPS_TYP_RECAP",
		3: "EPS_TYP_PARODY",
		4: "EPS_TYP_PROMO",
		5: "EPS_TYP_SPECIAL",
		6: "EPS_TYP_OPENING_ENDING",
		7: "EPS_TYP_OTHER",
	}
	Episode_EpisodeType_value = map[string]int32{
		"EPS_TYP_UNKNOWN":        0,
		"EPS_TYP_REGULAR":        1,
		"EPS_TYP_RECAP":          2,
		"EPS_TYP_PARODY":         3,
		"EPS_TYP_PROMO":          4,
		"EPS_TYP_SPECIAL":        5,
		"EPS_TYP_OPENING_ENDING": 6,
		"EPS_TYP_OTHER":          7,
	}
)

func (x Episode_EpisodeType) Enum() *Episode_EpisodeType {
	p := new(Episode_EpisodeType)
	*p = x
	return p
}

func (x Episode_EpisodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Episode_EpisodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[17].Descriptor()
}

func (Episode_EpisodeType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[17]
}

func (x Episode_EpisodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Episode_EpisodeType.Descriptor instead.
func (Episode_EpisodeType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{15, 0}
}

type GameRelease_GameReleaseType int32

const (
	// Unknown game release type
	GameRelease_GMR_TYP_UNKNOWN GameRelease_GameReleaseType = 0
	// The release is complete
	GameRelease_GMR_TYP_COMPLETE GameRelease_GameReleaseType = 1
	// The release is only a part of the content
	GameRelease_GMR_TYP_PARTIAL GameRelease_GameReleaseType = 2
	// The release is just trial
	GameRelease_GMR_TYP_TRIAL GameRelease_GameReleaseType = 3
	// The release is a dlc
	GameRelease_GMR_TYP_DLC GameRelease_GameReleaseType = 4
)

// Enum value maps for GameRelease_GameReleaseType.
var (
	GameRelease_GameReleaseType_name = map[int32]string{
		0: "GMR_TYP_UNKNOWN",
		1: "GMR_TYP_COMPLETE",
		2: "GMR_TYP_PARTIAL",
		3: "GMR_TYP_TRIAL",
		4: "GMR_TYP_DLC",
	}
	GameRelease_GameReleaseType_value = map[string]int32{
		"GMR_TYP_UNKNOWN":  0,
		"GMR_TYP_COMPLETE": 1,
		"GMR_TYP_PARTIAL":  2,
		"GMR_TYP_TRIAL":    3,
		"GMR_TYP_DLC":      4,
	}
)

func (x GameRelease_GameReleaseType) Enum() *GameRelease_GameReleaseType {
	p := new(GameRelease_GameReleaseType)
	*p = x
	return p
}

func (x GameRelease_GameReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameRelease_GameReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[18].Descriptor()
}

func (GameRelease_GameReleaseType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[18]
}

func (x GameRelease_GameReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameRelease_GameReleaseType.Descriptor instead.
func (GameRelease_GameReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16, 0}
}

type GameRelease_GameDubDegree int32

const (
	// Unknown DUB degree
	GameRelease_DUB_DGR_UNKNOWN GameRelease_GameDubDegree = 0
	// Not dubbed
	GameRelease_DUB_DGR_NONE GameRelease_GameDubDegree = 1
	// Only erotic scenes are dubbed
	GameRelease_DUB_DGR_ERO_ONLY GameRelease_GameDubDegree = 2
	// Partially dubbed
	GameRelease_DUB_DGR_PARTIAL GameRelease_GameDubDegree = 3
	// Full dubbed
	GameRelease_DUB_DGR_FULL GameRelease_GameDubDegree = 4
)

// Enum value maps for GameRelease_GameDubDegree.
var (
	GameRelease_GameDubDegree_name = map[int32]string{
		0: "DUB_DGR_UNKNOWN",
		1: "DUB_DGR_NONE",
		2: "DUB_DGR_ERO_ONLY",
		3: "DUB_DGR_PARTIAL",
		4: "DUB_DGR_FULL",
	}
	GameRelease_GameDubDegree_value = map[string]int32{
		"DUB_DGR_UNKNOWN":  0,
		"DUB_DGR_NONE":     1,
		"DUB_DGR_ERO_ONLY": 2,
		"DUB_DGR_PARTIAL":  3,
		"DUB_DGR_FULL":     4,
	}
)

func (x GameRelease_GameDubDegree) Enum() *GameRelease_GameDubDegree {
	p := new(GameRelease_GameDubDegree)
	*p = x
	return p
}

func (x GameRelease_GameDubDegree) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameRelease_GameDubDegree) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[19].Descriptor()
}

func (GameRelease_GameDubDegree) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[19]
}

func (x GameRelease_GameDubDegree) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameRelease_GameDubDegree.Descriptor instead.
func (GameRelease_GameDubDegree) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16, 1}
}

type GameRelease_GameAnimationDegree int32

const (
	// Unknown animation degree
	GameRelease_ANM_DGR_UNKNOWN GameRelease_GameAnimationDegree = 0
	// No animation
	GameRelease_ANM_DGR_NONE GameRelease_GameAnimationDegree = 1
	// Simple animations
	GameRelease_ANM_DGR_SIMPLE GameRelease_GameAnimationDegree = 2
	// Partial animation -  Some fully animated scenes
	GameRelease_ANM_DGR_PARTIAL GameRelease_GameAnimationDegree = 3
	// Fully animated
	GameRelease_ANM_DGR_FULL GameRelease_GameAnimationDegree = 4
)

// Enum value maps for GameRelease_GameAnimationDegree.
var (
	GameRelease_GameAnimationDegree_name = map[int32]string{
		0: "ANM_DGR_UNKNOWN",
		1: "ANM_DGR_NONE",
		2: "ANM_DGR_SIMPLE",
		3: "ANM_DGR_PARTIAL",
		4: "ANM_DGR_FULL",
	}
	GameRelease_GameAnimationDegree_value = map[string]int32{
		"ANM_DGR_UNKNOWN": 0,
		"ANM_DGR_NONE":    1,
		"ANM_DGR_SIMPLE":  2,
		"ANM_DGR_PARTIAL": 3,
		"ANM_DGR_FULL":    4,
	}
)

func (x GameRelease_GameAnimationDegree) Enum() *GameRelease_GameAnimationDegree {
	p := new(GameRelease_GameAnimationDegree)
	*p = x
	return p
}

func (x GameRelease_GameAnimationDegree) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameRelease_GameAnimationDegree) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[20].Descriptor()
}

func (GameRelease_GameAnimationDegree) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[20]
}

func (x GameRelease_GameAnimationDegree) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameRelease_GameAnimationDegree.Descriptor instead.
func (GameRelease_GameAnimationDegree) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16, 2}
}

type GameRelease_Platform int32

const (
	// Unknown platform
	GameRelease_PLT_TYP_UNKNOWN GameRelease_Platform = 0
	// Windows
	GameRelease_PLT_TYP_WINDOWS GameRelease_Platform = 1
	// DOS
	GameRelease_PLT_TYP_DOS GameRelease_Platform = 2
	// LINUX
	GameRelease_PLT_TYP_LINUX GameRelease_Platform = 3
	// Mac
	GameRelease_PLT_TYP_MAC GameRelease_Platform = 4
	// IOs devices
	GameRelease_PLT_TYP_IOS GameRelease_Platform = 5
	// Android
	GameRelease_PLT_TYP_ANDROID GameRelease_Platform = 6
	// DVD player
	GameRelease_PLT_TYP_DVD_PLAYER GameRelease_Platform = 7
	// Blu-ray Player
	GameRelease_PLT_TYP_BLU_RAY_PLAYER GameRelease_Platform = 8
	// FM Towns https://en.wikipedia.org/wiki/FM_Towns
	GameRelease_PLT_TYP_FM_TOWNS GameRelease_Platform = 9
	// FM-7 Towns https://en.wikipedia.org/wiki/FM-7
	GameRelease_PLT_TYP_FM7_TOWNS GameRelease_Platform = 10
	// FM-8 Towns https://en.wikipedia.org/wiki/FM-8
	GameRelease_PLT_TYP_FM8_TOWNS GameRelease_Platform = 11
	// Gameboy advance
	GameRelease_PLT_TYP_GAMEBOY_ADVANCE GameRelease_Platform = 12
	// Gameboy color
	GameRelease_PLT_TYP_GAMEBOY_COLOR GameRelease_Platform = 13
	// MSX Computer https://en.wikipedia.org/wiki/MSX
	GameRelease_PLT_TYP_MSX GameRelease_Platform = 14
	// Nintendo DS
	GameRelease_PLT_TYP_NINTENDO_DS GameRelease_Platform = 15
	// NES platform
	GameRelease_PLT_TYP_NES GameRelease_Platform = 16
	// C88 https://en.wikipedia.org/wiki/PC-8800_series
	GameRelease_PLT_TYP_P88 GameRelease_Platform = 17
	// PC98 https://en.wikipedia.org/wiki/PC-9800_series
	GameRelease_PLT_TYP_P98 GameRelease_Platform = 18
	// PC Engine
	GameRelease_PLT_TYP_PC_ENGINE GameRelease_Platform = 19
	// Pc-FX https://en.wikipedia.org/wiki/PC-FX
	GameRelease_PLT_TYP_PC_FX GameRelease_Platform = 20
	// Playstation portable
	GameRelease_PLT_TYP_PSP GameRelease_Platform = 21
	// Playstation 1
	GameRelease_PLT_TYP_PS1 GameRelease_Platform = 22
	// Playstation 2
	GameRelease_PLT_TYP_PS2 GameRelease_Platform = 23
	// Playstation 3
	GameRelease_PLT_TYP_PS3 GameRelease_Platform = 24
	// Playstation 4
	GameRelease_PLT_TYP_PS4 GameRelease_Platform = 25
	// Playstation 5
	GameRelease_PLT_TYP_PS5 GameRelease_Platform = 26
	// Playstation vita
	GameRelease_PLT_TYP_PS_VITA GameRelease_Platform = 27
	// Dgramcast https://en.wikipedia.org/wiki/Dreamcast
	GameRelease_PLT_TYP_DGRAMCAST GameRelease_Platform = 28
	// Sega Staurn
	GameRelease_PLT_TYP_SEGA_SATURN GameRelease_Platform = 29
	// Sega Mega-CD
	GameRelease_PLT_TYP_SEGA_MEGACD GameRelease_Platform = 30
	// Super Nintendo
	GameRelease_PLT_TYP_SUPER_NINTENDO GameRelease_Platform = 31
	// Nintendo Switch
	GameRelease_PLT_TYP_NINTENDO_SWITCH GameRelease_Platform = 32
	// Ninentdo WII
	GameRelease_PLT_TYP_NINTENDO_WII GameRelease_Platform = 33
	// Nintendo WI
	GameRelease_PLT_TYP_NINTENDO_WII_U GameRelease_Platform = 34
	// Nintendo 3Ds
	GameRelease_PLT_TYP_NINTENDO_3DS GameRelease_Platform = 35
	// X68000 https://en.wikipedia.org/wiki/X68000
	GameRelease_PLT_TYP_X68000 GameRelease_Platform = 36
	// Xbox One
	GameRelease_PLT_TYP_XBOX_ONE GameRelease_Platform = 37
	// Xbox 360
	GameRelease_PLT_TYP_XBOX_360 GameRelease_Platform = 38
	// Xbox
	GameRelease_PLT_TYP_XBOX GameRelease_Platform = 39
	// Xbox Series X
	GameRelease_PLT_TYP_XBOX_X GameRelease_Platform = 40
	// Website
	GameRelease_PLT_TYP_WEBSITE GameRelease_Platform = 41
	// Visual Novel DS https://github.com/BASLQC/vnds/wiki
	GameRelease_PLT_TYP_VN_DS GameRelease_Platform = 42
	// Sharp X1 https://en.wikipedia.org/wiki/Sharp_X1
	GameRelease_PLT_TYP_SHARP_X1 GameRelease_Platform = 43
	// 3DO Interactive Multiplayer
	GameRelease_PLT_TYP_INTERACTIVE_3DO GameRelease_Platform = 44
	// Other
	GameRelease_PLT_TYP_OTHER GameRelease_Platform = 45
	// Mobile Other
	GameRelease_PLT_TYP_MOBILE_OTHER GameRelease_Platform = 46
)

// Enum value maps for GameRelease_Platform.
var (
	GameRelease_Platform_name = map[int32]string{
		0:  "PLT_TYP_UNKNOWN",
		1:  "PLT_TYP_WINDOWS",
		2:  "PLT_TYP_DOS",
		3:  "PLT_TYP_LINUX",
		4:  "PLT_TYP_MAC",
		5:  "PLT_TYP_IOS",
		6:  "PLT_TYP_ANDROID",
		7:  "PLT_TYP_DVD_PLAYER",
		8:  "PLT_TYP_BLU_RAY_PLAYER",
		9:  "PLT_TYP_FM_TOWNS",
		10: "PLT_TYP_FM7_TOWNS",
		11: "PLT_TYP_FM8_TOWNS",
		12: "PLT_TYP_GAMEBOY_ADVANCE",
		13: "PLT_TYP_GAMEBOY_COLOR",
		14: "PLT_TYP_MSX",
		15: "PLT_TYP_NINTENDO_DS",
		16: "PLT_TYP_NES",
		17: "PLT_TYP_P88",
		18: "PLT_TYP_P98",
		19: "PLT_TYP_PC_ENGINE",
		20: "PLT_TYP_PC_FX",
		21: "PLT_TYP_PSP",
		22: "PLT_TYP_PS1",
		23: "PLT_TYP_PS2",
		24: "PLT_TYP_PS3",
		25: "PLT_TYP_PS4",
		26: "PLT_TYP_PS5",
		27: "PLT_TYP_PS_VITA",
		28: "PLT_TYP_DGRAMCAST",
		29: "PLT_TYP_SEGA_SATURN",
		30: "PLT_TYP_SEGA_MEGACD",
		31: "PLT_TYP_SUPER_NINTENDO",
		32: "PLT_TYP_NINTENDO_SWITCH",
		33: "PLT_TYP_NINTENDO_WII",
		34: "PLT_TYP_NINTENDO_WII_U",
		35: "PLT_TYP_NINTENDO_3DS",
		36: "PLT_TYP_X68000",
		37: "PLT_TYP_XBOX_ONE",
		38: "PLT_TYP_XBOX_360",
		39: "PLT_TYP_XBOX",
		40: "PLT_TYP_XBOX_X",
		41: "PLT_TYP_WEBSITE",
		42: "PLT_TYP_VN_DS",
		43: "PLT_TYP_SHARP_X1",
		44: "PLT_TYP_INTERACTIVE_3DO",
		45: "PLT_TYP_OTHER",
		46: "PLT_TYP_MOBILE_OTHER",
	}
	GameRelease_Platform_value = map[string]int32{
		"PLT_TYP_UNKNOWN":         0,
		"PLT_TYP_WINDOWS":         1,
		"PLT_TYP_DOS":             2,
		"PLT_TYP_LINUX":           3,
		"PLT_TYP_MAC":             4,
		"PLT_TYP_IOS":             5,
		"PLT_TYP_ANDROID":         6,
		"PLT_TYP_DVD_PLAYER":      7,
		"PLT_TYP_BLU_RAY_PLAYER":  8,
		"PLT_TYP_FM_TOWNS":        9,
		"PLT_TYP_FM7_TOWNS":       10,
		"PLT_TYP_FM8_TOWNS":       11,
		"PLT_TYP_GAMEBOY_ADVANCE": 12,
		"PLT_TYP_GAMEBOY_COLOR":   13,
		"PLT_TYP_MSX":             14,
		"PLT_TYP_NINTENDO_DS":     15,
		"PLT_TYP_NES":             16,
		"PLT_TYP_P88":             17,
		"PLT_TYP_P98":             18,
		"PLT_TYP_PC_ENGINE":       19,
		"PLT_TYP_PC_FX":           20,
		"PLT_TYP_PSP":             21,
		"PLT_TYP_PS1":             22,
		"PLT_TYP_PS2":             23,
		"PLT_TYP_PS3":             24,
		"PLT_TYP_PS4":             25,
		"PLT_TYP_PS5":             26,
		"PLT_TYP_PS_VITA":         27,
		"PLT_TYP_DGRAMCAST":       28,
		"PLT_TYP_SEGA_SATURN":     29,
		"PLT_TYP_SEGA_MEGACD":     30,
		"PLT_TYP_SUPER_NINTENDO":  31,
		"PLT_TYP_NINTENDO_SWITCH": 32,
		"PLT_TYP_NINTENDO_WII":    33,
		"PLT_TYP_NINTENDO_WII_U":  34,
		"PLT_TYP_NINTENDO_3DS":    35,
		"PLT_TYP_X68000":          36,
		"PLT_TYP_XBOX_ONE":        37,
		"PLT_TYP_XBOX_360":        38,
		"PLT_TYP_XBOX":            39,
		"PLT_TYP_XBOX_X":          40,
		"PLT_TYP_WEBSITE":         41,
		"PLT_TYP_VN_DS":           42,
		"PLT_TYP_SHARP_X1":        43,
		"PLT_TYP_INTERACTIVE_3DO": 44,
		"PLT_TYP_OTHER":           45,
		"PLT_TYP_MOBILE_OTHER":    46,
	}
)

func (x GameRelease_Platform) Enum() *GameRelease_Platform {
	p := new(GameRelease_Platform)
	*p = x
	return p
}

func (x GameRelease_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameRelease_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[21].Descriptor()
}

func (GameRelease_Platform) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[21]
}

func (x GameRelease_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameRelease_Platform.Descriptor instead.
func (GameRelease_Platform) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16, 3}
}

type GraphicNovel_GraphicNovelType int32

const (
	// Unknown graphic novel type
	GraphicNovel_GRN_TYP_UNKNOWN GraphicNovel_GraphicNovelType = 0
	// Japanese GraphicNovel
	GraphicNovel_GRN_TYP_MANGA GraphicNovel_GraphicNovelType = 1
	// One shot (only one volume)
	GraphicNovel_GRN_TYP_ONE_SHOT GraphicNovel_GraphicNovelType = 2
	// Cinese GraphicNovel
	GraphicNovel_GRN_TYP_MANHUA GraphicNovel_GraphicNovelType = 3
	// Korean GraphicNovel
	GraphicNovel_GRN_TYP_MANHWA GraphicNovel_GraphicNovelType = 4
	// Original English Language
	GraphicNovel_GRN_TYP_OEL GraphicNovel_GraphicNovelType = 5
	// Web native comic (webtoon)
	GraphicNovel_GRN_TYP_WEB_COMIC GraphicNovel_GraphicNovelType = 6
	// GraphicNovel consisting of 4 pannels
	GraphicNovel_GRN_TYP_YON_KOMA GraphicNovel_GraphicNovelType = 7
	// Other
	GraphicNovel_GRN_TYP_OTHER GraphicNovel_GraphicNovelType = 8
)

// Enum value maps for GraphicNovel_GraphicNovelType.
var (
	GraphicNovel_GraphicNovelType_name = map[int32]string{
		0: "GRN_TYP_UNKNOWN",
		1: "GRN_TYP_MANGA",
		2: "GRN_TYP_ONE_SHOT",
		3: "GRN_TYP_MANHUA",
		4: "GRN_TYP_MANHWA",
		5: "GRN_TYP_OEL",
		6: "GRN_TYP_WEB_COMIC",
		7: "GRN_TYP_YON_KOMA",
		8: "GRN_TYP_OTHER",
	}
	GraphicNovel_GraphicNovelType_value = map[string]int32{
		"GRN_TYP_UNKNOWN":   0,
		"GRN_TYP_MANGA":     1,
		"GRN_TYP_ONE_SHOT":  2,
		"GRN_TYP_MANHUA":    3,
		"GRN_TYP_MANHWA":    4,
		"GRN_TYP_OEL":       5,
		"GRN_TYP_WEB_COMIC": 6,
		"GRN_TYP_YON_KOMA":  7,
		"GRN_TYP_OTHER":     8,
	}
)

func (x GraphicNovel_GraphicNovelType) Enum() *GraphicNovel_GraphicNovelType {
	p := new(GraphicNovel_GraphicNovelType)
	*p = x
	return p
}

func (x GraphicNovel_GraphicNovelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphicNovel_GraphicNovelType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[22].Descriptor()
}

func (GraphicNovel_GraphicNovelType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[22]
}

func (x GraphicNovel_GraphicNovelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphicNovel_GraphicNovelType.Descriptor instead.
func (GraphicNovel_GraphicNovelType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{17, 0}
}

type Organization_OrganizationType int32

const (
	// Uunknown organization type
	Organization_ORG_TYP_UNKNOWN Organization_OrganizationType = 0
	// Coorporation / company
	Organization_ORG_TYP_CORPORATE Organization_OrganizationType = 1
	// Circle of people
	Organization_ORG_TYP_CIRCLE Organization_OrganizationType = 2
)

// Enum value maps for Organization_OrganizationType.
var (
	Organization_OrganizationType_name = map[int32]string{
		0: "ORG_TYP_UNKNOWN",
		1: "ORG_TYP_CORPORATE",
		2: "ORG_TYP_CIRCLE",
	}
	Organization_OrganizationType_value = map[string]int32{
		"ORG_TYP_UNKNOWN":   0,
		"ORG_TYP_CORPORATE": 1,
		"ORG_TYP_CIRCLE":    2,
	}
)

func (x Organization_OrganizationType) Enum() *Organization_OrganizationType {
	p := new(Organization_OrganizationType)
	*p = x
	return p
}

func (x Organization_OrganizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organization_OrganizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[23].Descriptor()
}

func (Organization_OrganizationType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[23]
}

func (x Organization_OrganizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organization_OrganizationType.Descriptor instead.
func (Organization_OrganizationType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{19, 0}
}

type VisualNovel_VisualNovelLength int32

const (
	// Unknown length
	VisualNovel_VSN_LNG_UNKNOWN VisualNovel_VisualNovelLength = 0
	// < 2 hours
	VisualNovel_VSN_LNG_VERY_SHORT VisualNovel_VisualNovelLength = 1
	// 20 - 10 hours
	VisualNovel_VSN_LNG_SHORT VisualNovel_VisualNovelLength = 2
	// 10 - 30 hours
	VisualNovel_VSN_LNG_MEDIUM VisualNovel_VisualNovelLength = 3
	// 30 - 50 hours
	VisualNovel_VSN_LNG_LONG VisualNovel_VisualNovelLength = 4
	// > 50 hours
	VisualNovel_VSN_LNG_VERY_LONG VisualNovel_VisualNovelLength = 5
)

// Enum value maps for VisualNovel_VisualNovelLength.
var (
	VisualNovel_VisualNovelLength_name = map[int32]string{
		0: "VSN_LNG_UNKNOWN",
		1: "VSN_LNG_VERY_SHORT",
		2: "VSN_LNG_SHORT",
		3: "VSN_LNG_MEDIUM",
		4: "VSN_LNG_LONG",
		5: "VSN_LNG_VERY_LONG",
	}
	VisualNovel_VisualNovelLength_value = map[string]int32{
		"VSN_LNG_UNKNOWN":    0,
		"VSN_LNG_VERY_SHORT": 1,
		"VSN_LNG_SHORT":      2,
		"VSN_LNG_MEDIUM":     3,
		"VSN_LNG_LONG":       4,
		"VSN_LNG_VERY_LONG":  5,
	}
)

func (x VisualNovel_VisualNovelLength) Enum() *VisualNovel_VisualNovelLength {
	p := new(VisualNovel_VisualNovelLength)
	*p = x
	return p
}

func (x VisualNovel_VisualNovelLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualNovel_VisualNovelLength) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[24].Descriptor()
}

func (VisualNovel_VisualNovelLength) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[24]
}

func (x VisualNovel_VisualNovelLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualNovel_VisualNovelLength.Descriptor instead.
func (VisualNovel_VisualNovelLength) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{23, 0}
}

type ContentRelation_ContentRelationType int32

const (
	ContentRelation_CONTENT_RELATION_TYPE_UNSPECIFIED ContentRelation_ContentRelationType = 0
	// ADAPTATION implies that the subject is the base from which the object has been adapted
	// reverse = BASE
	ContentRelation_ADAPTATION ContentRelation_ContentRelationType = 1
	// BASE Adaptation
	// reverse = Adaptation
	ContentRelation_BASE ContentRelation_ContentRelationType = 2
	// SAMESETTING Same universe/world/reality/timeline with completely different characters.
	// reverse = SAMESETTING
	ContentRelation_SAME_SETTING ContentRelation_ContentRelationType = 3
	// ALTSETTING Same universe/world/reality/timeline same characters with different universe/world/reality/timeline.
	// reverse = ALTVERSION
	ContentRelation_ALTERNATIVE_SETTING ContentRelation_ContentRelationType = 4
	// ALTVERSION alternative version Same setting, same characters, story is told differently.
	// reverse = ALTVERSION
	ContentRelation_ALTERNATIVE_VERSION ContentRelation_ContentRelationType = 5
	// CHARACTER When characters appear in both series, but is not a spin-off
	// reverse = CHARACTER
	ContentRelation_CHARACTER ContentRelation_ContentRelationType = 6
	// FULLSTORY the object is full story of the subject
	// this implies that the subject is a summary of the object
	// reverse = SUMMARY
	ContentRelation_FULL_STORY ContentRelation_ContentRelationType = 7
	// SUMMARY summary
	// reverse = FULLSTORY
	ContentRelation_SUMMARY ContentRelation_ContentRelationType = 8
	// PARENTSTORY the object is the parent story of the subject
	// this implies that the subject is a spin-off of the object
	// reverse = SPINOFF
	ContentRelation_PARENT_STORY ContentRelation_ContentRelationType = 9
	// SpinOff spin off
	// reverse = ParentStory
	ContentRelation_SPIN_OFF ContentRelation_ContentRelationType = 10
	// PREQUEL prequel
	// reverse = SEQUEL
	ContentRelation_PREQUEL ContentRelation_ContentRelationType = 11
	// SEQUEL sequel
	// reverse = PREQUEL
	ContentRelation_SEQUEL ContentRelation_ContentRelationType = 12
	// MAINSTORY the object is the main story from which the subject has been created
	// this implies that the subject is a side story of the object
	// reverse = SIDESTORY
	ContentRelation_MAIN_STORY ContentRelation_ContentRelationType = 13
	// SIDESTORY side story
	// reverse = MAINSTORY
	ContentRelation_SIDE_STORY ContentRelation_ContentRelationType = 14
	// ORIGINAL the object is the original of the subject
	// this implies that the subject is the parody or fan made object
	// reverse = PARODY
	ContentRelation_ORIGINAL ContentRelation_ContentRelationType = 15
	// PARODY is parody
	// reverse = ORIGINAL
	ContentRelation_PARODY ContentRelation_ContentRelationType = 16
)

// Enum value maps for ContentRelation_ContentRelationType.
var (
	ContentRelation_ContentRelationType_name = map[int32]string{
		0:  "CONTENT_RELATION_TYPE_UNSPECIFIED",
		1:  "ADAPTATION",
		2:  "BASE",
		3:  "SAME_SETTING",
		4:  "ALTERNATIVE_SETTING",
		5:  "ALTERNATIVE_VERSION",
		6:  "CHARACTER",
		7:  "FULL_STORY",
		8:  "SUMMARY",
		9:  "PARENT_STORY",
		10: "SPIN_OFF",
		11: "PREQUEL",
		12: "SEQUEL",
		13: "MAIN_STORY",
		14: "SIDE_STORY",
		15: "ORIGINAL",
		16: "PARODY",
	}
	ContentRelation_ContentRelationType_value = map[string]int32{
		"CONTENT_RELATION_TYPE_UNSPECIFIED": 0,
		"ADAPTATION":                        1,
		"BASE":                              2,
		"SAME_SETTING":                      3,
		"ALTERNATIVE_SETTING":               4,
		"ALTERNATIVE_VERSION":               5,
		"CHARACTER":                         6,
		"FULL_STORY":                        7,
		"SUMMARY":                           8,
		"PARENT_STORY":                      9,
		"SPIN_OFF":                          10,
		"PREQUEL":                           11,
		"SEQUEL":                            12,
		"MAIN_STORY":                        13,
		"SIDE_STORY":                        14,
		"ORIGINAL":                          15,
		"PARODY":                            16,
	}
)

func (x ContentRelation_ContentRelationType) Enum() *ContentRelation_ContentRelationType {
	p := new(ContentRelation_ContentRelationType)
	*p = x
	return p
}

func (x ContentRelation_ContentRelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentRelation_ContentRelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[25].Descriptor()
}

func (ContentRelation_ContentRelationType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[25]
}

func (x ContentRelation_ContentRelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentRelation_ContentRelationType.Descriptor instead.
func (ContentRelation_ContentRelationType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{28, 0}
}

type Cast_CastRelation int32

const (
	Cast_CAST_RELATION_UNSPECIFIED Cast_CastRelation = 0
	Cast_MAIN                      Cast_CastRelation = 1
	Cast_SUPPORT                   Cast_CastRelation = 2
	Cast_APPEARS                   Cast_CastRelation = 3
)

// Enum value maps for Cast_CastRelation.
var (
	Cast_CastRelation_name = map[int32]string{
		0: "CAST_RELATION_UNSPECIFIED",
		1: "MAIN",
		2: "SUPPORT",
		3: "APPEARS",
	}
	Cast_CastRelation_value = map[string]int32{
		"CAST_RELATION_UNSPECIFIED": 0,
		"MAIN":                      1,
		"SUPPORT":                   2,
		"APPEARS":                   3,
	}
)

func (x Cast_CastRelation) Enum() *Cast_CastRelation {
	p := new(Cast_CastRelation)
	*p = x
	return p
}

func (x Cast_CastRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cast_CastRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[26].Descriptor()
}

func (Cast_CastRelation) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[26]
}

func (x Cast_CastRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cast_CastRelation.Descriptor instead.
func (Cast_CastRelation) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{29, 0}
}

type Soundtrack_SoundtrackType int32

const (
	// Unknown type
	Soundtrack_SND_TRC_TYP_UNKNOWN Soundtrack_SoundtrackType = 0
	// The track is used as ending
	Soundtrack_SND_TRC_TYP_ENDING Soundtrack_SoundtrackType = 1
	// The track is used as opening
	Soundtrack_SND_TRC_TYP_OPENING Soundtrack_SoundtrackType = 2
	// The track is used as insert song
	Soundtrack_SND_TRC_TYP_INSERT Soundtrack_SoundtrackType = 3
	// The track is used as background song
	Soundtrack_SND_TRC_TYP_BACKGROUND Soundtrack_SoundtrackType = 4
	// The track is used as image song
	Soundtrack_SND_TRC_TYP_IMAGE Soundtrack_SoundtrackType = 5
	// The track is used as theme song
	Soundtrack_SND_TRC_TYP_THEME Soundtrack_SoundtrackType = 6
)

// Enum value maps for Soundtrack_SoundtrackType.
var (
	Soundtrack_SoundtrackType_name = map[int32]string{
		0: "SND_TRC_TYP_UNKNOWN",
		1: "SND_TRC_TYP_ENDING",
		2: "SND_TRC_TYP_OPENING",
		3: "SND_TRC_TYP_INSERT",
		4: "SND_TRC_TYP_BACKGROUND",
		5: "SND_TRC_TYP_IMAGE",
		6: "SND_TRC_TYP_THEME",
	}
	Soundtrack_SoundtrackType_value = map[string]int32{
		"SND_TRC_TYP_UNKNOWN":    0,
		"SND_TRC_TYP_ENDING":     1,
		"SND_TRC_TYP_OPENING":    2,
		"SND_TRC_TYP_INSERT":     3,
		"SND_TRC_TYP_BACKGROUND": 4,
		"SND_TRC_TYP_IMAGE":      5,
		"SND_TRC_TYP_THEME":      6,
	}
)

func (x Soundtrack_SoundtrackType) Enum() *Soundtrack_SoundtrackType {
	p := new(Soundtrack_SoundtrackType)
	*p = x
	return p
}

func (x Soundtrack_SoundtrackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Soundtrack_SoundtrackType) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[27].Descriptor()
}

func (Soundtrack_SoundtrackType) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[27]
}

func (x Soundtrack_SoundtrackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Soundtrack_SoundtrackType.Descriptor instead.
func (Soundtrack_SoundtrackType) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{34, 0}
}

type ContributionChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Additions []*EntryEntity `protobuf:"bytes,2,rep,name=additions,proto3" json:"additions,omitempty"`
	Deletions []*EntryEntity `protobuf:"bytes,3,rep,name=deletions,proto3" json:"deletions,omitempty"`
}

func (x *ContributionChanges) Reset() {
	*x = ContributionChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributionChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributionChanges) ProtoMessage() {}

func (x *ContributionChanges) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributionChanges.ProtoReflect.Descriptor instead.
func (*ContributionChanges) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *ContributionChanges) GetAdditions() []*EntryEntity {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *ContributionChanges) GetDeletions() []*EntryEntity {
	if x != nil {
		return x.Deletions
	}
	return nil
}

type Contribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the contribution.
	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reviewer    string             `protobuf:"bytes,3,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	State       Contribution_State `protobuf:"varint,4,opt,name=state,proto3,enum=animeshon.knowledge.v1alpha1.Contribution_State" json:"state,omitempty"`
	DisplayName string             `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Incremental value which specifies how many times the contribution has been reviewed.
	Generation int32 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	// When the album was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the album was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// When the album was reviewed.
	ReviewTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=review_time,json=reviewTime,proto3" json:"review_time,omitempty"`
}

func (x *Contribution) Reset() {
	*x = Contribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contribution) ProtoMessage() {}

func (x *Contribution) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contribution.ProtoReflect.Descriptor instead.
func (*Contribution) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{1}
}

func (x *Contribution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contribution) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *Contribution) GetState() Contribution_State {
	if x != nil {
		return x.State
	}
	return Contribution_PENDING
}

func (x *Contribution) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Contribution) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Contribution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Contribution) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Contribution) GetReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewTime
	}
	return nil
}

type ReviewContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment string               `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Changes *ContributionChanges `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ReviewContributionRequest) Reset() {
	*x = ReviewContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewContributionRequest) ProtoMessage() {}

func (x *ReviewContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewContributionRequest.ProtoReflect.Descriptor instead.
func (*ReviewContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{2}
}

func (x *ReviewContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReviewContributionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReviewContributionRequest) GetChanges() *ContributionChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CreateContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource where this contribution will be created.
	Parent       string               `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Contribution *Contribution        `protobuf:"bytes,2,opt,name=contribution,proto3" json:"contribution,omitempty"`
	Changes      *ContributionChanges `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *CreateContributionRequest) Reset() {
	*x = CreateContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContributionRequest) ProtoMessage() {}

func (x *CreateContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContributionRequest.ProtoReflect.Descriptor instead.
func (*CreateContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{3}
}

func (x *CreateContributionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateContributionRequest) GetContribution() *Contribution {
	if x != nil {
		return x.Contribution
	}
	return nil
}

func (x *CreateContributionRequest) GetChanges() *ContributionChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListContributionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent, which owns this collection of contributions.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of users to return. Server may return fewer users
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListContributionsRequest) Reset() {
	*x = ListContributionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContributionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContributionsRequest) ProtoMessage() {}

func (x *ListContributionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContributionsRequest.ProtoReflect.Descriptor instead.
func (*ListContributionsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{4}
}

func (x *ListContributionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListContributionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContributionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListContributionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListContributionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of contributions.
	Contributions []*Contribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListContributionsResponse) Reset() {
	*x = ListContributionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContributionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContributionsResponse) ProtoMessage() {}

func (x *ListContributionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContributionsResponse.ProtoReflect.Descriptor instead.
func (*ListContributionsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{5}
}

func (x *ListContributionsResponse) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

func (x *ListContributionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetContributionChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested contribution.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContributionChangesRequest) Reset() {
	*x = GetContributionChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContributionChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionChangesRequest) ProtoMessage() {}

func (x *GetContributionChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionChangesRequest.ProtoReflect.Descriptor instead.
func (*GetContributionChangesRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{6}
}

func (x *GetContributionChangesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested contribution.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContributionRequest) Reset() {
	*x = GetContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionRequest) ProtoMessage() {}

func (x *GetContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionRequest.ProtoReflect.Descriptor instead.
func (*GetContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{7}
}

func (x *GetContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ApproveContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ApproveContributionRequest) Reset() {
	*x = ApproveContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveContributionRequest) ProtoMessage() {}

func (x *ApproveContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveContributionRequest.ProtoReflect.Descriptor instead.
func (*ApproveContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{8}
}

func (x *ApproveContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RejectContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RejectContributionRequest) Reset() {
	*x = RejectContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectContributionRequest) ProtoMessage() {}

func (x *RejectContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectContributionRequest.ProtoReflect.Descriptor instead.
func (*RejectContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{9}
}

func (x *RejectContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EntryEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*EntryEntity_Anime
	//	*EntryEntity_Canonical
	//	*EntryEntity_Chapter
	//	*EntryEntity_Character
	//	*EntryEntity_Episode
	//	*EntryEntity_GameRelease
	//	*EntryEntity_GraphicNovel
	//	*EntryEntity_LightNovel
	//	*EntryEntity_Organization
	//	*EntryEntity_Person
	//	*EntryEntity_Track
	//	*EntryEntity_Universe
	//	*EntryEntity_Volume
	Entity isEntryEntity_Entity `protobuf_oneof:"entity"`
}

func (x *EntryEntity) Reset() {
	*x = EntryEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryEntity) ProtoMessage() {}

func (x *EntryEntity) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryEntity.ProtoReflect.Descriptor instead.
func (*EntryEntity) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{10}
}

func (m *EntryEntity) GetEntity() isEntryEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *EntryEntity) GetAnime() *Anime {
	if x, ok := x.GetEntity().(*EntryEntity_Anime); ok {
		return x.Anime
	}
	return nil
}

func (x *EntryEntity) GetCanonical() *Canonical {
	if x, ok := x.GetEntity().(*EntryEntity_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *EntryEntity) GetChapter() *Chapter {
	if x, ok := x.GetEntity().(*EntryEntity_Chapter); ok {
		return x.Chapter
	}
	return nil
}

func (x *EntryEntity) GetCharacter() *Character {
	if x, ok := x.GetEntity().(*EntryEntity_Character); ok {
		return x.Character
	}
	return nil
}

func (x *EntryEntity) GetEpisode() *Episode {
	if x, ok := x.GetEntity().(*EntryEntity_Episode); ok {
		return x.Episode
	}
	return nil
}

func (x *EntryEntity) GetGameRelease() *GameRelease {
	if x, ok := x.GetEntity().(*EntryEntity_GameRelease); ok {
		return x.GameRelease
	}
	return nil
}

func (x *EntryEntity) GetGraphicNovel() *GraphicNovel {
	if x, ok := x.GetEntity().(*EntryEntity_GraphicNovel); ok {
		return x.GraphicNovel
	}
	return nil
}

func (x *EntryEntity) GetLightNovel() *LightNovel {
	if x, ok := x.GetEntity().(*EntryEntity_LightNovel); ok {
		return x.LightNovel
	}
	return nil
}

func (x *EntryEntity) GetOrganization() *Organization {
	if x, ok := x.GetEntity().(*EntryEntity_Organization); ok {
		return x.Organization
	}
	return nil
}

func (x *EntryEntity) GetPerson() *Person {
	if x, ok := x.GetEntity().(*EntryEntity_Person); ok {
		return x.Person
	}
	return nil
}

func (x *EntryEntity) GetTrack() *Track {
	if x, ok := x.GetEntity().(*EntryEntity_Track); ok {
		return x.Track
	}
	return nil
}

func (x *EntryEntity) GetUniverse() *Universe {
	if x, ok := x.GetEntity().(*EntryEntity_Universe); ok {
		return x.Universe
	}
	return nil
}

func (x *EntryEntity) GetVolume() *Volume {
	if x, ok := x.GetEntity().(*EntryEntity_Volume); ok {
		return x.Volume
	}
	return nil
}

type isEntryEntity_Entity interface {
	isEntryEntity_Entity()
}

type EntryEntity_Anime struct {
	Anime *Anime `protobuf:"bytes,1,opt,name=anime,proto3,oneof"`
}

type EntryEntity_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,2,opt,name=canonical,proto3,oneof"`
}

type EntryEntity_Chapter struct {
	Chapter *Chapter `protobuf:"bytes,3,opt,name=chapter,proto3,oneof"`
}

type EntryEntity_Character struct {
	Character *Character `protobuf:"bytes,4,opt,name=character,proto3,oneof"`
}

type EntryEntity_Episode struct {
	Episode *Episode `protobuf:"bytes,5,opt,name=episode,proto3,oneof"`
}

type EntryEntity_GameRelease struct {
	GameRelease *GameRelease `protobuf:"bytes,6,opt,name=game_release,json=gameRelease,proto3,oneof"`
}

type EntryEntity_GraphicNovel struct {
	GraphicNovel *GraphicNovel `protobuf:"bytes,7,opt,name=graphic_novel,json=graphicNovel,proto3,oneof"`
}

type EntryEntity_LightNovel struct {
	LightNovel *LightNovel `protobuf:"bytes,8,opt,name=light_novel,json=lightNovel,proto3,oneof"`
}

type EntryEntity_Organization struct {
	Organization *Organization `protobuf:"bytes,9,opt,name=organization,proto3,oneof"`
}

type EntryEntity_Person struct {
	Person *Person `protobuf:"bytes,10,opt,name=person,proto3,oneof"`
}

type EntryEntity_Track struct {
	Track *Track `protobuf:"bytes,11,opt,name=track,proto3,oneof"`
}

type EntryEntity_Universe struct {
	Universe *Universe `protobuf:"bytes,12,opt,name=universe,proto3,oneof"`
}

type EntryEntity_Volume struct {
	Volume *Volume `protobuf:"bytes,13,opt,name=volume,proto3,oneof"`
}

func (*EntryEntity_Anime) isEntryEntity_Entity() {}

func (*EntryEntity_Canonical) isEntryEntity_Entity() {}

func (*EntryEntity_Chapter) isEntryEntity_Entity() {}

func (*EntryEntity_Character) isEntryEntity_Entity() {}

func (*EntryEntity_Episode) isEntryEntity_Entity() {}

func (*EntryEntity_GameRelease) isEntryEntity_Entity() {}

func (*EntryEntity_GraphicNovel) isEntryEntity_Entity() {}

func (*EntryEntity_LightNovel) isEntryEntity_Entity() {}

func (*EntryEntity_Organization) isEntryEntity_Entity() {}

func (*EntryEntity_Person) isEntryEntity_Entity() {}

func (*EntryEntity_Track) isEntryEntity_Entity() {}

func (*EntryEntity_Universe) isEntryEntity_Entity() {}

func (*EntryEntity_Volume) isEntryEntity_Entity() {}

type Anime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               Anime_AnimeType        `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.Anime_AnimeType" json:"type,omitempty"`
	Episodes           []*Edge                `protobuf:"bytes,3,rep,name=episodes,proto3" json:"episodes,omitempty"`
	EpisodeCount       int32                  `protobuf:"varint,4,opt,name=EpisodeCount,proto3" json:"EpisodeCount,omitempty"`
	Names              []*Text                `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                 `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                 `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website             `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace          `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Status             ContentStatus          `protobuf:"varint,12,opt,name=status,proto3,enum=animeshon.knowledge.v1alpha1.ContentStatus" json:"status,omitempty"`
	ContentRelations   []*ContentRelation     `protobuf:"bytes,13,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	PublishingType     ContentPublishingType  `protobuf:"varint,14,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Original           Boolean                `protobuf:"varint,15,opt,name=original,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"original,omitempty"`
	Runnings           []*Running             `protobuf:"bytes,16,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring           []*Cast                `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration       `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres             []*Edge                `protobuf:"bytes,20,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases           []*Edge                `protobuf:"bytes,21,rep,name=releases,proto3" json:"releases,omitempty"`
	Soundtracks        []*Soundtrack          `protobuf:"bytes,22,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings       []*VoiceActing         `protobuf:"bytes,23,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	MaturityRatings    []MaturityRating       `protobuf:"varint,24,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction    `protobuf:"varint,25,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *Anime) Reset() {
	*x = Anime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anime) ProtoMessage() {}

func (x *Anime) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anime.ProtoReflect.Descriptor instead.
func (*Anime) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{11}
}

func (x *Anime) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Anime) GetType() Anime_AnimeType {
	if x != nil {
		return x.Type
	}
	return Anime_ANM_TYP_UNKNOWN
}

func (x *Anime) GetEpisodes() []*Edge {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Anime) GetEpisodeCount() int32 {
	if x != nil {
		return x.EpisodeCount
	}
	return 0
}

func (x *Anime) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Anime) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Anime) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Anime) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Anime) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Anime) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Anime) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Anime) GetStatus() ContentStatus {
	if x != nil {
		return x.Status
	}
	return ContentStatus_CNT_STS_UNKNOWN
}

func (x *Anime) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *Anime) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *Anime) GetOriginal() Boolean {
	if x != nil {
		return x.Original
	}
	return Boolean_UNKNOWN
}

func (x *Anime) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *Anime) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Anime) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Anime) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Anime) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Anime) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Anime) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *Anime) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *Anime) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Anime) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Canonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Names         []*Text       `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text       `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text       `protobuf:"bytes,4,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string        `protobuf:"bytes,5,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string        `protobuf:"bytes,6,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website    `protobuf:"bytes,7,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Markeplace `protobuf:"bytes,8,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Contents      []*Edge       `protobuf:"bytes,9,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Canonical) Reset() {
	*x = Canonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canonical) ProtoMessage() {}

func (x *Canonical) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canonical.ProtoReflect.Descriptor instead.
func (*Canonical) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{12}
}

func (x *Canonical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Canonical) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Canonical) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Canonical) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Canonical) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Canonical) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Canonical) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Canonical) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Canonical) GetContents() []*Edge {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               Chapter_ChapterType    `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.Chapter_ChapterType" json:"type,omitempty"`
	Episodes           []*Edge                `protobuf:"bytes,3,rep,name=episodes,proto3" json:"episodes,omitempty"`
	Identifier         int32                  `protobuf:"varint,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	PageCount          int32                  `protobuf:"varint,5,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names              []*Text                `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                `protobuf:"bytes,8,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                `protobuf:"bytes,9,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                 `protobuf:"bytes,10,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                 `protobuf:"bytes,11,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website             `protobuf:"bytes,12,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace          `protobuf:"bytes,13,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring           []*Cast                `protobuf:"bytes,14,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration       `protobuf:"bytes,15,rep,name=staff,proto3" json:"staff,omitempty"`
	Releases           []*Edge                `protobuf:"bytes,16,rep,name=releases,proto3" json:"releases,omitempty"`
	MaturityRatings    []MaturityRating       `protobuf:"varint,17,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction    `protobuf:"varint,18,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{13}
}

func (x *Chapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chapter) GetType() Chapter_ChapterType {
	if x != nil {
		return x.Type
	}
	return Chapter_CHT_TYP_UNKNOWN
}

func (x *Chapter) GetEpisodes() []*Edge {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Chapter) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Chapter) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *Chapter) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Chapter) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Chapter) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Chapter) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Chapter) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Chapter) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Chapter) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Chapter) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Chapter) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Chapter) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Chapter) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Chapter) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Chapter) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BirthdayDay   string             `protobuf:"bytes,2,opt,name=birthday_day,json=birthdayDay,proto3" json:"birthday_day,omitempty"`
	BirthdayMonth string             `protobuf:"bytes,3,opt,name=birthday_month,json=birthdayMonth,proto3" json:"birthday_month,omitempty"`
	BirthdayYear  string             `protobuf:"bytes,4,opt,name=birthday_year,json=birthdayYear,proto3" json:"birthday_year,omitempty"`
	Hometown      []*Text            `protobuf:"bytes,5,rep,name=hometown,proto3" json:"hometown,omitempty"`
	Birthplace    []*Text            `protobuf:"bytes,6,rep,name=birthplace,proto3" json:"birthplace,omitempty"`
	Genre         Gender             `protobuf:"varint,7,opt,name=genre,proto3,enum=animeshon.knowledge.v1alpha1.Gender" json:"genre,omitempty"`
	BloodType     BloodType          `protobuf:"varint,8,opt,name=blood_type,json=bloodType,proto3,enum=animeshon.knowledge.v1alpha1.BloodType" json:"blood_type,omitempty"`
	CupSize       Character_CupSize  `protobuf:"varint,9,opt,name=cup_size,json=cupSize,proto3,enum=animeshon.knowledge.v1alpha1.Character_CupSize" json:"cup_size,omitempty"`
	AgeRange      Character_AgeRange `protobuf:"varint,10,opt,name=age_range,json=ageRange,proto3,enum=animeshon.knowledge.v1alpha1.Character_AgeRange" json:"age_range,omitempty"`
	Age           int32              `protobuf:"varint,11,opt,name=age,proto3" json:"age,omitempty"`
	Height        int32              `protobuf:"varint,12,opt,name=height,proto3" json:"height,omitempty"`
	Weight        int32              `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`
	Bust          int32              `protobuf:"varint,14,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist         int32              `protobuf:"varint,15,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips          int32              `protobuf:"varint,16,opt,name=hips,proto3" json:"hips,omitempty"`
	Names         []*Text            `protobuf:"bytes,17,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text            `protobuf:"bytes,18,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text            `protobuf:"bytes,19,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string             `protobuf:"bytes,20,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string             `protobuf:"bytes,21,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website         `protobuf:"bytes,22,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Markeplace      `protobuf:"bytes,23,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	GuiseOf       []*Edge            `protobuf:"bytes,24,rep,name=guise_of,json=guiseOf,proto3" json:"guise_of,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{14}
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetBirthdayDay() string {
	if x != nil {
		return x.BirthdayDay
	}
	return ""
}

func (x *Character) GetBirthdayMonth() string {
	if x != nil {
		return x.BirthdayMonth
	}
	return ""
}

func (x *Character) GetBirthdayYear() string {
	if x != nil {
		return x.BirthdayYear
	}
	return ""
}

func (x *Character) GetHometown() []*Text {
	if x != nil {
		return x.Hometown
	}
	return nil
}

func (x *Character) GetBirthplace() []*Text {
	if x != nil {
		return x.Birthplace
	}
	return nil
}

func (x *Character) GetGenre() Gender {
	if x != nil {
		return x.Genre
	}
	return Gender_GND_TYP_UNKNOWN
}

func (x *Character) GetBloodType() BloodType {
	if x != nil {
		return x.BloodType
	}
	return BloodType_BLD_TYP_UNKNOWN
}

func (x *Character) GetCupSize() Character_CupSize {
	if x != nil {
		return x.CupSize
	}
	return Character_CHR_CUP_UNKNOWN
}

func (x *Character) GetAgeRange() Character_AgeRange {
	if x != nil {
		return x.AgeRange
	}
	return Character_CHR_AGE_UNKNOWN
}

func (x *Character) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Character) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Character) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Character) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *Character) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *Character) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *Character) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Character) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Character) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Character) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Character) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Character) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Character) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Character) GetGuiseOf() []*Edge {
	if x != nil {
		return x.GuiseOf
	}
	return nil
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               Episode_EpisodeType    `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.Episode_EpisodeType" json:"type,omitempty"`
	Identifier         int32                  `protobuf:"varint,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names              []*Text                `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                 `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                 `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website             `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace          `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring           []*Cast                `protobuf:"bytes,12,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration       `protobuf:"bytes,13,rep,name=staff,proto3" json:"staff,omitempty"`
	Soundtracks        []*Soundtrack          `protobuf:"bytes,14,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings       []*VoiceActing         `protobuf:"bytes,15,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	MaturityRatings    []MaturityRating       `protobuf:"varint,16,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction    `protobuf:"varint,17,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{15}
}

func (x *Episode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Episode) GetType() Episode_EpisodeType {
	if x != nil {
		return x.Type
	}
	return Episode_EPS_TYP_UNKNOWN
}

func (x *Episode) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Episode) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Episode) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Episode) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Episode) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Episode) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Episode) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Episode) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Episode) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Episode) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Episode) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Episode) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *Episode) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *Episode) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Episode) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type GameRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Languages   []string               `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	//repeated Media media = 4;
	Censorship           Censorship                      `protobuf:"varint,5,opt,name=censorship,proto3,enum=animeshon.knowledge.v1alpha1.Censorship" json:"censorship,omitempty"`
	PublishingType       ContentPublishingType           `protobuf:"varint,6,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Asin                 string                          `protobuf:"bytes,7,opt,name=asin,proto3" json:"asin,omitempty"`
	Gtin                 string                          `protobuf:"bytes,8,opt,name=gtin,proto3" json:"gtin,omitempty"`
	Type                 GameRelease_GameReleaseType     `protobuf:"varint,9,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.GameRelease_GameReleaseType" json:"type,omitempty"`
	WidthResolution      int32                           `protobuf:"varint,10,opt,name=WidthResolution,proto3" json:"WidthResolution,omitempty"`
	HeightResolution     int32                           `protobuf:"varint,11,opt,name=HeightResolution,proto3" json:"HeightResolution,omitempty"`
	IsPatch              Boolean                         `protobuf:"varint,12,opt,name=IsPatch,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"IsPatch,omitempty"`
	IsFree               Boolean                         `protobuf:"varint,13,opt,name=IsFree,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"IsFree,omitempty"`
	DubDegree            GameRelease_GameDubDegree       `protobuf:"varint,14,opt,name=dub_degree,json=dubDegree,proto3,enum=animeshon.knowledge.v1alpha1.GameRelease_GameDubDegree" json:"dub_degree,omitempty"`
	StoryAnimationDegree GameRelease_GameAnimationDegree `protobuf:"varint,15,opt,name=story_animation_degree,json=storyAnimationDegree,proto3,enum=animeshon.knowledge.v1alpha1.GameRelease_GameAnimationDegree" json:"story_animation_degree,omitempty"`
	EroAnimationDegree   GameRelease_GameAnimationDegree `protobuf:"varint,16,opt,name=ero_animation_degree,json=eroAnimationDegree,proto3,enum=animeshon.knowledge.v1alpha1.GameRelease_GameAnimationDegree" json:"ero_animation_degree,omitempty"`
	Engine               string                          `protobuf:"bytes,17,opt,name=engine,proto3" json:"engine,omitempty"`
	Platforms            []GameRelease_Platform          `protobuf:"varint,18,rep,packed,name=platforms,proto3,enum=animeshon.knowledge.v1alpha1.GameRelease_Platform" json:"platforms,omitempty"`
	Names                []*Text                         `protobuf:"bytes,19,rep,name=names,proto3" json:"names,omitempty"`
	Aliases              []*Text                         `protobuf:"bytes,20,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions         []*Text                         `protobuf:"bytes,21,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId         string                          `protobuf:"bytes,22,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId        string                          `protobuf:"bytes,23,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites             []*Website                      `protobuf:"bytes,24,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces         []*Markeplace                   `protobuf:"bytes,25,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring             []*Cast                         `protobuf:"bytes,26,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff                []*Collaboration                `protobuf:"bytes,27,rep,name=staff,proto3" json:"staff,omitempty"`
	Soundtracks          []*Soundtrack                   `protobuf:"bytes,28,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings         []*VoiceActing                  `protobuf:"bytes,29,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	MaturityRatings      []MaturityRating                `protobuf:"varint,30,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions   []RegionRestriction             `protobuf:"varint,31,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *GameRelease) Reset() {
	*x = GameRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRelease) ProtoMessage() {}

func (x *GameRelease) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRelease.ProtoReflect.Descriptor instead.
func (*GameRelease) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16}
}

func (x *GameRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameRelease) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *GameRelease) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *GameRelease) GetCensorship() Censorship {
	if x != nil {
		return x.Censorship
	}
	return Censorship_CNS_TYP_UNKNOWN
}

func (x *GameRelease) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *GameRelease) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *GameRelease) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *GameRelease) GetType() GameRelease_GameReleaseType {
	if x != nil {
		return x.Type
	}
	return GameRelease_GMR_TYP_UNKNOWN
}

func (x *GameRelease) GetWidthResolution() int32 {
	if x != nil {
		return x.WidthResolution
	}
	return 0
}

func (x *GameRelease) GetHeightResolution() int32 {
	if x != nil {
		return x.HeightResolution
	}
	return 0
}

func (x *GameRelease) GetIsPatch() Boolean {
	if x != nil {
		return x.IsPatch
	}
	return Boolean_UNKNOWN
}

func (x *GameRelease) GetIsFree() Boolean {
	if x != nil {
		return x.IsFree
	}
	return Boolean_UNKNOWN
}

func (x *GameRelease) GetDubDegree() GameRelease_GameDubDegree {
	if x != nil {
		return x.DubDegree
	}
	return GameRelease_DUB_DGR_UNKNOWN
}

func (x *GameRelease) GetStoryAnimationDegree() GameRelease_GameAnimationDegree {
	if x != nil {
		return x.StoryAnimationDegree
	}
	return GameRelease_ANM_DGR_UNKNOWN
}

func (x *GameRelease) GetEroAnimationDegree() GameRelease_GameAnimationDegree {
	if x != nil {
		return x.EroAnimationDegree
	}
	return GameRelease_ANM_DGR_UNKNOWN
}

func (x *GameRelease) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *GameRelease) GetPlatforms() []GameRelease_Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *GameRelease) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GameRelease) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GameRelease) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *GameRelease) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *GameRelease) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *GameRelease) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *GameRelease) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *GameRelease) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *GameRelease) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *GameRelease) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *GameRelease) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *GameRelease) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *GameRelease) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type GraphicNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               GraphicNovel_GraphicNovelType `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.GraphicNovel_GraphicNovelType" json:"type,omitempty"`
	Chapters           []*Edge                       `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	ChapterCount       int32                         `protobuf:"varint,4,opt,name=ChapterCount,proto3" json:"ChapterCount,omitempty"`
	Names              []*Text                       `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                       `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                       `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                        `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                        `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website                    `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace                 `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Status             ContentStatus                 `protobuf:"varint,12,opt,name=status,proto3,enum=animeshon.knowledge.v1alpha1.ContentStatus" json:"status,omitempty"`
	ContentRelations   []*ContentRelation            `protobuf:"bytes,13,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	PublishingType     ContentPublishingType         `protobuf:"varint,14,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Original           Boolean                       `protobuf:"varint,15,opt,name=original,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"original,omitempty"`
	Runnings           []*Running                    `protobuf:"bytes,16,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate        *timestamppb.Timestamp        `protobuf:"bytes,17,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring           []*Cast                       `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration              `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres             []*Edge                       `protobuf:"bytes,20,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases           []*Edge                       `protobuf:"bytes,21,rep,name=releases,proto3" json:"releases,omitempty"`
	MaturityRatings    []MaturityRating              `protobuf:"varint,22,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction           `protobuf:"varint,23,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
	Volumes            []*Edge                       `protobuf:"bytes,24,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *GraphicNovel) Reset() {
	*x = GraphicNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicNovel) ProtoMessage() {}

func (x *GraphicNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicNovel.ProtoReflect.Descriptor instead.
func (*GraphicNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{17}
}

func (x *GraphicNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphicNovel) GetType() GraphicNovel_GraphicNovelType {
	if x != nil {
		return x.Type
	}
	return GraphicNovel_GRN_TYP_UNKNOWN
}

func (x *GraphicNovel) GetChapters() []*Edge {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *GraphicNovel) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *GraphicNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GraphicNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GraphicNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *GraphicNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *GraphicNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *GraphicNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *GraphicNovel) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *GraphicNovel) GetStatus() ContentStatus {
	if x != nil {
		return x.Status
	}
	return ContentStatus_CNT_STS_UNKNOWN
}

func (x *GraphicNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *GraphicNovel) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *GraphicNovel) GetOriginal() Boolean {
	if x != nil {
		return x.Original
	}
	return Boolean_UNKNOWN
}

func (x *GraphicNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *GraphicNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *GraphicNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *GraphicNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *GraphicNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GraphicNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *GraphicNovel) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *GraphicNovel) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

func (x *GraphicNovel) GetVolumes() []*Edge {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type LightNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chapters           []*Edge                `protobuf:"bytes,2,rep,name=chapters,proto3" json:"chapters,omitempty"`
	ChapterCount       int32                  `protobuf:"varint,3,opt,name=ChapterCount,proto3" json:"ChapterCount,omitempty"`
	Names              []*Text                `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                `protobuf:"bytes,6,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                 `protobuf:"bytes,7,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                 `protobuf:"bytes,8,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website             `protobuf:"bytes,9,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace          `protobuf:"bytes,10,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Status             ContentStatus          `protobuf:"varint,11,opt,name=status,proto3,enum=animeshon.knowledge.v1alpha1.ContentStatus" json:"status,omitempty"`
	ContentRelations   []*ContentRelation     `protobuf:"bytes,12,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	PublishingType     ContentPublishingType  `protobuf:"varint,13,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Original           Boolean                `protobuf:"varint,14,opt,name=original,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"original,omitempty"`
	Runnings           []*Running             `protobuf:"bytes,15,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring           []*Cast                `protobuf:"bytes,17,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration       `protobuf:"bytes,18,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres             []*Edge                `protobuf:"bytes,19,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases           []*Edge                `protobuf:"bytes,20,rep,name=releases,proto3" json:"releases,omitempty"`
	MaturityRatings    []MaturityRating       `protobuf:"varint,21,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction    `protobuf:"varint,22,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
	Volumes            []*Edge                `protobuf:"bytes,23,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *LightNovel) Reset() {
	*x = LightNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightNovel) ProtoMessage() {}

func (x *LightNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightNovel.ProtoReflect.Descriptor instead.
func (*LightNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{18}
}

func (x *LightNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LightNovel) GetChapters() []*Edge {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *LightNovel) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *LightNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *LightNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *LightNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *LightNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *LightNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *LightNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *LightNovel) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *LightNovel) GetStatus() ContentStatus {
	if x != nil {
		return x.Status
	}
	return ContentStatus_CNT_STS_UNKNOWN
}

func (x *LightNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *LightNovel) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *LightNovel) GetOriginal() Boolean {
	if x != nil {
		return x.Original
	}
	return Boolean_UNKNOWN
}

func (x *LightNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *LightNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *LightNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *LightNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *LightNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *LightNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *LightNovel) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *LightNovel) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

func (x *LightNovel) GetVolumes() []*Edge {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type           Organization_OrganizationType `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.Organization_OrganizationType" json:"type,omitempty"`
	FoundationDate *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=foundation_date,json=foundationDate,proto3" json:"foundation_date,omitempty"`
	Focus          ContentFocus                  `protobuf:"varint,4,opt,name=focus,proto3,enum=animeshon.knowledge.v1alpha1.ContentFocus" json:"focus,omitempty"`
	Names          []*Text                       `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases        []*Text                       `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions   []*Text                       `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId   string                        `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId  string                        `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites       []*Website                    `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{19}
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetType() Organization_OrganizationType {
	if x != nil {
		return x.Type
	}
	return Organization_ORG_TYP_UNKNOWN
}

func (x *Organization) GetFoundationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FoundationDate
	}
	return nil
}

func (x *Organization) GetFocus() ContentFocus {
	if x != nil {
		return x.Focus
	}
	return ContentFocus_CNT_FCS_UNKNOWN
}

func (x *Organization) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Organization) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Organization) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Organization) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Organization) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Organization) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nationalities []string               `protobuf:"bytes,2,rep,name=nationalities,proto3" json:"nationalities,omitempty"`
	Languages     []string               `protobuf:"bytes,3,rep,name=languages,proto3" json:"languages,omitempty"`
	Birthday      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Gender        Gender                 `protobuf:"varint,5,opt,name=gender,proto3,enum=animeshon.knowledge.v1alpha1.Gender" json:"gender,omitempty"`
	BloodType     BloodType              `protobuf:"varint,6,opt,name=blood_type,json=bloodType,proto3,enum=animeshon.knowledge.v1alpha1.BloodType" json:"blood_type,omitempty"`
	Names         []*Text                `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text                `protobuf:"bytes,8,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text                `protobuf:"bytes,9,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string                 `protobuf:"bytes,10,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string                 `protobuf:"bytes,11,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website             `protobuf:"bytes,12,rep,name=websites,proto3" json:"websites,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{20}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetNationalities() []string {
	if x != nil {
		return x.Nationalities
	}
	return nil
}

func (x *Person) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Person) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *Person) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GND_TYP_UNKNOWN
}

func (x *Person) GetBloodType() BloodType {
	if x != nil {
		return x.BloodType
	}
	return BloodType_BLD_TYP_UNKNOWN
}

func (x *Person) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Person) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Person) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Person) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Person) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Person) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names         []*Text                `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text                `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text                `protobuf:"bytes,5,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string                 `protobuf:"bytes,6,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string                 `protobuf:"bytes,7,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website             `protobuf:"bytes,8,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Markeplace          `protobuf:"bytes,9,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Staff         []*Collaboration       `protobuf:"bytes,10,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres        []*Edge                `protobuf:"bytes,11,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases      []*Edge                `protobuf:"bytes,12,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{21}
}

func (x *Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Track) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Track) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Track) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Track) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Track) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Track) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Track) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Track) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Track) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Track) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Track) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

type Universe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Names         []*Text       `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text       `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text       `protobuf:"bytes,4,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string        `protobuf:"bytes,5,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string        `protobuf:"bytes,6,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website    `protobuf:"bytes,7,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Markeplace `protobuf:"bytes,8,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Contents      []*Edge       `protobuf:"bytes,9,rep,name=contents,proto3" json:"contents,omitempty"`
	Canonicals    []*Edge       `protobuf:"bytes,10,rep,name=canonicals,proto3" json:"canonicals,omitempty"`
}

func (x *Universe) Reset() {
	*x = Universe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Universe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Universe) ProtoMessage() {}

func (x *Universe) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Universe.ProtoReflect.Descriptor instead.
func (*Universe) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{22}
}

func (x *Universe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Universe) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Universe) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Universe) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Universe) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Universe) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Universe) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Universe) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Universe) GetContents() []*Edge {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Universe) GetCanonicals() []*Edge {
	if x != nil {
		return x.Canonicals
	}
	return nil
}

type VisualNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Length             VisualNovel_VisualNovelLength `protobuf:"varint,2,opt,name=length,proto3,enum=animeshon.knowledge.v1alpha1.VisualNovel_VisualNovelLength" json:"length,omitempty"`
	Names              []*Text                       `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text                       `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text                       `protobuf:"bytes,5,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                        `protobuf:"bytes,6,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                        `protobuf:"bytes,7,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website                    `protobuf:"bytes,8,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace                 `protobuf:"bytes,9,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Status             ContentStatus                 `protobuf:"varint,10,opt,name=status,proto3,enum=animeshon.knowledge.v1alpha1.ContentStatus" json:"status,omitempty"`
	ContentRelations   []*ContentRelation            `protobuf:"bytes,11,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	PublishingType     ContentPublishingType         `protobuf:"varint,12,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Original           Boolean                       `protobuf:"varint,13,opt,name=original,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"original,omitempty"`
	Runnings           []*Running                    `protobuf:"bytes,14,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate        *timestamppb.Timestamp        `protobuf:"bytes,15,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring           []*Cast                       `protobuf:"bytes,16,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration              `protobuf:"bytes,17,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres             []*Edge                       `protobuf:"bytes,18,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases           []*Edge                       `protobuf:"bytes,19,rep,name=releases,proto3" json:"releases,omitempty"`
	Soundtracks        []*Soundtrack                 `protobuf:"bytes,20,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings       []*VoiceActing                `protobuf:"bytes,21,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	MaturityRatings    []MaturityRating              `protobuf:"varint,22,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction           `protobuf:"varint,23,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *VisualNovel) Reset() {
	*x = VisualNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualNovel) ProtoMessage() {}

func (x *VisualNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualNovel.ProtoReflect.Descriptor instead.
func (*VisualNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{23}
}

func (x *VisualNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VisualNovel) GetLength() VisualNovel_VisualNovelLength {
	if x != nil {
		return x.Length
	}
	return VisualNovel_VSN_LNG_UNKNOWN
}

func (x *VisualNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *VisualNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *VisualNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *VisualNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *VisualNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *VisualNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *VisualNovel) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *VisualNovel) GetStatus() ContentStatus {
	if x != nil {
		return x.Status
	}
	return ContentStatus_CNT_STS_UNKNOWN
}

func (x *VisualNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *VisualNovel) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *VisualNovel) GetOriginal() Boolean {
	if x != nil {
		return x.Original
	}
	return Boolean_UNKNOWN
}

func (x *VisualNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *VisualNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *VisualNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *VisualNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *VisualNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *VisualNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *VisualNovel) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *VisualNovel) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *VisualNovel) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *VisualNovel) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Languages   []string               `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	//repeated Media media = 4;
	Censorship         Censorship            `protobuf:"varint,5,opt,name=censorship,proto3,enum=animeshon.knowledge.v1alpha1.Censorship" json:"censorship,omitempty"`
	PublishingType     ContentPublishingType `protobuf:"varint,6,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.knowledge.v1alpha1.ContentPublishingType" json:"publishing_type,omitempty"`
	Asin               string                `protobuf:"bytes,7,opt,name=asin,proto3" json:"asin,omitempty"`
	Gtin               string                `protobuf:"bytes,8,opt,name=gtin,proto3" json:"gtin,omitempty"`
	Identifier         int32                 `protobuf:"varint,9,opt,name=identifier,proto3" json:"identifier,omitempty"` // ReadingComplexity reading_complexity = 10;
	Names              []*Text               `protobuf:"bytes,11,rep,name=names,proto3" json:"names,omitempty"`
	Aliases            []*Text               `protobuf:"bytes,12,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions       []*Text               `protobuf:"bytes,13,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId       string                `protobuf:"bytes,14,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId      string                `protobuf:"bytes,15,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites           []*Website            `protobuf:"bytes,16,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces       []*Markeplace         `protobuf:"bytes,17,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring           []*Cast               `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff              []*Collaboration      `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	MaturityRatings    []MaturityRating      `protobuf:"varint,20,rep,packed,name=maturity_ratings,json=maturityRatings,proto3,enum=animeshon.knowledge.v1alpha1.MaturityRating" json:"maturity_ratings,omitempty"`
	RegionRestrictions []RegionRestriction   `protobuf:"varint,21,rep,packed,name=region_restrictions,json=regionRestrictions,proto3,enum=animeshon.knowledge.v1alpha1.RegionRestriction" json:"region_restrictions,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{24}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Volume) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Volume) GetCensorship() Censorship {
	if x != nil {
		return x.Censorship
	}
	return Censorship_CNS_TYP_UNKNOWN
}

func (x *Volume) GetPublishingType() ContentPublishingType {
	if x != nil {
		return x.PublishingType
	}
	return ContentPublishingType_CNT_PBL_UNKNOWN
}

func (x *Volume) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *Volume) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *Volume) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Volume) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Volume) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Volume) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Volume) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Volume) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Volume) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Volume) GetMarketplaces() []*Markeplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Volume) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Volume) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Volume) GetMaturityRatings() []MaturityRating {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Volume) GetRegionRestrictions() []RegionRestriction {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Localization string `protobuf:"bytes,2,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{25}
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Text) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

type Running struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Localization string                 `protobuf:"bytes,3,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Running) Reset() {
	*x = Running{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Running) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Running) ProtoMessage() {}

func (x *Running) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Running.ProtoReflect.Descriptor instead.
func (*Running) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{26}
}

func (x *Running) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Running) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Running) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{27}
}

func (x *Edge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//ContentRelation represent the relation between 2 different content.
//The ContentReleation field is common to both the content, therefore the server do not need
//to have both relations (from content A to B, and from B to A) because it will generate automatically
//the reverse relation.
//
//> Sending A sequel of B, the server will generate B prequel A
//
//The relation has to be read as
//entity -> has <relation> -> which is <related>
//EG: Naruto -> Sequel -> Naruto Shippuden = <Naruto> has <sequel>, which is <Naruto Shippuden>
type ContentRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Related  *Edge                               `protobuf:"bytes,1,opt,name=related,proto3" json:"related,omitempty"`
	Relation ContentRelation_ContentRelationType `protobuf:"varint,2,opt,name=relation,proto3,enum=animeshon.knowledge.v1alpha1.ContentRelation_ContentRelationType" json:"relation,omitempty"`
}

func (x *ContentRelation) Reset() {
	*x = ContentRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentRelation) ProtoMessage() {}

func (x *ContentRelation) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentRelation.ProtoReflect.Descriptor instead.
func (*ContentRelation) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{28}
}

func (x *ContentRelation) GetRelated() *Edge {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *ContentRelation) GetRelation() ContentRelation_ContentRelationType {
	if x != nil {
		return x.Relation
	}
	return ContentRelation_CONTENT_RELATION_TYPE_UNSPECIFIED
}

//
//Cast represnt the relation between a character and a content.
//The cast is always field of the content and the Edge points to the character.
type Cast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character *Edge             `protobuf:"bytes,1,opt,name=character,proto3" json:"character,omitempty"`
	Relation  Cast_CastRelation `protobuf:"varint,2,opt,name=relation,proto3,enum=animeshon.knowledge.v1alpha1.Cast_CastRelation" json:"relation,omitempty"`
}

func (x *Cast) Reset() {
	*x = Cast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cast) ProtoMessage() {}

func (x *Cast) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cast.ProtoReflect.Descriptor instead.
func (*Cast) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{29}
}

func (x *Cast) GetCharacter() *Edge {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *Cast) GetRelation() Cast_CastRelation {
	if x != nil {
		return x.Relation
	}
	return Cast_CAST_RELATION_UNSPECIFIED
}

//
//Collaboration represent the relation between a content and a person or organization.
//The collaboration must be localizaed and it must carry the information about the role of the collaborator.
//The Collaboration is always field of the content and the Edge points to the collaborator.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the collaborator collaborated
type Collaboration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collaborator *Edge  `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	Localization string `protobuf:"bytes,2,opt,name=localization,proto3" json:"localization,omitempty"`
	Role         string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Collaboration) Reset() {
	*x = Collaboration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaboration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaboration) ProtoMessage() {}

func (x *Collaboration) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaboration.ProtoReflect.Descriptor instead.
func (*Collaboration) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{30}
}

func (x *Collaboration) GetCollaborator() *Edge {
	if x != nil {
		return x.Collaborator
	}
	return nil
}

func (x *Collaboration) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

func (x *Collaboration) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

//
//Voice Acting represent voice given by a person to a voiced entity in a specific content
//The Voice Acting is always field of the content and it must be localized.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the actor gave the voice to the entity
type VoiceActing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voiced       *Edge   `protobuf:"bytes,1,opt,name=voiced,proto3" json:"voiced,omitempty"`
	Actor        *Edge   `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	Localization string  `protobuf:"bytes,3,opt,name=localization,proto3" json:"localization,omitempty"`
	Primary      Boolean `protobuf:"varint,4,opt,name=primary,proto3,enum=animeshon.knowledge.v1alpha1.Boolean" json:"primary,omitempty"`
}

func (x *VoiceActing) Reset() {
	*x = VoiceActing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceActing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceActing) ProtoMessage() {}

func (x *VoiceActing) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceActing.ProtoReflect.Descriptor instead.
func (*VoiceActing) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{31}
}

func (x *VoiceActing) GetVoiced() *Edge {
	if x != nil {
		return x.Voiced
	}
	return nil
}

func (x *VoiceActing) GetActor() *Edge {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *VoiceActing) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

func (x *VoiceActing) GetPrimary() Boolean {
	if x != nil {
		return x.Primary
	}
	return Boolean_UNKNOWN
}

//
//Any kind of website related to the entity.
//Could be official website, twitter, or external resources such as wikipedia
type Website struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Website) Reset() {
	*x = Website{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Website) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Website) ProtoMessage() {}

func (x *Website) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Website.ProtoReflect.Descriptor instead.
func (*Website) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{32}
}

func (x *Website) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//
//Markeplace is where to consume the content.
//The name field must point to a valid valid marketplace id in order to load icon and name of the marketplace.
//If the marketplace is limited to some specific country, add them to the field region following the IOS3 standard
type Markeplace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url    string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Region []string `protobuf:"bytes,3,rep,name=region,proto3" json:"region,omitempty"`
}

func (x *Markeplace) Reset() {
	*x = Markeplace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markeplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markeplace) ProtoMessage() {}

func (x *Markeplace) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markeplace.ProtoReflect.Descriptor instead.
func (*Markeplace) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{33}
}

func (x *Markeplace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Markeplace) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Markeplace) GetRegion() []string {
	if x != nil {
		return x.Region
	}
	return nil
}

//
//Soundtrack exposes the information about which Track has been used in which Content in which localization and for what.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the Track is used
type Soundtrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track        *Edge                     `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Type         Soundtrack_SoundtrackType `protobuf:"varint,2,opt,name=type,proto3,enum=animeshon.knowledge.v1alpha1.Soundtrack_SoundtrackType" json:"type,omitempty"`
	Version      TrackVersion              `protobuf:"varint,3,opt,name=version,proto3,enum=animeshon.knowledge.v1alpha1.TrackVersion" json:"version,omitempty"`
	Localization string                    `protobuf:"bytes,4,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Soundtrack) Reset() {
	*x = Soundtrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soundtrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soundtrack) ProtoMessage() {}

func (x *Soundtrack) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soundtrack.ProtoReflect.Descriptor instead.
func (*Soundtrack) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{34}
}

func (x *Soundtrack) GetTrack() *Edge {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *Soundtrack) GetType() Soundtrack_SoundtrackType {
	if x != nil {
		return x.Type
	}
	return Soundtrack_SND_TRC_TYP_UNKNOWN
}

func (x *Soundtrack) GetVersion() TrackVersion {
	if x != nil {
		return x.Version
	}
	return TrackVersion_TRK_VRS_UNKNOWN
}

func (x *Soundtrack) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

//
//TrackListing exposes the information about which Track has been released from which MusicRelease in which version and in whic order.
type TrackListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicRelease *Edge        `protobuf:"bytes,1,opt,name=musicRelease,proto3" json:"musicRelease,omitempty"`
	Version      TrackVersion `protobuf:"varint,2,opt,name=version,proto3,enum=animeshon.knowledge.v1alpha1.TrackVersion" json:"version,omitempty"`
	Index        int32        `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TrackListing) Reset() {
	*x = TrackListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackListing) ProtoMessage() {}

func (x *TrackListing) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackListing.ProtoReflect.Descriptor instead.
func (*TrackListing) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{35}
}

func (x *TrackListing) GetMusicRelease() *Edge {
	if x != nil {
		return x.MusicRelease
	}
	return nil
}

func (x *TrackListing) GetVersion() TrackVersion {
	if x != nil {
		return x.Version
	}
	return TrackVersion_TRK_VRS_UNKNOWN
}

func (x *TrackListing) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_animeshon_knowledge_v1alpha1_knowledge_proto protoreflect.FileDescriptor

var file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x38, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35,
	0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x07, 0x0a, 0x0b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x44, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xb9, 0x0e, 0x0a, 0x05, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61,
	0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12,
	0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x54, 0x56, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x4d, 0x4f, 0x56, 0x49, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x4f, 0x56, 0x41, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x4f, 0x4e, 0x41, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4e, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x4e, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x22, 0x83, 0x04, 0x0a, 0x09,
	0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x90, 0x09, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3e, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x10, 0x02, 0x22, 0xa8, 0x0e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x44, 0x61, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x68, 0x6f,
	0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x63, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62,
	0x75, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x07, 0x67, 0x75, 0x69, 0x73, 0x65, 0x4f, 0x66, 0x22, 0xc9, 0x01, 0x0a, 0x08,
	0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x52, 0x5f,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x41, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x49,
	0x4c, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47,
	0x45, 0x5f, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c,
	0x44, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x22, 0xc5, 0x03, 0x0a, 0x07, 0x43, 0x75, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x52, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x41, 0x41, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x52,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x41, 0x41, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x41, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x42, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43,
	0x55, 0x50, 0x5f, 0x43, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55,
	0x50, 0x5f, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50,
	0x5f, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f,
	0x46, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x47,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x48, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x49, 0x10, 0x0b,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4a, 0x10, 0x0c, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4b, 0x10, 0x0d, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4c, 0x10, 0x0e, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4d, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4e, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x4f, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48,
	0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x50, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52,
	0x5f, 0x43, 0x55, 0x50, 0x5f, 0x51, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f,
	0x43, 0x55, 0x50, 0x5f, 0x52, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43,
	0x55, 0x50, 0x5f, 0x53, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55,
	0x50, 0x5f, 0x54, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50,
	0x5f, 0x55, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f,
	0x56, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x57,
	0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x58, 0x10,
	0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x59, 0x10, 0x1b,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x52, 0x5f, 0x43, 0x55, 0x50, 0x5f, 0x5a, 0x10, 0x1c, 0x22,
	0xf8, 0x09, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x4a, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x50, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x50, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x50, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x4f, 0x44,
	0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x4d, 0x4f, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x50, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0x81, 0x1a, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x74, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e,
	0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x49, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x49,
	0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x49,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x64, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x62, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x52, 0x09, 0x64, 0x75, 0x62, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x73, 0x0a,
	0x16, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x52, 0x14, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x52,
	0x12, 0x65, 0x72, 0x6f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61,
	0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12,
	0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x4d, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4d, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x47,
	0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x44, 0x4c, 0x43, 0x10, 0x04, 0x22, 0x73, 0x0a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x62, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x55, 0x42, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x42, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x42, 0x5f, 0x44, 0x47, 0x52, 0x5f,
	0x45, 0x52, 0x4f, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x55,
	0x42, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x55, 0x42, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x04, 0x22, 0x77, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x4d, 0x5f,
	0x44, 0x47, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x4e, 0x4d, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x4e, 0x4d, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x4d, 0x5f, 0x44, 0x47, 0x52, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x4d, 0x5f,
	0x44, 0x47, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0x81, 0x08, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x44, 0x4f, 0x53,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4c, 0x49,
	0x4e, 0x55, 0x58, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x44, 0x56, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x42, 0x4c, 0x55, 0x5f, 0x52, 0x41, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x46, 0x4d, 0x5f, 0x54,
	0x4f, 0x57, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x46, 0x4d, 0x37, 0x5f, 0x54, 0x4f, 0x57, 0x4e, 0x53, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x46, 0x4d, 0x38, 0x5f, 0x54, 0x4f, 0x57,
	0x4e, 0x53, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x42, 0x4f, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x42, 0x4f, 0x59, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x53, 0x58, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44,
	0x4f, 0x5f, 0x44, 0x53, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x4e, 0x45, 0x53, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x50, 0x38, 0x38, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x50, 0x39, 0x38, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50, 0x43, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x13,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50, 0x43, 0x5f, 0x46,
	0x58, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50,
	0x53, 0x50, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x50, 0x53, 0x31, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x50, 0x53, 0x32, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x50, 0x53, 0x33, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x50, 0x53, 0x34, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x50, 0x53, 0x35, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50, 0x53, 0x5f, 0x56, 0x49, 0x54, 0x41, 0x10, 0x1b, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x44, 0x47, 0x52, 0x41, 0x4d, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x53, 0x45, 0x47, 0x41, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x1d, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x53, 0x45, 0x47, 0x41, 0x5f, 0x4d,
	0x45, 0x47, 0x41, 0x43, 0x44, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44,
	0x4f, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4e,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x4f, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x20,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4e, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x44, 0x4f, 0x5f, 0x57, 0x49, 0x49, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x4f, 0x5f, 0x57,
	0x49, 0x49, 0x5f, 0x55, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x4f, 0x5f, 0x33, 0x44, 0x53, 0x10, 0x23,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x58, 0x36, 0x38, 0x30,
	0x30, 0x30, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x58, 0x42, 0x4f, 0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x58, 0x42, 0x4f, 0x58, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x26,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x58, 0x42, 0x4f, 0x58,
	0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x58, 0x42,
	0x4f, 0x58, 0x5f, 0x58, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x49, 0x54, 0x45, 0x10, 0x29, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x56, 0x4e, 0x5f, 0x44, 0x53, 0x10, 0x2a, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50, 0x5f,
	0x58, 0x31, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x33, 0x44, 0x4f, 0x10,
	0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x2e, 0x22, 0x83,
	0x0e, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x41,
	0x4e, 0x47, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x48, 0x55, 0x41, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x48, 0x57,
	0x41, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f,
	0x45, 0x4c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x57, 0x45, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x49, 0x43, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x59, 0x4f, 0x4e, 0x5f, 0x4b, 0x4f, 0x4d, 0x41, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x08, 0x22, 0xe4, 0x0b, 0x0a, 0x0a, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x05, 0x0a, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0x52,
	0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45,
	0x10, 0x02, 0x22, 0xf4, 0x04, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52,
	0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0xbd, 0x05, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0xc6, 0x04, 0x0a, 0x08, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x73, 0x22, 0xc6, 0x0d, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x13,
	0x0a, 0x0f, 0x56, 0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56,
	0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x53, 0x4e, 0x5f, 0x4c, 0x4e, 0x47, 0x5f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x05, 0x22, 0xcb, 0x08, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0a,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73,
	0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x57,
	0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x50, 0x49, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4c, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4c, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x4f, 0x44, 0x59, 0x10, 0x10, 0x22, 0xf2, 0x01,
	0x0a, 0x04, 0x43, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x51, 0x0a, 0x0c, 0x43, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x53,
	0x10, 0x03, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x20, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x54, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x03, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc,
	0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e,
	0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x4e, 0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4e, 0x44, 0x5f, 0x54, 0x52,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x06, 0x22, 0xc1, 0x01,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b,
	0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2a, 0x2b, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xcb,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x53,
	0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x2a, 0x55, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4e, 0x54, 0x5f, 0x50, 0x42, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4e,
	0x54, 0x5f, 0x50, 0x42, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4e, 0x54, 0x5f, 0x50, 0x42, 0x4c, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0xd2, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x13,
	0x0a, 0x0f, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x50, 0x48, 0x52, 0x4f, 0x44, 0x49,
	0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x45, 0x58, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x2a, 0x83, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x41, 0x42, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x41, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x42, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x41, 0x42, 0x5f, 0x50,
	0x4c, 0x55, 0x53, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x5f, 0x4f, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x55,
	0x53, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x41,
	0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x0c, 0x2a, 0x49,
	0x0a, 0x0a, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4e, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4e, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4e, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x43,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4e,
	0x54, 0x5f, 0x46, 0x43, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x43, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x43, 0x53, 0x5f, 0x41, 0x4e, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x43, 0x53, 0x5f,
	0x4d, 0x41, 0x4e, 0x47, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4e, 0x54, 0x5f, 0x46,
	0x43, 0x53, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x4f, 0x56, 0x45, 0x4c, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4e, 0x54, 0x5f, 0x46, 0x43, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x05, 0x2a, 0xec, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x4b,
	0x5f, 0x56, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x4b, 0x5f, 0x56,
	0x52, 0x53, 0x5f, 0x50, 0x49, 0x41, 0x4e, 0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x4b, 0x5f, 0x56, 0x52, 0x53, 0x5f, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x47, 0x4c,
	0x49, 0x53, 0x48, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53,
	0x5f, 0x54, 0x56, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53,
	0x5f, 0x4d, 0x49, 0x58, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x58, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x4b,
	0x5f, 0x56, 0x52, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x52, 0x4b, 0x5f, 0x56, 0x52, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x0a, 0x2a, 0x87, 0x01, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4e, 0x47,
	0x5f, 0x43, 0x4d, 0x50, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x4e, 0x47, 0x5f, 0x43, 0x4d, 0x50, 0x4c, 0x5f, 0x42, 0x45, 0x47, 0x49,
	0x4e, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4e, 0x47, 0x5f, 0x43, 0x4d,
	0x50, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4e, 0x47, 0x5f, 0x43, 0x4d, 0x50, 0x4c, 0x5f, 0x41, 0x44, 0x56,
	0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4e, 0x47, 0x5f, 0x43,
	0x4d, 0x50, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x88, 0x01, 0x0a,
	0x0d, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x13,
	0x0a, 0x0f, 0x57, 0x52, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x52, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x52, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x46, 0x55, 0x52, 0x49, 0x47, 0x41, 0x4e, 0x41, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x52, 0x54, 0x5f, 0x53, 0x59,
	0x53, 0x5f, 0x46, 0x55, 0x52, 0x49, 0x47, 0x41, 0x4e, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x5f,
	0x4b, 0x41, 0x4e, 0x4a, 0x49, 0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x47, 0x4e, 0x5f, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x47, 0x4e, 0x5f, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x47, 0x4e, 0x5f, 0x52, 0x53, 0x54, 0x5f, 0x49,
	0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x54, 0x52, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x52, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x5f,
	0x4e, 0x43, 0x31, 0x37, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x52, 0x5f, 0x52, 0x54,
	0x4e, 0x5f, 0x55, 0x53, 0x41, 0x5f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x52,
	0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x5f, 0x50, 0x47, 0x31, 0x33, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x52, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x55, 0x53, 0x41, 0x5f, 0x50,
	0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x52, 0x5f, 0x52, 0x54, 0x4e, 0x5f, 0x55,
	0x53, 0x41, 0x5f, 0x47, 0x10, 0x05, 0x32, 0xa9, 0x0a, 0x0a, 0x09, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa5,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xb5,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0xca, 0x41, 0x17, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x42, 0x84, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0xea, 0x02, 0x1e, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x3a,
	0x3a, 0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescOnce sync.Once
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData = file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc
)

func file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP() []byte {
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescOnce.Do(func() {
		file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData)
	})
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData
}

var file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes = []interface{}{
	(Boolean)(0),                             // 0: animeshon.knowledge.v1alpha1.Boolean
	(ContentStatus)(0),                       // 1: animeshon.knowledge.v1alpha1.ContentStatus
	(ContentPublishingType)(0),               // 2: animeshon.knowledge.v1alpha1.ContentPublishingType
	(Gender)(0),                              // 3: animeshon.knowledge.v1alpha1.Gender
	(BloodType)(0),                           // 4: animeshon.knowledge.v1alpha1.BloodType
	(Censorship)(0),                          // 5: animeshon.knowledge.v1alpha1.Censorship
	(ContentFocus)(0),                        // 6: animeshon.knowledge.v1alpha1.ContentFocus
	(TrackVersion)(0),                        // 7: animeshon.knowledge.v1alpha1.TrackVersion
	(LanguageComplexity)(0),                  // 8: animeshon.knowledge.v1alpha1.LanguageComplexity
	(WritingSystem)(0),                       // 9: animeshon.knowledge.v1alpha1.WritingSystem
	(RegionRestriction)(0),                   // 10: animeshon.knowledge.v1alpha1.RegionRestriction
	(MaturityRating)(0),                      // 11: animeshon.knowledge.v1alpha1.MaturityRating
	(Contribution_State)(0),                  // 12: animeshon.knowledge.v1alpha1.Contribution.State
	(Anime_AnimeType)(0),                     // 13: animeshon.knowledge.v1alpha1.Anime.AnimeType
	(Chapter_ChapterType)(0),                 // 14: animeshon.knowledge.v1alpha1.Chapter.ChapterType
	(Character_AgeRange)(0),                  // 15: animeshon.knowledge.v1alpha1.Character.AgeRange
	(Character_CupSize)(0),                   // 16: animeshon.knowledge.v1alpha1.Character.CupSize
	(Episode_EpisodeType)(0),                 // 17: animeshon.knowledge.v1alpha1.Episode.EpisodeType
	(GameRelease_GameReleaseType)(0),         // 18: animeshon.knowledge.v1alpha1.GameRelease.GameReleaseType
	(GameRelease_GameDubDegree)(0),           // 19: animeshon.knowledge.v1alpha1.GameRelease.GameDubDegree
	(GameRelease_GameAnimationDegree)(0),     // 20: animeshon.knowledge.v1alpha1.GameRelease.GameAnimationDegree
	(GameRelease_Platform)(0),                // 21: animeshon.knowledge.v1alpha1.GameRelease.Platform
	(GraphicNovel_GraphicNovelType)(0),       // 22: animeshon.knowledge.v1alpha1.GraphicNovel.GraphicNovelType
	(Organization_OrganizationType)(0),       // 23: animeshon.knowledge.v1alpha1.Organization.OrganizationType
	(VisualNovel_VisualNovelLength)(0),       // 24: animeshon.knowledge.v1alpha1.VisualNovel.VisualNovelLength
	(ContentRelation_ContentRelationType)(0), // 25: animeshon.knowledge.v1alpha1.ContentRelation.ContentRelationType
	(Cast_CastRelation)(0),                   // 26: animeshon.knowledge.v1alpha1.Cast.CastRelation
	(Soundtrack_SoundtrackType)(0),           // 27: animeshon.knowledge.v1alpha1.Soundtrack.SoundtrackType
	(*ContributionChanges)(nil),              // 28: animeshon.knowledge.v1alpha1.ContributionChanges
	(*Contribution)(nil),                     // 29: animeshon.knowledge.v1alpha1.Contribution
	(*ReviewContributionRequest)(nil),        // 30: animeshon.knowledge.v1alpha1.ReviewContributionRequest
	(*CreateContributionRequest)(nil),        // 31: animeshon.knowledge.v1alpha1.CreateContributionRequest
	(*ListContributionsRequest)(nil),         // 32: animeshon.knowledge.v1alpha1.ListContributionsRequest
	(*ListContributionsResponse)(nil),        // 33: animeshon.knowledge.v1alpha1.ListContributionsResponse
	(*GetContributionChangesRequest)(nil),    // 34: animeshon.knowledge.v1alpha1.GetContributionChangesRequest
	(*GetContributionRequest)(nil),           // 35: animeshon.knowledge.v1alpha1.GetContributionRequest
	(*ApproveContributionRequest)(nil),       // 36: animeshon.knowledge.v1alpha1.ApproveContributionRequest
	(*RejectContributionRequest)(nil),        // 37: animeshon.knowledge.v1alpha1.RejectContributionRequest
	(*EntryEntity)(nil),                      // 38: animeshon.knowledge.v1alpha1.EntryEntity
	(*Anime)(nil),                            // 39: animeshon.knowledge.v1alpha1.Anime
	(*Canonical)(nil),                        // 40: animeshon.knowledge.v1alpha1.Canonical
	(*Chapter)(nil),                          // 41: animeshon.knowledge.v1alpha1.Chapter
	(*Character)(nil),                        // 42: animeshon.knowledge.v1alpha1.Character
	(*Episode)(nil),                          // 43: animeshon.knowledge.v1alpha1.Episode
	(*GameRelease)(nil),                      // 44: animeshon.knowledge.v1alpha1.GameRelease
	(*GraphicNovel)(nil),                     // 45: animeshon.knowledge.v1alpha1.GraphicNovel
	(*LightNovel)(nil),                       // 46: animeshon.knowledge.v1alpha1.LightNovel
	(*Organization)(nil),                     // 47: animeshon.knowledge.v1alpha1.Organization
	(*Person)(nil),                           // 48: animeshon.knowledge.v1alpha1.Person
	(*Track)(nil),                            // 49: animeshon.knowledge.v1alpha1.Track
	(*Universe)(nil),                         // 50: animeshon.knowledge.v1alpha1.Universe
	(*VisualNovel)(nil),                      // 51: animeshon.knowledge.v1alpha1.VisualNovel
	(*Volume)(nil),                           // 52: animeshon.knowledge.v1alpha1.Volume
	(*Text)(nil),                             // 53: animeshon.knowledge.v1alpha1.Text
	(*Running)(nil),                          // 54: animeshon.knowledge.v1alpha1.Running
	(*Edge)(nil),                             // 55: animeshon.knowledge.v1alpha1.Edge
	(*ContentRelation)(nil),                  // 56: animeshon.knowledge.v1alpha1.ContentRelation
	(*Cast)(nil),                             // 57: animeshon.knowledge.v1alpha1.Cast
	(*Collaboration)(nil),                    // 58: animeshon.knowledge.v1alpha1.Collaboration
	(*VoiceActing)(nil),                      // 59: animeshon.knowledge.v1alpha1.VoiceActing
	(*Website)(nil),                          // 60: animeshon.knowledge.v1alpha1.Website
	(*Markeplace)(nil),                       // 61: animeshon.knowledge.v1alpha1.Markeplace
	(*Soundtrack)(nil),                       // 62: animeshon.knowledge.v1alpha1.Soundtrack
	(*TrackListing)(nil),                     // 63: animeshon.knowledge.v1alpha1.TrackListing
	(*timestamppb.Timestamp)(nil),            // 64: google.protobuf.Timestamp
}
var file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs = []int32{
	38,  // 0: animeshon.knowledge.v1alpha1.ContributionChanges.additions:type_name -> animeshon.knowledge.v1alpha1.EntryEntity
	38,  // 1: animeshon.knowledge.v1alpha1.ContributionChanges.deletions:type_name -> animeshon.knowledge.v1alpha1.EntryEntity
	12,  // 2: animeshon.knowledge.v1alpha1.Contribution.state:type_name -> animeshon.knowledge.v1alpha1.Contribution.State
	64,  // 3: animeshon.knowledge.v1alpha1.Contribution.create_time:type_name -> google.protobuf.Timestamp
	64,  // 4: animeshon.knowledge.v1alpha1.Contribution.update_time:type_name -> google.protobuf.Timestamp
	64,  // 5: animeshon.knowledge.v1alpha1.Contribution.review_time:type_name -> google.protobuf.Timestamp
	28,  // 6: animeshon.knowledge.v1alpha1.ReviewContributionRequest.changes:type_name -> animeshon.knowledge.v1alpha1.ContributionChanges
	29,  // 7: animeshon.knowledge.v1alpha1.CreateContributionRequest.contribution:type_name -> animeshon.knowledge.v1alpha1.Contribution
	28,  // 8: animeshon.knowledge.v1alpha1.CreateContributionRequest.changes:type_name -> animeshon.knowledge.v1alpha1.ContributionChanges
	29,  // 9: animeshon.knowledge.v1alpha1.ListContributionsResponse.contributions:type_name -> animeshon.knowledge.v1alpha1.Contribution
	39,  // 10: animeshon.knowledge.v1alpha1.EntryEntity.anime:type_name -> animeshon.knowledge.v1alpha1.Anime
	40,  // 11: animeshon.knowledge.v1alpha1.EntryEntity.canonical:type_name -> animeshon.knowledge.v1alpha1.Canonical
	41,  // 12: animeshon.knowledge.v1alpha1.EntryEntity.chapter:type_name -> animeshon.knowledge.v1alpha1.Chapter
	42,  // 13: animeshon.knowledge.v1alpha1.EntryEntity.character:type_name -> animeshon.knowledge.v1alpha1.Character
	43,  // 14: animeshon.knowledge.v1alpha1.EntryEntity.episode:type_name -> animeshon.knowledge.v1alpha1.Episode
	44,  // 15: animeshon.knowledge.v1alpha1.EntryEntity.game_release:type_name -> animeshon.knowledge.v1alpha1.GameRelease
	45,  // 16: animeshon.knowledge.v1alpha1.EntryEntity.graphic_novel:type_name -> animeshon.knowledge.v1alpha1.GraphicNovel
	46,  // 17: animeshon.knowledge.v1alpha1.EntryEntity.light_novel:type_name -> animeshon.knowledge.v1alpha1.LightNovel
	47,  // 18: animeshon.knowledge.v1alpha1.EntryEntity.organization:type_name -> animeshon.knowledge.v1alpha1.Organization
	48,  // 19: animeshon.knowledge.v1alpha1.EntryEntity.person:type_name -> animeshon.knowledge.v1alpha1.Person
	49,  // 20: animeshon.knowledge.v1alpha1.EntryEntity.track:type_name -> animeshon.knowledge.v1alpha1.Track
	50,  // 21: animeshon.knowledge.v1alpha1.EntryEntity.universe:type_name -> animeshon.knowledge.v1alpha1.Universe
	52,  // 22: animeshon.knowledge.v1alpha1.EntryEntity.volume:type_name -> animeshon.knowledge.v1alpha1.Volume
	13,  // 23: animeshon.knowledge.v1alpha1.Anime.type:type_name -> animeshon.knowledge.v1alpha1.Anime.AnimeType
	55,  // 24: animeshon.knowledge.v1alpha1.Anime.episodes:type_name -> animeshon.knowledge.v1alpha1.Edge
	53,  // 25: animeshon.knowledge.v1alpha1.Anime.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 26: animeshon.knowledge.v1alpha1.Anime.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 27: animeshon.knowledge.v1alpha1.Anime.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 28: animeshon.knowledge.v1alpha1.Anime.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 29: animeshon.knowledge.v1alpha1.Anime.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	1,   // 30: animeshon.knowledge.v1alpha1.Anime.status:type_name -> animeshon.knowledge.v1alpha1.ContentStatus
	56,  // 31: animeshon.knowledge.v1alpha1.Anime.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	2,   // 32: animeshon.knowledge.v1alpha1.Anime.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	0,   // 33: animeshon.knowledge.v1alpha1.Anime.original:type_name -> animeshon.knowledge.v1alpha1.Boolean
	54,  // 34: animeshon.knowledge.v1alpha1.Anime.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	64,  // 35: animeshon.knowledge.v1alpha1.Anime.release_date:type_name -> google.protobuf.Timestamp
	57,  // 36: animeshon.knowledge.v1alpha1.Anime.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 37: animeshon.knowledge.v1alpha1.Anime.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 38: animeshon.knowledge.v1alpha1.Anime.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 39: animeshon.knowledge.v1alpha1.Anime.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	62,  // 40: animeshon.knowledge.v1alpha1.Anime.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	59,  // 41: animeshon.knowledge.v1alpha1.Anime.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	11,  // 42: animeshon.knowledge.v1alpha1.Anime.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 43: animeshon.knowledge.v1alpha1.Anime.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	53,  // 44: animeshon.knowledge.v1alpha1.Canonical.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 45: animeshon.knowledge.v1alpha1.Canonical.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 46: animeshon.knowledge.v1alpha1.Canonical.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 47: animeshon.knowledge.v1alpha1.Canonical.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 48: animeshon.knowledge.v1alpha1.Canonical.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	55,  // 49: animeshon.knowledge.v1alpha1.Canonical.contents:type_name -> animeshon.knowledge.v1alpha1.Edge
	14,  // 50: animeshon.knowledge.v1alpha1.Chapter.type:type_name -> animeshon.knowledge.v1alpha1.Chapter.ChapterType
	55,  // 51: animeshon.knowledge.v1alpha1.Chapter.episodes:type_name -> animeshon.knowledge.v1alpha1.Edge
	64,  // 52: animeshon.knowledge.v1alpha1.Chapter.release_date:type_name -> google.protobuf.Timestamp
	53,  // 53: animeshon.knowledge.v1alpha1.Chapter.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 54: animeshon.knowledge.v1alpha1.Chapter.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 55: animeshon.knowledge.v1alpha1.Chapter.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 56: animeshon.knowledge.v1alpha1.Chapter.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 57: animeshon.knowledge.v1alpha1.Chapter.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	57,  // 58: animeshon.knowledge.v1alpha1.Chapter.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 59: animeshon.knowledge.v1alpha1.Chapter.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 60: animeshon.knowledge.v1alpha1.Chapter.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	11,  // 61: animeshon.knowledge.v1alpha1.Chapter.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 62: animeshon.knowledge.v1alpha1.Chapter.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	53,  // 63: animeshon.knowledge.v1alpha1.Character.hometown:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 64: animeshon.knowledge.v1alpha1.Character.birthplace:type_name -> animeshon.knowledge.v1alpha1.Text
	3,   // 65: animeshon.knowledge.v1alpha1.Character.genre:type_name -> animeshon.knowledge.v1alpha1.Gender
	4,   // 66: animeshon.knowledge.v1alpha1.Character.blood_type:type_name -> animeshon.knowledge.v1alpha1.BloodType
	16,  // 67: animeshon.knowledge.v1alpha1.Character.cup_size:type_name -> animeshon.knowledge.v1alpha1.Character.CupSize
	15,  // 68: animeshon.knowledge.v1alpha1.Character.age_range:type_name -> animeshon.knowledge.v1alpha1.Character.AgeRange
	53,  // 69: animeshon.knowledge.v1alpha1.Character.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 70: animeshon.knowledge.v1alpha1.Character.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 71: animeshon.knowledge.v1alpha1.Character.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 72: animeshon.knowledge.v1alpha1.Character.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 73: animeshon.knowledge.v1alpha1.Character.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	55,  // 74: animeshon.knowledge.v1alpha1.Character.guise_of:type_name -> animeshon.knowledge.v1alpha1.Edge
	17,  // 75: animeshon.knowledge.v1alpha1.Episode.type:type_name -> animeshon.knowledge.v1alpha1.Episode.EpisodeType
	64,  // 76: animeshon.knowledge.v1alpha1.Episode.release_date:type_name -> google.protobuf.Timestamp
	53,  // 77: animeshon.knowledge.v1alpha1.Episode.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 78: animeshon.knowledge.v1alpha1.Episode.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 79: animeshon.knowledge.v1alpha1.Episode.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 80: animeshon.knowledge.v1alpha1.Episode.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 81: animeshon.knowledge.v1alpha1.Episode.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	57,  // 82: animeshon.knowledge.v1alpha1.Episode.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 83: animeshon.knowledge.v1alpha1.Episode.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	62,  // 84: animeshon.knowledge.v1alpha1.Episode.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	59,  // 85: animeshon.knowledge.v1alpha1.Episode.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	11,  // 86: animeshon.knowledge.v1alpha1.Episode.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 87: animeshon.knowledge.v1alpha1.Episode.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	64,  // 88: animeshon.knowledge.v1alpha1.GameRelease.release_date:type_name -> google.protobuf.Timestamp
	5,   // 89: animeshon.knowledge.v1alpha1.GameRelease.censorship:type_name -> animeshon.knowledge.v1alpha1.Censorship
	2,   // 90: animeshon.knowledge.v1alpha1.GameRelease.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	18,  // 91: animeshon.knowledge.v1alpha1.GameRelease.type:type_name -> animeshon.knowledge.v1alpha1.GameRelease.GameReleaseType
	0,   // 92: animeshon.knowledge.v1alpha1.GameRelease.IsPatch:type_name -> animeshon.knowledge.v1alpha1.Boolean
	0,   // 93: animeshon.knowledge.v1alpha1.GameRelease.IsFree:type_name -> animeshon.knowledge.v1alpha1.Boolean
	19,  // 94: animeshon.knowledge.v1alpha1.GameRelease.dub_degree:type_name -> animeshon.knowledge.v1alpha1.GameRelease.GameDubDegree
	20,  // 95: animeshon.knowledge.v1alpha1.GameRelease.story_animation_degree:type_name -> animeshon.knowledge.v1alpha1.GameRelease.GameAnimationDegree
	20,  // 96: animeshon.knowledge.v1alpha1.GameRelease.ero_animation_degree:type_name -> animeshon.knowledge.v1alpha1.GameRelease.GameAnimationDegree
	21,  // 97: animeshon.knowledge.v1alpha1.GameRelease.platforms:type_name -> animeshon.knowledge.v1alpha1.GameRelease.Platform
	53,  // 98: animeshon.knowledge.v1alpha1.GameRelease.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 99: animeshon.knowledge.v1alpha1.GameRelease.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 100: animeshon.knowledge.v1alpha1.GameRelease.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 101: animeshon.knowledge.v1alpha1.GameRelease.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 102: animeshon.knowledge.v1alpha1.GameRelease.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	57,  // 103: animeshon.knowledge.v1alpha1.GameRelease.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 104: animeshon.knowledge.v1alpha1.GameRelease.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	62,  // 105: animeshon.knowledge.v1alpha1.GameRelease.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	59,  // 106: animeshon.knowledge.v1alpha1.GameRelease.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	11,  // 107: animeshon.knowledge.v1alpha1.GameRelease.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 108: animeshon.knowledge.v1alpha1.GameRelease.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	22,  // 109: animeshon.knowledge.v1alpha1.GraphicNovel.type:type_name -> animeshon.knowledge.v1alpha1.GraphicNovel.GraphicNovelType
	55,  // 110: animeshon.knowledge.v1alpha1.GraphicNovel.chapters:type_name -> animeshon.knowledge.v1alpha1.Edge
	53,  // 111: animeshon.knowledge.v1alpha1.GraphicNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 112: animeshon.knowledge.v1alpha1.GraphicNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 113: animeshon.knowledge.v1alpha1.GraphicNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 114: animeshon.knowledge.v1alpha1.GraphicNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 115: animeshon.knowledge.v1alpha1.GraphicNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	1,   // 116: animeshon.knowledge.v1alpha1.GraphicNovel.status:type_name -> animeshon.knowledge.v1alpha1.ContentStatus
	56,  // 117: animeshon.knowledge.v1alpha1.GraphicNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	2,   // 118: animeshon.knowledge.v1alpha1.GraphicNovel.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	0,   // 119: animeshon.knowledge.v1alpha1.GraphicNovel.original:type_name -> animeshon.knowledge.v1alpha1.Boolean
	54,  // 120: animeshon.knowledge.v1alpha1.GraphicNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	64,  // 121: animeshon.knowledge.v1alpha1.GraphicNovel.release_date:type_name -> google.protobuf.Timestamp
	57,  // 122: animeshon.knowledge.v1alpha1.GraphicNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 123: animeshon.knowledge.v1alpha1.GraphicNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 124: animeshon.knowledge.v1alpha1.GraphicNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 125: animeshon.knowledge.v1alpha1.GraphicNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	11,  // 126: animeshon.knowledge.v1alpha1.GraphicNovel.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 127: animeshon.knowledge.v1alpha1.GraphicNovel.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	55,  // 128: animeshon.knowledge.v1alpha1.GraphicNovel.volumes:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 129: animeshon.knowledge.v1alpha1.LightNovel.chapters:type_name -> animeshon.knowledge.v1alpha1.Edge
	53,  // 130: animeshon.knowledge.v1alpha1.LightNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 131: animeshon.knowledge.v1alpha1.LightNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 132: animeshon.knowledge.v1alpha1.LightNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 133: animeshon.knowledge.v1alpha1.LightNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 134: animeshon.knowledge.v1alpha1.LightNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	1,   // 135: animeshon.knowledge.v1alpha1.LightNovel.status:type_name -> animeshon.knowledge.v1alpha1.ContentStatus
	56,  // 136: animeshon.knowledge.v1alpha1.LightNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	2,   // 137: animeshon.knowledge.v1alpha1.LightNovel.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	0,   // 138: animeshon.knowledge.v1alpha1.LightNovel.original:type_name -> animeshon.knowledge.v1alpha1.Boolean
	54,  // 139: animeshon.knowledge.v1alpha1.LightNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	64,  // 140: animeshon.knowledge.v1alpha1.LightNovel.release_date:type_name -> google.protobuf.Timestamp
	57,  // 141: animeshon.knowledge.v1alpha1.LightNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 142: animeshon.knowledge.v1alpha1.LightNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 143: animeshon.knowledge.v1alpha1.LightNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 144: animeshon.knowledge.v1alpha1.LightNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	11,  // 145: animeshon.knowledge.v1alpha1.LightNovel.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 146: animeshon.knowledge.v1alpha1.LightNovel.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	55,  // 147: animeshon.knowledge.v1alpha1.LightNovel.volumes:type_name -> animeshon.knowledge.v1alpha1.Edge
	23,  // 148: animeshon.knowledge.v1alpha1.Organization.type:type_name -> animeshon.knowledge.v1alpha1.Organization.OrganizationType
	64,  // 149: animeshon.knowledge.v1alpha1.Organization.foundation_date:type_name -> google.protobuf.Timestamp
	6,   // 150: animeshon.knowledge.v1alpha1.Organization.focus:type_name -> animeshon.knowledge.v1alpha1.ContentFocus
	53,  // 151: animeshon.knowledge.v1alpha1.Organization.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 152: animeshon.knowledge.v1alpha1.Organization.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 153: animeshon.knowledge.v1alpha1.Organization.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 154: animeshon.knowledge.v1alpha1.Organization.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	64,  // 155: animeshon.knowledge.v1alpha1.Person.birthday:type_name -> google.protobuf.Timestamp
	3,   // 156: animeshon.knowledge.v1alpha1.Person.gender:type_name -> animeshon.knowledge.v1alpha1.Gender
	4,   // 157: animeshon.knowledge.v1alpha1.Person.blood_type:type_name -> animeshon.knowledge.v1alpha1.BloodType
	53,  // 158: animeshon.knowledge.v1alpha1.Person.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 159: animeshon.knowledge.v1alpha1.Person.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 160: animeshon.knowledge.v1alpha1.Person.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 161: animeshon.knowledge.v1alpha1.Person.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	64,  // 162: animeshon.knowledge.v1alpha1.Track.release_date:type_name -> google.protobuf.Timestamp
	53,  // 163: animeshon.knowledge.v1alpha1.Track.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 164: animeshon.knowledge.v1alpha1.Track.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 165: animeshon.knowledge.v1alpha1.Track.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 166: animeshon.knowledge.v1alpha1.Track.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 167: animeshon.knowledge.v1alpha1.Track.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	58,  // 168: animeshon.knowledge.v1alpha1.Track.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 169: animeshon.knowledge.v1alpha1.Track.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 170: animeshon.knowledge.v1alpha1.Track.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	53,  // 171: animeshon.knowledge.v1alpha1.Universe.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 172: animeshon.knowledge.v1alpha1.Universe.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 173: animeshon.knowledge.v1alpha1.Universe.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 174: animeshon.knowledge.v1alpha1.Universe.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 175: animeshon.knowledge.v1alpha1.Universe.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	55,  // 176: animeshon.knowledge.v1alpha1.Universe.contents:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 177: animeshon.knowledge.v1alpha1.Universe.canonicals:type_name -> animeshon.knowledge.v1alpha1.Edge
	24,  // 178: animeshon.knowledge.v1alpha1.VisualNovel.length:type_name -> animeshon.knowledge.v1alpha1.VisualNovel.VisualNovelLength
	53,  // 179: animeshon.knowledge.v1alpha1.VisualNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 180: animeshon.knowledge.v1alpha1.VisualNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 181: animeshon.knowledge.v1alpha1.VisualNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 182: animeshon.knowledge.v1alpha1.VisualNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 183: animeshon.knowledge.v1alpha1.VisualNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	1,   // 184: animeshon.knowledge.v1alpha1.VisualNovel.status:type_name -> animeshon.knowledge.v1alpha1.ContentStatus
	56,  // 185: animeshon.knowledge.v1alpha1.VisualNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	2,   // 186: animeshon.knowledge.v1alpha1.VisualNovel.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	0,   // 187: animeshon.knowledge.v1alpha1.VisualNovel.original:type_name -> animeshon.knowledge.v1alpha1.Boolean
	54,  // 188: animeshon.knowledge.v1alpha1.VisualNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	64,  // 189: animeshon.knowledge.v1alpha1.VisualNovel.release_date:type_name -> google.protobuf.Timestamp
	57,  // 190: animeshon.knowledge.v1alpha1.VisualNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 191: animeshon.knowledge.v1alpha1.VisualNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	55,  // 192: animeshon.knowledge.v1alpha1.VisualNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 193: animeshon.knowledge.v1alpha1.VisualNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	62,  // 194: animeshon.knowledge.v1alpha1.VisualNovel.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	59,  // 195: animeshon.knowledge.v1alpha1.VisualNovel.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	11,  // 196: animeshon.knowledge.v1alpha1.VisualNovel.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 197: animeshon.knowledge.v1alpha1.VisualNovel.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	64,  // 198: animeshon.knowledge.v1alpha1.Volume.release_date:type_name -> google.protobuf.Timestamp
	5,   // 199: animeshon.knowledge.v1alpha1.Volume.censorship:type_name -> animeshon.knowledge.v1alpha1.Censorship
	2,   // 200: animeshon.knowledge.v1alpha1.Volume.publishing_type:type_name -> animeshon.knowledge.v1alpha1.ContentPublishingType
	53,  // 201: animeshon.knowledge.v1alpha1.Volume.names:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 202: animeshon.knowledge.v1alpha1.Volume.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	53,  // 203: animeshon.knowledge.v1alpha1.Volume.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	60,  // 204: animeshon.knowledge.v1alpha1.Volume.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	61,  // 205: animeshon.knowledge.v1alpha1.Volume.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Markeplace
	57,  // 206: animeshon.knowledge.v1alpha1.Volume.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	58,  // 207: animeshon.knowledge.v1alpha1.Volume.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	11,  // 208: animeshon.knowledge.v1alpha1.Volume.maturity_ratings:type_name -> animeshon.knowledge.v1alpha1.MaturityRating
	10,  // 209: animeshon.knowledge.v1alpha1.Volume.region_restrictions:type_name -> animeshon.knowledge.v1alpha1.RegionRestriction
	64,  // 210: animeshon.knowledge.v1alpha1.Running.start_time:type_name -> google.protobuf.Timestamp
	64,  // 211: animeshon.knowledge.v1alpha1.Running.end_time:type_name -> google.protobuf.Timestamp
	55,  // 212: animeshon.knowledge.v1alpha1.ContentRelation.related:type_name -> animeshon.knowledge.v1alpha1.Edge
	25,  // 213: animeshon.knowledge.v1alpha1.ContentRelation.relation:type_name -> animeshon.knowledge.v1alpha1.ContentRelation.ContentRelationType
	55,  // 214: animeshon.knowledge.v1alpha1.Cast.character:type_name -> animeshon.knowledge.v1alpha1.Edge
	26,  // 215: animeshon.knowledge.v1alpha1.Cast.relation:type_name -> animeshon.knowledge.v1alpha1.Cast.CastRelation
	55,  // 216: animeshon.knowledge.v1alpha1.Collaboration.collaborator:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 217: animeshon.knowledge.v1alpha1.VoiceActing.voiced:type_name -> animeshon.knowledge.v1alpha1.Edge
	55,  // 218: animeshon.knowledge.v1alpha1.VoiceActing.actor:type_name -> animeshon.knowledge.v1alpha1.Edge
	0,   // 219: animeshon.knowledge.v1alpha1.VoiceActing.primary:type_name -> animeshon.knowledge.v1alpha1.Boolean
	55,  // 220: animeshon.knowledge.v1alpha1.Soundtrack.track:type_name -> animeshon.knowledge.v1alpha1.Edge
	27,  // 221: animeshon.knowledge.v1alpha1.Soundtrack.type:type_name -> animeshon.knowledge.v1alpha1.Soundtrack.SoundtrackType
	7,   // 222: animeshon.knowledge.v1alpha1.Soundtrack.version:type_name -> animeshon.knowledge.v1alpha1.TrackVersion
	55,  // 223: animeshon.knowledge.v1alpha1.TrackListing.musicRelease:type_name -> animeshon.knowledge.v1alpha1.Edge
	7,   // 224: animeshon.knowledge.v1alpha1.TrackListing.version:type_name -> animeshon.knowledge.v1alpha1.TrackVersion
	31,  // 225: animeshon.knowledge.v1alpha1.Knowledge.CreateContribution:input_type -> animeshon.knowledge.v1alpha1.CreateContributionRequest
	32,  // 226: animeshon.knowledge.v1alpha1.Knowledge.ListContributions:input_type -> animeshon.knowledge.v1alpha1.ListContributionsRequest
	35,  // 227: animeshon.knowledge.v1alpha1.Knowledge.GetContribution:input_type -> animeshon.knowledge.v1alpha1.GetContributionRequest
	34,  // 228: animeshon.knowledge.v1alpha1.Knowledge.GetContributionChanges:input_type -> animeshon.knowledge.v1alpha1.GetContributionChangesRequest
	36,  // 229: animeshon.knowledge.v1alpha1.Knowledge.ApproveContribution:input_type -> animeshon.knowledge.v1alpha1.ApproveContributionRequest
	30,  // 230: animeshon.knowledge.v1alpha1.Knowledge.ReviewContribution:input_type -> animeshon.knowledge.v1alpha1.ReviewContributionRequest
	37,  // 231: animeshon.knowledge.v1alpha1.Knowledge.RejectContribution:input_type -> animeshon.knowledge.v1alpha1.RejectContributionRequest
	29,  // 232: animeshon.knowledge.v1alpha1.Knowledge.CreateContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	33,  // 233: animeshon.knowledge.v1alpha1.Knowledge.ListContributions:output_type -> animeshon.knowledge.v1alpha1.ListContributionsResponse
	29,  // 234: animeshon.knowledge.v1alpha1.Knowledge.GetContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	28,  // 235: animeshon.knowledge.v1alpha1.Knowledge.GetContributionChanges:output_type -> animeshon.knowledge.v1alpha1.ContributionChanges
	29,  // 236: animeshon.knowledge.v1alpha1.Knowledge.ApproveContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	29,  // 237: animeshon.knowledge.v1alpha1.Knowledge.ReviewContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	29,  // 238: animeshon.knowledge.v1alpha1.Knowledge.RejectContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	232, // [232:239] is the sub-list for method output_type
	225, // [225:232] is the sub-list for method input_type
	225, // [225:225] is the sub-list for extension type_name
	225, // [225:225] is the sub-list for extension extendee
	0,   // [0:225] is the sub-list for field type_name
}

func init() { file_animeshon_knowledge_v1alpha1_knowledge_proto_init() }
func file_animeshon_knowledge_v1alpha1_knowledge_proto_init() {
	if File_animeshon_knowledge_v1alpha1_knowledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributionChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContributionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContributionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContributionChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Canonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Universe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisualNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Running); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaboration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceActing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Website); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markeplace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soundtrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*EntryEntity_Anime)(nil),
		(*EntryEntity_Canonical)(nil),
		(*EntryEntity_Chapter)(nil),
		(*EntryEntity_Character)(nil),
		(*EntryEntity_Episode)(nil),
		(*EntryEntity_GameRelease)(nil),
		(*EntryEntity_GraphicNovel)(nil),
		(*EntryEntity_LightNovel)(nil),
		(*EntryEntity_Organization)(nil),
		(*EntryEntity_Person)(nil),
		(*EntryEntity_Track)(nil),
		(*EntryEntity_Universe)(nil),
		(*EntryEntity_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes,
		DependencyIndexes: file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs,
		EnumInfos:         file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes,
		MessageInfos:      file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes,
	}.Build()
	File_animeshon_knowledge_v1alpha1_knowledge_proto = out.File
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc = nil
	file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes = nil
	file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KnowledgeClient is the client API for Knowledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KnowledgeClient interface {
	CreateContribution(ctx context.Context, in *CreateContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ListContributionsResponse, error)
	GetContribution(ctx context.Context, in *GetContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	GetContributionChanges(ctx context.Context, in *GetContributionChangesRequest, opts ...grpc.CallOption) (*ContributionChanges, error)
	ApproveContribution(ctx context.Context, in *ApproveContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	ReviewContribution(ctx context.Context, in *ReviewContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	RejectContribution(ctx context.Context, in *RejectContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
}

type knowledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeClient(cc grpc.ClientConnInterface) KnowledgeClient {
	return &knowledgeClient{cc}
}

func (c *knowledgeClient) CreateContribution(ctx context.Context, in *CreateContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/CreateContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ListContributionsResponse, error) {
	out := new(ListContributionsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ListContributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetContribution(ctx context.Context, in *GetContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/GetContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetContributionChanges(ctx context.Context, in *GetContributionChangesRequest, opts ...grpc.CallOption) (*ContributionChanges, error) {
	out := new(ContributionChanges)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/GetContributionChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ApproveContribution(ctx context.Context, in *ApproveContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ApproveContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ReviewContribution(ctx context.Context, in *ReviewContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ReviewContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) RejectContribution(ctx context.Context, in *RejectContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/RejectContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServer is the server API for Knowledge service.
type KnowledgeServer interface {
	CreateContribution(context.Context, *CreateContributionRequest) (*Contribution, error)
	ListContributions(context.Context, *ListContributionsRequest) (*ListContributionsResponse, error)
	GetContribution(context.Context, *GetContributionRequest) (*Contribution, error)
	GetContributionChanges(context.Context, *GetContributionChangesRequest) (*ContributionChanges, error)
	ApproveContribution(context.Context, *ApproveContributionRequest) (*Contribution, error)
	ReviewContribution(context.Context, *ReviewContributionRequest) (*Contribution, error)
	RejectContribution(context.Context, *RejectContributionRequest) (*Contribution, error)
}

// UnimplementedKnowledgeServer can be embedded to have forward compatible implementations.
type UnimplementedKnowledgeServer struct {
}

func (*UnimplementedKnowledgeServer) CreateContribution(context.Context, *CreateContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContribution not implemented")
}
func (*UnimplementedKnowledgeServer) ListContributions(context.Context, *ListContributionsRequest) (*ListContributionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContributions not implemented")
}
func (*UnimplementedKnowledgeServer) GetContribution(context.Context, *GetContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContribution not implemented")
}
func (*UnimplementedKnowledgeServer) GetContributionChanges(context.Context, *GetContributionChangesRequest) (*ContributionChanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributionChanges not implemented")
}
func (*UnimplementedKnowledgeServer) ApproveContribution(context.Context, *ApproveContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveContribution not implemented")
}
func (*UnimplementedKnowledgeServer) ReviewContribution(context.Context, *ReviewContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewContribution not implemented")
}
func (*UnimplementedKnowledgeServer) RejectContribution(context.Context, *RejectContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectContribution not implemented")
}

func RegisterKnowledgeServer(s *grpc.Server, srv KnowledgeServer) {
	s.RegisterService(&_Knowledge_serviceDesc, srv)
}

func _Knowledge_CreateContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).CreateContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/CreateContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).CreateContribution(ctx, req.(*CreateContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ListContributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListContributions(ctx, req.(*ListContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/GetContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetContribution(ctx, req.(*GetContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetContributionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetContributionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/GetContributionChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetContributionChanges(ctx, req.(*GetContributionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ApproveContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ApproveContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ApproveContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ApproveContribution(ctx, req.(*ApproveContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ReviewContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ReviewContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ReviewContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ReviewContribution(ctx, req.(*ReviewContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_RejectContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).RejectContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/RejectContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).RejectContribution(ctx, req.(*RejectContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Knowledge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.knowledge.v1alpha1.Knowledge",
	HandlerType: (*KnowledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContribution",
			Handler:    _Knowledge_CreateContribution_Handler,
		},
		{
			MethodName: "ListContributions",
			Handler:    _Knowledge_ListContributions_Handler,
		},
		{
			MethodName: "GetContribution",
			Handler:    _Knowledge_GetContribution_Handler,
		},
		{
			MethodName: "GetContributionChanges",
			Handler:    _Knowledge_GetContributionChanges_Handler,
		},
		{
			MethodName: "ApproveContribution",
			Handler:    _Knowledge_ApproveContribution_Handler,
		},
		{
			MethodName: "ReviewContribution",
			Handler:    _Knowledge_ReviewContribution_Handler,
		},
		{
			MethodName: "RejectContribution",
			Handler:    _Knowledge_RejectContribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/knowledge/v1alpha1/knowledge.proto",
}
