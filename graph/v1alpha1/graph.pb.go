// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: animeshon/graph/v1alpha1/graph.proto

package graph

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MigrateGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the resource to migrate.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MigrateGraphRequest) Reset() {
	*x = MigrateGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_graph_v1alpha1_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateGraphRequest) ProtoMessage() {}

func (x *MigrateGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_graph_v1alpha1_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateGraphRequest.ProtoReflect.Descriptor instead.
func (*MigrateGraphRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_graph_v1alpha1_graph_proto_rawDescGZIP(), []int{0}
}

func (x *MigrateGraphRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the resource to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteGraphRequest) Reset() {
	*x = DeleteGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_graph_v1alpha1_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGraphRequest) ProtoMessage() {}

func (x *DeleteGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_graph_v1alpha1_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGraphRequest.ProtoReflect.Descriptor instead.
func (*DeleteGraphRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_graph_v1alpha1_graph_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteGraphRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_animeshon_graph_v1alpha1_graph_proto protoreflect.FileDescriptor

var file_animeshon_graph_v1alpha1_graph_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x13, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x88, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x79,
	0x0a, 0x0c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2d,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x16, 0xca, 0x41, 0x13, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42,
	0x74, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50,
	0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x3a, 0x76, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_graph_v1alpha1_graph_proto_rawDescOnce sync.Once
	file_animeshon_graph_v1alpha1_graph_proto_rawDescData = file_animeshon_graph_v1alpha1_graph_proto_rawDesc
)

func file_animeshon_graph_v1alpha1_graph_proto_rawDescGZIP() []byte {
	file_animeshon_graph_v1alpha1_graph_proto_rawDescOnce.Do(func() {
		file_animeshon_graph_v1alpha1_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_graph_v1alpha1_graph_proto_rawDescData)
	})
	return file_animeshon_graph_v1alpha1_graph_proto_rawDescData
}

var file_animeshon_graph_v1alpha1_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_animeshon_graph_v1alpha1_graph_proto_goTypes = []interface{}{
	(*MigrateGraphRequest)(nil), // 0: animeshon.graph.v1alpha1.MigrateGraphRequest
	(*DeleteGraphRequest)(nil),  // 1: animeshon.graph.v1alpha1.DeleteGraphRequest
	(*emptypb.Empty)(nil),       // 2: google.protobuf.Empty
}
var file_animeshon_graph_v1alpha1_graph_proto_depIdxs = []int32{
	0, // 0: animeshon.graph.v1alpha1.Graph.MigrateGraph:input_type -> animeshon.graph.v1alpha1.MigrateGraphRequest
	1, // 1: animeshon.graph.v1alpha1.Graph.DeleteGraph:input_type -> animeshon.graph.v1alpha1.DeleteGraphRequest
	2, // 2: animeshon.graph.v1alpha1.Graph.MigrateGraph:output_type -> google.protobuf.Empty
	2, // 3: animeshon.graph.v1alpha1.Graph.DeleteGraph:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_animeshon_graph_v1alpha1_graph_proto_init() }
func file_animeshon_graph_v1alpha1_graph_proto_init() {
	if File_animeshon_graph_v1alpha1_graph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_graph_v1alpha1_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_graph_v1alpha1_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_graph_v1alpha1_graph_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_graph_v1alpha1_graph_proto_goTypes,
		DependencyIndexes: file_animeshon_graph_v1alpha1_graph_proto_depIdxs,
		MessageInfos:      file_animeshon_graph_v1alpha1_graph_proto_msgTypes,
	}.Build()
	File_animeshon_graph_v1alpha1_graph_proto = out.File
	file_animeshon_graph_v1alpha1_graph_proto_rawDesc = nil
	file_animeshon_graph_v1alpha1_graph_proto_goTypes = nil
	file_animeshon_graph_v1alpha1_graph_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphClient is the client API for Graph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphClient interface {
	MigrateGraph(ctx context.Context, in *MigrateGraphRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGraph(ctx context.Context, in *DeleteGraphRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type graphClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphClient(cc grpc.ClientConnInterface) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) MigrateGraph(ctx context.Context, in *MigrateGraphRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.graph.v1alpha1.Graph/MigrateGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) DeleteGraph(ctx context.Context, in *DeleteGraphRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.graph.v1alpha1.Graph/DeleteGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServer is the server API for Graph service.
type GraphServer interface {
	MigrateGraph(context.Context, *MigrateGraphRequest) (*emptypb.Empty, error)
	DeleteGraph(context.Context, *DeleteGraphRequest) (*emptypb.Empty, error)
}

// UnimplementedGraphServer can be embedded to have forward compatible implementations.
type UnimplementedGraphServer struct {
}

func (*UnimplementedGraphServer) MigrateGraph(context.Context, *MigrateGraphRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateGraph not implemented")
}
func (*UnimplementedGraphServer) DeleteGraph(context.Context, *DeleteGraphRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGraph not implemented")
}

func RegisterGraphServer(s *grpc.Server, srv GraphServer) {
	s.RegisterService(&_Graph_serviceDesc, srv)
}

func _Graph_MigrateGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).MigrateGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.graph.v1alpha1.Graph/MigrateGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).MigrateGraph(ctx, req.(*MigrateGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.graph.v1alpha1.Graph/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).DeleteGraph(ctx, req.(*DeleteGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Graph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.graph.v1alpha1.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MigrateGraph",
			Handler:    _Graph_MigrateGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Graph_DeleteGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/graph/v1alpha1/graph.proto",
}
