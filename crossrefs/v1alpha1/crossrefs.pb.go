// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.0
// source: animeshon/crossrefs/v1alpha1/crossrefs.proto

package crossrefs

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ImportCrossRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of all options for the import
	Opts map[string]bool `protobuf:"bytes,1,rep,name=opts,proto3" json:"opts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ImportCrossRefRequest) Reset() {
	*x = ImportCrossRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCrossRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCrossRefRequest) ProtoMessage() {}

func (x *ImportCrossRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCrossRefRequest.ProtoReflect.Descriptor instead.
func (*ImportCrossRefRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{0}
}

func (x *ImportCrossRefRequest) GetOpts() map[string]bool {
	if x != nil {
		return x.Opts
	}
	return nil
}

type AnalyzeCrossRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tollerance of the match in pct
	Tollerance int32 `protobuf:"varint,1,opt,name=tollerance,proto3" json:"tollerance,omitempty"`
	// Map of all options for the analysis
	Opts map[string]bool `protobuf:"bytes,2,rep,name=opts,proto3" json:"opts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Namespaces to analyze
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Kinds to analyze
	TargetKinds []string `protobuf:"bytes,4,rep,name=target_kinds,json=targetKinds,proto3" json:"target_kinds,omitempty"`
}

func (x *AnalyzeCrossRefRequest) Reset() {
	*x = AnalyzeCrossRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeCrossRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeCrossRefRequest) ProtoMessage() {}

func (x *AnalyzeCrossRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeCrossRefRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeCrossRefRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeCrossRefRequest) GetTollerance() int32 {
	if x != nil {
		return x.Tollerance
	}
	return 0
}

func (x *AnalyzeCrossRefRequest) GetOpts() map[string]bool {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *AnalyzeCrossRefRequest) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *AnalyzeCrossRefRequest) GetTargetKinds() []string {
	if x != nil {
		return x.TargetKinds
	}
	return nil
}

type CrossRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the crossref.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TODO(christian-roggia): resources should be available through protobuf
	// messages.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CrossRef) Reset() {
	*x = CrossRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRef) ProtoMessage() {}

func (x *CrossRef) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRef.ProtoReflect.Descriptor instead.
func (*CrossRef) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{2}
}

func (x *CrossRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrossRef) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// TODO(christian-roggia): move the universe together with all other resources.
type Universe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the universe.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TODO(christian-roggia): resources should be available through protobuf
	// messages.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Universe) Reset() {
	*x = Universe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Universe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Universe) ProtoMessage() {}

func (x *Universe) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Universe.ProtoReflect.Descriptor instead.
func (*Universe) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{3}
}

func (x *Universe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Universe) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Represents the metadata of the long-running operation.
type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	// Output only. Human-readable status of the operation, if any.
	StatusMessage string `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have successfully been cancelled
	// have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,6,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion string `protobuf:"bytes,7,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Output only.
	StepCount int32 `protobuf:"varint,8,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	// Output only.
	StepProgress int32 `protobuf:"varint,9,opt,name=step_progress,json=stepProgress,proto3" json:"step_progress,omitempty"`
	// Output only.
	ItemCount int32 `protobuf:"varint,10,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	// Output only.
	ItemProgress int32 `protobuf:"varint,11,opt,name=item_progress,json=itemProgress,proto3" json:"item_progress,omitempty"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{4}
}

func (x *OperationMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OperationMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *OperationMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperationMetadata) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *OperationMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *OperationMetadata) GetRequestedCancellation() bool {
	if x != nil {
		return x.RequestedCancellation
	}
	return false
}

func (x *OperationMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *OperationMetadata) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *OperationMetadata) GetStepProgress() int32 {
	if x != nil {
		return x.StepProgress
	}
	return 0
}

func (x *OperationMetadata) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *OperationMetadata) GetItemProgress() int32 {
	if x != nil {
		return x.ItemProgress
	}
	return 0
}

type GetCrossRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested crossref.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCrossRefRequest) Reset() {
	*x = GetCrossRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossRefRequest) ProtoMessage() {}

func (x *GetCrossRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossRefRequest.ProtoReflect.Descriptor instead.
func (*GetCrossRefRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{5}
}

func (x *GetCrossRefRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCrossRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crossref *CrossRef `protobuf:"bytes,1,opt,name=crossref,proto3" json:"crossref,omitempty"`
}

func (x *CreateCrossRefRequest) Reset() {
	*x = CreateCrossRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCrossRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrossRefRequest) ProtoMessage() {}

func (x *CreateCrossRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrossRefRequest.ProtoReflect.Descriptor instead.
func (*CreateCrossRefRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCrossRefRequest) GetCrossref() *CrossRef {
	if x != nil {
		return x.Crossref
	}
	return nil
}

type UpdateCrossRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The crossref to update.
	Crossref *CrossRef `protobuf:"bytes,1,opt,name=crossref,proto3" json:"crossref,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateCrossRefRequest) Reset() {
	*x = UpdateCrossRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCrossRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrossRefRequest) ProtoMessage() {}

func (x *UpdateCrossRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrossRefRequest.ProtoReflect.Descriptor instead.
func (*UpdateCrossRefRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCrossRefRequest) GetCrossref() *CrossRef {
	if x != nil {
		return x.Crossref
	}
	return nil
}

func (x *UpdateCrossRefRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ListCrossRefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of users to return. Server may return fewer users
	// than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListCrossRefsRequest) Reset() {
	*x = ListCrossRefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCrossRefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrossRefsRequest) ProtoMessage() {}

func (x *ListCrossRefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrossRefsRequest.ProtoReflect.Descriptor instead.
func (*ListCrossRefsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{8}
}

func (x *ListCrossRefsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCrossRefsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCrossRefsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListCrossRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of crossrefs.
	Crossrefs []*CrossRef `protobuf:"bytes,1,rep,name=crossrefs,proto3" json:"crossrefs,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCrossRefsResponse) Reset() {
	*x = ListCrossRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCrossRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrossRefsResponse) ProtoMessage() {}

func (x *ListCrossRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrossRefsResponse.ProtoReflect.Descriptor instead.
func (*ListCrossRefsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{9}
}

func (x *ListCrossRefsResponse) GetCrossrefs() []*CrossRef {
	if x != nil {
		return x.Crossrefs
	}
	return nil
}

func (x *ListCrossRefsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUniverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested universe.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetUniverseRequest) Reset() {
	*x = GetUniverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseRequest) ProtoMessage() {}

func (x *GetUniverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseRequest.ProtoReflect.Descriptor instead.
func (*GetUniverseRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{10}
}

func (x *GetUniverseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateUniverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The universe to update.
	Universe *Universe `protobuf:"bytes,1,opt,name=universe,proto3" json:"universe,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUniverseRequest) Reset() {
	*x = UpdateUniverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUniverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUniverseRequest) ProtoMessage() {}

func (x *UpdateUniverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUniverseRequest.ProtoReflect.Descriptor instead.
func (*UpdateUniverseRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUniverseRequest) GetUniverse() *Universe {
	if x != nil {
		return x.Universe
	}
	return nil
}

func (x *UpdateUniverseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ExpandUniverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The universe to expand.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum depth to expand.
	DepthLimit int32 `protobuf:"varint,2,opt,name=depth_limit,json=depthLimit,proto3" json:"depth_limit,omitempty"`
	// The filter to use. Accepted values are CONTENT and CHARACTER.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ExpandUniverseRequest) Reset() {
	*x = ExpandUniverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandUniverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandUniverseRequest) ProtoMessage() {}

func (x *ExpandUniverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandUniverseRequest.ProtoReflect.Descriptor instead.
func (*ExpandUniverseRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{12}
}

func (x *ExpandUniverseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpandUniverseRequest) GetDepthLimit() int32 {
	if x != nil {
		return x.DepthLimit
	}
	return 0
}

func (x *ExpandUniverseRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ExpandUniverseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested universe.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TODO(christian-roggia): resources should be available through protobuf
	// messages.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ExpandUniverseResponse) Reset() {
	*x = ExpandUniverseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandUniverseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandUniverseResponse) ProtoMessage() {}

func (x *ExpandUniverseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandUniverseResponse.ProtoReflect.Descriptor instead.
func (*ExpandUniverseResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{13}
}

func (x *ExpandUniverseResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpandUniverseResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// TODO(christian-roggia): this is a workaround to solve the issue of GAPIC
// CLI where broken code is generated if google.protobuf.Empty is used in the
// response_type of longrunning operations.
type AnalyzeCrossRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeCrossRefsResponse) Reset() {
	*x = AnalyzeCrossRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeCrossRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeCrossRefsResponse) ProtoMessage() {}

func (x *AnalyzeCrossRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeCrossRefsResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeCrossRefsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{14}
}

type ImportCrossRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportCrossRefsResponse) Reset() {
	*x = ImportCrossRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCrossRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCrossRefsResponse) ProtoMessage() {}

func (x *ImportCrossRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCrossRefsResponse.ProtoReflect.Descriptor instead.
func (*ImportCrossRefsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{15}
}

type ExportCrossRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportCrossRefsResponse) Reset() {
	*x = ExportCrossRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportCrossRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportCrossRefsResponse) ProtoMessage() {}

func (x *ExportCrossRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportCrossRefsResponse.ProtoReflect.Descriptor instead.
func (*ExportCrossRefsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{16}
}

type AnalyzeParodiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeParodiesResponse) Reset() {
	*x = AnalyzeParodiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeParodiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeParodiesResponse) ProtoMessage() {}

func (x *AnalyzeParodiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeParodiesResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeParodiesResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{17}
}

type ExportParodiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportParodiesResponse) Reset() {
	*x = ExportParodiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportParodiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportParodiesResponse) ProtoMessage() {}

func (x *ExportParodiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportParodiesResponse.ProtoReflect.Descriptor instead.
func (*ExportParodiesResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP(), []int{18}
}

var File_animeshon_crossrefs_v1alpha1_crossrefs_proto protoreflect.FileDescriptor

var file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x72, 0x65, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72,
	0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6f, 0x70, 0x74,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a,
	0x3b, 0xea, 0x41, 0x38, 0x0a, 0x20, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x12, 0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66,
	0x73, 0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x7d, 0x22, 0x75, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x3b, 0xea, 0x41, 0x38, 0x0a, 0x20, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x14, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x7d, 0x22, 0xf1, 0x03, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x41, 0x22,
	0x0a, 0x20, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x66, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x22, 0x98, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x72, 0x65, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a, 0x15, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x46, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xc0, 0x0f, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x8d, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x12, 0x30, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72,
	0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8d, 0x01,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x12, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x12, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x25, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x7b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x95, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x73, 0x12, 0x32, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x12, 0x34, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x3a, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2d, 0x0a, 0x18, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbb, 0x01, 0x0a, 0x0f, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x12, 0x33, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72,
	0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x3a, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2c, 0x0a, 0x17, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x3a,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2c, 0x0a, 0x17, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x3a,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2c, 0x0a, 0x17, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x3a,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2b, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32,
	0x25, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x33, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0xca, 0x41, 0x17, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x42, 0x84, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x72, 0x65, 0x66, 0x73, 0xea, 0x02, 0x1e, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x73,
	0x3a, 0x3a, 0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescOnce sync.Once
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescData = file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDesc
)

func file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescGZIP() []byte {
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescOnce.Do(func() {
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescData)
	})
	return file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDescData
}

var file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_animeshon_crossrefs_v1alpha1_crossrefs_proto_goTypes = []interface{}{
	(*ImportCrossRefRequest)(nil),    // 0: animeshon.crossrefs.v1alpha1.ImportCrossRefRequest
	(*AnalyzeCrossRefRequest)(nil),   // 1: animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest
	(*CrossRef)(nil),                 // 2: animeshon.crossrefs.v1alpha1.CrossRef
	(*Universe)(nil),                 // 3: animeshon.crossrefs.v1alpha1.Universe
	(*OperationMetadata)(nil),        // 4: animeshon.crossrefs.v1alpha1.OperationMetadata
	(*GetCrossRefRequest)(nil),       // 5: animeshon.crossrefs.v1alpha1.GetCrossRefRequest
	(*CreateCrossRefRequest)(nil),    // 6: animeshon.crossrefs.v1alpha1.CreateCrossRefRequest
	(*UpdateCrossRefRequest)(nil),    // 7: animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest
	(*ListCrossRefsRequest)(nil),     // 8: animeshon.crossrefs.v1alpha1.ListCrossRefsRequest
	(*ListCrossRefsResponse)(nil),    // 9: animeshon.crossrefs.v1alpha1.ListCrossRefsResponse
	(*GetUniverseRequest)(nil),       // 10: animeshon.crossrefs.v1alpha1.GetUniverseRequest
	(*UpdateUniverseRequest)(nil),    // 11: animeshon.crossrefs.v1alpha1.UpdateUniverseRequest
	(*ExpandUniverseRequest)(nil),    // 12: animeshon.crossrefs.v1alpha1.ExpandUniverseRequest
	(*ExpandUniverseResponse)(nil),   // 13: animeshon.crossrefs.v1alpha1.ExpandUniverseResponse
	(*AnalyzeCrossRefsResponse)(nil), // 14: animeshon.crossrefs.v1alpha1.AnalyzeCrossRefsResponse
	(*ImportCrossRefsResponse)(nil),  // 15: animeshon.crossrefs.v1alpha1.ImportCrossRefsResponse
	(*ExportCrossRefsResponse)(nil),  // 16: animeshon.crossrefs.v1alpha1.ExportCrossRefsResponse
	(*AnalyzeParodiesResponse)(nil),  // 17: animeshon.crossrefs.v1alpha1.AnalyzeParodiesResponse
	(*ExportParodiesResponse)(nil),   // 18: animeshon.crossrefs.v1alpha1.ExportParodiesResponse
	nil,                              // 19: animeshon.crossrefs.v1alpha1.ImportCrossRefRequest.OptsEntry
	nil,                              // 20: animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest.OptsEntry
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),    // 22: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),            // 23: google.protobuf.Empty
	(*longrunning.Operation)(nil),    // 24: google.longrunning.Operation
}
var file_animeshon_crossrefs_v1alpha1_crossrefs_proto_depIdxs = []int32{
	19, // 0: animeshon.crossrefs.v1alpha1.ImportCrossRefRequest.opts:type_name -> animeshon.crossrefs.v1alpha1.ImportCrossRefRequest.OptsEntry
	20, // 1: animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest.opts:type_name -> animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest.OptsEntry
	21, // 2: animeshon.crossrefs.v1alpha1.OperationMetadata.create_time:type_name -> google.protobuf.Timestamp
	21, // 3: animeshon.crossrefs.v1alpha1.OperationMetadata.end_time:type_name -> google.protobuf.Timestamp
	2,  // 4: animeshon.crossrefs.v1alpha1.CreateCrossRefRequest.crossref:type_name -> animeshon.crossrefs.v1alpha1.CrossRef
	2,  // 5: animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest.crossref:type_name -> animeshon.crossrefs.v1alpha1.CrossRef
	22, // 6: animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 7: animeshon.crossrefs.v1alpha1.ListCrossRefsResponse.crossrefs:type_name -> animeshon.crossrefs.v1alpha1.CrossRef
	3,  // 8: animeshon.crossrefs.v1alpha1.UpdateUniverseRequest.universe:type_name -> animeshon.crossrefs.v1alpha1.Universe
	22, // 9: animeshon.crossrefs.v1alpha1.UpdateUniverseRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 10: animeshon.crossrefs.v1alpha1.Referrer.GetCrossRef:input_type -> animeshon.crossrefs.v1alpha1.GetCrossRefRequest
	6,  // 11: animeshon.crossrefs.v1alpha1.Referrer.CreateCrossRef:input_type -> animeshon.crossrefs.v1alpha1.CreateCrossRefRequest
	7,  // 12: animeshon.crossrefs.v1alpha1.Referrer.UpdateCrossRef:input_type -> animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest
	8,  // 13: animeshon.crossrefs.v1alpha1.Referrer.ListCrossRefs:input_type -> animeshon.crossrefs.v1alpha1.ListCrossRefsRequest
	1,  // 14: animeshon.crossrefs.v1alpha1.Referrer.AnalyzeCrossRefs:input_type -> animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest
	0,  // 15: animeshon.crossrefs.v1alpha1.Referrer.ImportCrossRefs:input_type -> animeshon.crossrefs.v1alpha1.ImportCrossRefRequest
	23, // 16: animeshon.crossrefs.v1alpha1.Referrer.ExportCrossRefs:input_type -> google.protobuf.Empty
	23, // 17: animeshon.crossrefs.v1alpha1.Referrer.AnalyzeParodies:input_type -> google.protobuf.Empty
	23, // 18: animeshon.crossrefs.v1alpha1.Referrer.ExportParodies:input_type -> google.protobuf.Empty
	10, // 19: animeshon.crossrefs.v1alpha1.Referrer.GetUniverse:input_type -> animeshon.crossrefs.v1alpha1.GetUniverseRequest
	11, // 20: animeshon.crossrefs.v1alpha1.Referrer.UpdateUniverse:input_type -> animeshon.crossrefs.v1alpha1.UpdateUniverseRequest
	12, // 21: animeshon.crossrefs.v1alpha1.Referrer.ExpandUniverse:input_type -> animeshon.crossrefs.v1alpha1.ExpandUniverseRequest
	2,  // 22: animeshon.crossrefs.v1alpha1.Referrer.GetCrossRef:output_type -> animeshon.crossrefs.v1alpha1.CrossRef
	2,  // 23: animeshon.crossrefs.v1alpha1.Referrer.CreateCrossRef:output_type -> animeshon.crossrefs.v1alpha1.CrossRef
	2,  // 24: animeshon.crossrefs.v1alpha1.Referrer.UpdateCrossRef:output_type -> animeshon.crossrefs.v1alpha1.CrossRef
	9,  // 25: animeshon.crossrefs.v1alpha1.Referrer.ListCrossRefs:output_type -> animeshon.crossrefs.v1alpha1.ListCrossRefsResponse
	24, // 26: animeshon.crossrefs.v1alpha1.Referrer.AnalyzeCrossRefs:output_type -> google.longrunning.Operation
	24, // 27: animeshon.crossrefs.v1alpha1.Referrer.ImportCrossRefs:output_type -> google.longrunning.Operation
	24, // 28: animeshon.crossrefs.v1alpha1.Referrer.ExportCrossRefs:output_type -> google.longrunning.Operation
	24, // 29: animeshon.crossrefs.v1alpha1.Referrer.AnalyzeParodies:output_type -> google.longrunning.Operation
	24, // 30: animeshon.crossrefs.v1alpha1.Referrer.ExportParodies:output_type -> google.longrunning.Operation
	3,  // 31: animeshon.crossrefs.v1alpha1.Referrer.GetUniverse:output_type -> animeshon.crossrefs.v1alpha1.Universe
	3,  // 32: animeshon.crossrefs.v1alpha1.Referrer.UpdateUniverse:output_type -> animeshon.crossrefs.v1alpha1.Universe
	13, // 33: animeshon.crossrefs.v1alpha1.Referrer.ExpandUniverse:output_type -> animeshon.crossrefs.v1alpha1.ExpandUniverseResponse
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_animeshon_crossrefs_v1alpha1_crossrefs_proto_init() }
func file_animeshon_crossrefs_v1alpha1_crossrefs_proto_init() {
	if File_animeshon_crossrefs_v1alpha1_crossrefs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCrossRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeCrossRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Universe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCrossRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCrossRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCrossRefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCrossRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUniverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandUniverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandUniverseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeCrossRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCrossRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportCrossRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeParodiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportParodiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_crossrefs_v1alpha1_crossrefs_proto_goTypes,
		DependencyIndexes: file_animeshon_crossrefs_v1alpha1_crossrefs_proto_depIdxs,
		MessageInfos:      file_animeshon_crossrefs_v1alpha1_crossrefs_proto_msgTypes,
	}.Build()
	File_animeshon_crossrefs_v1alpha1_crossrefs_proto = out.File
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_rawDesc = nil
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_goTypes = nil
	file_animeshon_crossrefs_v1alpha1_crossrefs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReferrerClient is the client API for Referrer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReferrerClient interface {
	// GetCrossRef returns a crossref.
	GetCrossRef(ctx context.Context, in *GetCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error)
	// CreateCrossRef creates a new crossref.
	CreateCrossRef(ctx context.Context, in *CreateCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error)
	UpdateCrossRef(ctx context.Context, in *UpdateCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error)
	ListCrossRefs(ctx context.Context, in *ListCrossRefsRequest, opts ...grpc.CallOption) (*ListCrossRefsResponse, error)
	// Analyzes and proposes new cross-references according to their similarity.
	AnalyzeCrossRefs(ctx context.Context, in *AnalyzeCrossRefRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Imports already existing cross-references from third-parties.
	ImportCrossRefs(ctx context.Context, in *ImportCrossRefRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Exports the cross-references to Cloud Pub/Sub for a full synchronization.
	// This operation is usually called after a new import with a clean database.
	ExportCrossRefs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error)
	AnalyzeParodies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error)
	ExportParodies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error)
	GetUniverse(ctx context.Context, in *GetUniverseRequest, opts ...grpc.CallOption) (*Universe, error)
	UpdateUniverse(ctx context.Context, in *UpdateUniverseRequest, opts ...grpc.CallOption) (*Universe, error)
	ExpandUniverse(ctx context.Context, in *ExpandUniverseRequest, opts ...grpc.CallOption) (*ExpandUniverseResponse, error)
}

type referrerClient struct {
	cc grpc.ClientConnInterface
}

func NewReferrerClient(cc grpc.ClientConnInterface) ReferrerClient {
	return &referrerClient{cc}
}

func (c *referrerClient) GetCrossRef(ctx context.Context, in *GetCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error) {
	out := new(CrossRef)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/GetCrossRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) CreateCrossRef(ctx context.Context, in *CreateCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error) {
	out := new(CrossRef)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/CreateCrossRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) UpdateCrossRef(ctx context.Context, in *UpdateCrossRefRequest, opts ...grpc.CallOption) (*CrossRef, error) {
	out := new(CrossRef)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/UpdateCrossRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) ListCrossRefs(ctx context.Context, in *ListCrossRefsRequest, opts ...grpc.CallOption) (*ListCrossRefsResponse, error) {
	out := new(ListCrossRefsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/ListCrossRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) AnalyzeCrossRefs(ctx context.Context, in *AnalyzeCrossRefRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/AnalyzeCrossRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) ImportCrossRefs(ctx context.Context, in *ImportCrossRefRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/ImportCrossRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) ExportCrossRefs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/ExportCrossRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) AnalyzeParodies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/AnalyzeParodies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) ExportParodies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/ExportParodies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) GetUniverse(ctx context.Context, in *GetUniverseRequest, opts ...grpc.CallOption) (*Universe, error) {
	out := new(Universe)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/GetUniverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) UpdateUniverse(ctx context.Context, in *UpdateUniverseRequest, opts ...grpc.CallOption) (*Universe, error) {
	out := new(Universe)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/UpdateUniverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referrerClient) ExpandUniverse(ctx context.Context, in *ExpandUniverseRequest, opts ...grpc.CallOption) (*ExpandUniverseResponse, error) {
	out := new(ExpandUniverseResponse)
	err := c.cc.Invoke(ctx, "/animeshon.crossrefs.v1alpha1.Referrer/ExpandUniverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferrerServer is the server API for Referrer service.
type ReferrerServer interface {
	// GetCrossRef returns a crossref.
	GetCrossRef(context.Context, *GetCrossRefRequest) (*CrossRef, error)
	// CreateCrossRef creates a new crossref.
	CreateCrossRef(context.Context, *CreateCrossRefRequest) (*CrossRef, error)
	UpdateCrossRef(context.Context, *UpdateCrossRefRequest) (*CrossRef, error)
	ListCrossRefs(context.Context, *ListCrossRefsRequest) (*ListCrossRefsResponse, error)
	// Analyzes and proposes new cross-references according to their similarity.
	AnalyzeCrossRefs(context.Context, *AnalyzeCrossRefRequest) (*longrunning.Operation, error)
	// Imports already existing cross-references from third-parties.
	ImportCrossRefs(context.Context, *ImportCrossRefRequest) (*longrunning.Operation, error)
	// Exports the cross-references to Cloud Pub/Sub for a full synchronization.
	// This operation is usually called after a new import with a clean database.
	ExportCrossRefs(context.Context, *emptypb.Empty) (*longrunning.Operation, error)
	AnalyzeParodies(context.Context, *emptypb.Empty) (*longrunning.Operation, error)
	ExportParodies(context.Context, *emptypb.Empty) (*longrunning.Operation, error)
	GetUniverse(context.Context, *GetUniverseRequest) (*Universe, error)
	UpdateUniverse(context.Context, *UpdateUniverseRequest) (*Universe, error)
	ExpandUniverse(context.Context, *ExpandUniverseRequest) (*ExpandUniverseResponse, error)
}

// UnimplementedReferrerServer can be embedded to have forward compatible implementations.
type UnimplementedReferrerServer struct {
}

func (*UnimplementedReferrerServer) GetCrossRef(context.Context, *GetCrossRefRequest) (*CrossRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrossRef not implemented")
}
func (*UnimplementedReferrerServer) CreateCrossRef(context.Context, *CreateCrossRefRequest) (*CrossRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrossRef not implemented")
}
func (*UnimplementedReferrerServer) UpdateCrossRef(context.Context, *UpdateCrossRefRequest) (*CrossRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrossRef not implemented")
}
func (*UnimplementedReferrerServer) ListCrossRefs(context.Context, *ListCrossRefsRequest) (*ListCrossRefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrossRefs not implemented")
}
func (*UnimplementedReferrerServer) AnalyzeCrossRefs(context.Context, *AnalyzeCrossRefRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCrossRefs not implemented")
}
func (*UnimplementedReferrerServer) ImportCrossRefs(context.Context, *ImportCrossRefRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCrossRefs not implemented")
}
func (*UnimplementedReferrerServer) ExportCrossRefs(context.Context, *emptypb.Empty) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCrossRefs not implemented")
}
func (*UnimplementedReferrerServer) AnalyzeParodies(context.Context, *emptypb.Empty) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeParodies not implemented")
}
func (*UnimplementedReferrerServer) ExportParodies(context.Context, *emptypb.Empty) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportParodies not implemented")
}
func (*UnimplementedReferrerServer) GetUniverse(context.Context, *GetUniverseRequest) (*Universe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverse not implemented")
}
func (*UnimplementedReferrerServer) UpdateUniverse(context.Context, *UpdateUniverseRequest) (*Universe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUniverse not implemented")
}
func (*UnimplementedReferrerServer) ExpandUniverse(context.Context, *ExpandUniverseRequest) (*ExpandUniverseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandUniverse not implemented")
}

func RegisterReferrerServer(s *grpc.Server, srv ReferrerServer) {
	s.RegisterService(&_Referrer_serviceDesc, srv)
}

func _Referrer_GetCrossRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrossRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).GetCrossRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/GetCrossRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).GetCrossRef(ctx, req.(*GetCrossRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_CreateCrossRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrossRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).CreateCrossRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/CreateCrossRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).CreateCrossRef(ctx, req.(*CreateCrossRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_UpdateCrossRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrossRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).UpdateCrossRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/UpdateCrossRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).UpdateCrossRef(ctx, req.(*UpdateCrossRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_ListCrossRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCrossRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).ListCrossRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/ListCrossRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).ListCrossRefs(ctx, req.(*ListCrossRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_AnalyzeCrossRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCrossRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).AnalyzeCrossRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/AnalyzeCrossRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).AnalyzeCrossRefs(ctx, req.(*AnalyzeCrossRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_ImportCrossRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCrossRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).ImportCrossRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/ImportCrossRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).ImportCrossRefs(ctx, req.(*ImportCrossRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_ExportCrossRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).ExportCrossRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/ExportCrossRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).ExportCrossRefs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_AnalyzeParodies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).AnalyzeParodies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/AnalyzeParodies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).AnalyzeParodies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_ExportParodies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).ExportParodies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/ExportParodies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).ExportParodies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_GetUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).GetUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/GetUniverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).GetUniverse(ctx, req.(*GetUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_UpdateUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).UpdateUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/UpdateUniverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).UpdateUniverse(ctx, req.(*UpdateUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrer_ExpandUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferrerServer).ExpandUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.crossrefs.v1alpha1.Referrer/ExpandUniverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferrerServer).ExpandUniverse(ctx, req.(*ExpandUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Referrer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.crossrefs.v1alpha1.Referrer",
	HandlerType: (*ReferrerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrossRef",
			Handler:    _Referrer_GetCrossRef_Handler,
		},
		{
			MethodName: "CreateCrossRef",
			Handler:    _Referrer_CreateCrossRef_Handler,
		},
		{
			MethodName: "UpdateCrossRef",
			Handler:    _Referrer_UpdateCrossRef_Handler,
		},
		{
			MethodName: "ListCrossRefs",
			Handler:    _Referrer_ListCrossRefs_Handler,
		},
		{
			MethodName: "AnalyzeCrossRefs",
			Handler:    _Referrer_AnalyzeCrossRefs_Handler,
		},
		{
			MethodName: "ImportCrossRefs",
			Handler:    _Referrer_ImportCrossRefs_Handler,
		},
		{
			MethodName: "ExportCrossRefs",
			Handler:    _Referrer_ExportCrossRefs_Handler,
		},
		{
			MethodName: "AnalyzeParodies",
			Handler:    _Referrer_AnalyzeParodies_Handler,
		},
		{
			MethodName: "ExportParodies",
			Handler:    _Referrer_ExportParodies_Handler,
		},
		{
			MethodName: "GetUniverse",
			Handler:    _Referrer_GetUniverse_Handler,
		},
		{
			MethodName: "UpdateUniverse",
			Handler:    _Referrer_UpdateUniverse_Handler,
		},
		{
			MethodName: "ExpandUniverse",
			Handler:    _Referrer_ExpandUniverse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/crossrefs/v1alpha1/crossrefs.proto",
}
