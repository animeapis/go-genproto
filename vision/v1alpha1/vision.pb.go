// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: animeshon/vision/v1alpha1/vision.proto

package vision

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ImageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The content type of the image.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The size of the image in bytes.
	SizeBytes int32 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The width of image in pixels.
	WidthPixel int32 `protobuf:"varint,4,opt,name=width_pixel,json=widthPixel,proto3" json:"width_pixel,omitempty"`
	// The height of image in pixels.
	HeightPixel int32 `protobuf:"varint,5,opt,name=height_pixel,json=heightPixel,proto3" json:"height_pixel,omitempty"`
	// The (immutable) properties of the image.
	Properties *ImageProperties `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	// The annotations of the image.
	Annotations *ImageAnnotations `protobuf:"bytes,7,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// The timestamp at which the image was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The latest timestamp at which the image was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ImageReport) Reset() {
	*x = ImageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReport) ProtoMessage() {}

func (x *ImageReport) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReport.ProtoReflect.Descriptor instead.
func (*ImageReport) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{0}
}

func (x *ImageReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageReport) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ImageReport) GetSizeBytes() int32 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *ImageReport) GetWidthPixel() int32 {
	if x != nil {
		return x.WidthPixel
	}
	return 0
}

func (x *ImageReport) GetHeightPixel() int32 {
	if x != nil {
		return x.HeightPixel
	}
	return 0
}

func (x *ImageReport) GetProperties() *ImageProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ImageReport) GetAnnotations() *ImageAnnotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ImageReport) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ImageReport) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type ImageAnnotationHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hint resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The annotation hints of the image.
	Hints *ImageAnnotations `protobuf:"bytes,2,opt,name=hints,proto3" json:"hints,omitempty"`
	// The timestamp at which the hint was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The latest timestamp at which the hint was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ImageAnnotationHint) Reset() {
	*x = ImageAnnotationHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageAnnotationHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageAnnotationHint) ProtoMessage() {}

func (x *ImageAnnotationHint) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageAnnotationHint.ProtoReflect.Descriptor instead.
func (*ImageAnnotationHint) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{1}
}

func (x *ImageAnnotationHint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageAnnotationHint) GetHints() *ImageAnnotations {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *ImageAnnotationHint) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ImageAnnotationHint) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type CreateImageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateImageReportRequest) Reset() {
	*x = CreateImageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageReportRequest) ProtoMessage() {}

func (x *CreateImageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageReportRequest.ProtoReflect.Descriptor instead.
func (*CreateImageReportRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{2}
}

func (x *CreateImageReportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListImageReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListImageReportsRequest) Reset() {
	*x = ListImageReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageReportsRequest) ProtoMessage() {}

func (x *ListImageReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageReportsRequest.ProtoReflect.Descriptor instead.
func (*ListImageReportsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{3}
}

func (x *ListImageReportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListImageReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListImageReportsResponse) Reset() {
	*x = ListImageReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageReportsResponse) ProtoMessage() {}

func (x *ListImageReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageReportsResponse.ProtoReflect.Descriptor instead.
func (*ListImageReportsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{4}
}

type GetImageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetImageReportRequest) Reset() {
	*x = GetImageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageReportRequest) ProtoMessage() {}

func (x *GetImageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageReportRequest.ProtoReflect.Descriptor instead.
func (*GetImageReportRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{5}
}

func (x *GetImageReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteImageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteImageReportRequest) Reset() {
	*x = DeleteImageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageReportRequest) ProtoMessage() {}

func (x *DeleteImageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteImageReportRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteImageReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateImageAnnotationHintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateImageAnnotationHintRequest) Reset() {
	*x = CreateImageAnnotationHintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageAnnotationHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageAnnotationHintRequest) ProtoMessage() {}

func (x *CreateImageAnnotationHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageAnnotationHintRequest.ProtoReflect.Descriptor instead.
func (*CreateImageAnnotationHintRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{7}
}

func (x *CreateImageAnnotationHintRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListImageAnnotationHintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListImageAnnotationHintsRequest) Reset() {
	*x = ListImageAnnotationHintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageAnnotationHintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageAnnotationHintsRequest) ProtoMessage() {}

func (x *ListImageAnnotationHintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageAnnotationHintsRequest.ProtoReflect.Descriptor instead.
func (*ListImageAnnotationHintsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{8}
}

func (x *ListImageAnnotationHintsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListImageAnnotationHintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListImageAnnotationHintsResponse) Reset() {
	*x = ListImageAnnotationHintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageAnnotationHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageAnnotationHintsResponse) ProtoMessage() {}

func (x *ListImageAnnotationHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageAnnotationHintsResponse.ProtoReflect.Descriptor instead.
func (*ListImageAnnotationHintsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{9}
}

type GetImageAnnotationHintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetImageAnnotationHintRequest) Reset() {
	*x = GetImageAnnotationHintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageAnnotationHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageAnnotationHintRequest) ProtoMessage() {}

func (x *GetImageAnnotationHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageAnnotationHintRequest.ProtoReflect.Descriptor instead.
func (*GetImageAnnotationHintRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{10}
}

func (x *GetImageAnnotationHintRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateImageAnnotationHintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hint *ImageAnnotationHint `protobuf:"bytes,1,opt,name=hint,proto3" json:"hint,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateImageAnnotationHintRequest) Reset() {
	*x = UpdateImageAnnotationHintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageAnnotationHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageAnnotationHintRequest) ProtoMessage() {}

func (x *UpdateImageAnnotationHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageAnnotationHintRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageAnnotationHintRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateImageAnnotationHintRequest) GetHint() *ImageAnnotationHint {
	if x != nil {
		return x.Hint
	}
	return nil
}

func (x *UpdateImageAnnotationHintRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteImageAnnotationHintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteImageAnnotationHintRequest) Reset() {
	*x = DeleteImageAnnotationHintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageAnnotationHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageAnnotationHintRequest) ProtoMessage() {}

func (x *DeleteImageAnnotationHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_vision_v1alpha1_vision_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageAnnotationHintRequest.ProtoReflect.Descriptor instead.
func (*DeleteImageAnnotationHintRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteImageAnnotationHintRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_animeshon_vision_v1alpha1_vision_proto protoreflect.FileDescriptor

var file_animeshon_vision_v1alpha1_vision_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x2b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x12, 0x4a,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x01,
	0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x68, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x32, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa3, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x36, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xbd,
	0x0d, 0x0a, 0x06, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x32, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0xa3, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x42, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xd4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd1, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41,
	0x32, 0x3c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x68, 0x69, 0x6e,
	0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x17, 0xca, 0x41, 0x14, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x78,
	0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50,
	0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0xea, 0x02, 0x1b, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3a,
	0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_vision_v1alpha1_vision_proto_rawDescOnce sync.Once
	file_animeshon_vision_v1alpha1_vision_proto_rawDescData = file_animeshon_vision_v1alpha1_vision_proto_rawDesc
)

func file_animeshon_vision_v1alpha1_vision_proto_rawDescGZIP() []byte {
	file_animeshon_vision_v1alpha1_vision_proto_rawDescOnce.Do(func() {
		file_animeshon_vision_v1alpha1_vision_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_vision_v1alpha1_vision_proto_rawDescData)
	})
	return file_animeshon_vision_v1alpha1_vision_proto_rawDescData
}

var file_animeshon_vision_v1alpha1_vision_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_animeshon_vision_v1alpha1_vision_proto_goTypes = []interface{}{
	(*ImageReport)(nil),                      // 0: animeshon.vision.v1alpha1.ImageReport
	(*ImageAnnotationHint)(nil),              // 1: animeshon.vision.v1alpha1.ImageAnnotationHint
	(*CreateImageReportRequest)(nil),         // 2: animeshon.vision.v1alpha1.CreateImageReportRequest
	(*ListImageReportsRequest)(nil),          // 3: animeshon.vision.v1alpha1.ListImageReportsRequest
	(*ListImageReportsResponse)(nil),         // 4: animeshon.vision.v1alpha1.ListImageReportsResponse
	(*GetImageReportRequest)(nil),            // 5: animeshon.vision.v1alpha1.GetImageReportRequest
	(*DeleteImageReportRequest)(nil),         // 6: animeshon.vision.v1alpha1.DeleteImageReportRequest
	(*CreateImageAnnotationHintRequest)(nil), // 7: animeshon.vision.v1alpha1.CreateImageAnnotationHintRequest
	(*ListImageAnnotationHintsRequest)(nil),  // 8: animeshon.vision.v1alpha1.ListImageAnnotationHintsRequest
	(*ListImageAnnotationHintsResponse)(nil), // 9: animeshon.vision.v1alpha1.ListImageAnnotationHintsResponse
	(*GetImageAnnotationHintRequest)(nil),    // 10: animeshon.vision.v1alpha1.GetImageAnnotationHintRequest
	(*UpdateImageAnnotationHintRequest)(nil), // 11: animeshon.vision.v1alpha1.UpdateImageAnnotationHintRequest
	(*DeleteImageAnnotationHintRequest)(nil), // 12: animeshon.vision.v1alpha1.DeleteImageAnnotationHintRequest
	(*ImageProperties)(nil),                  // 13: animeshon.vision.v1alpha1.ImageProperties
	(*ImageAnnotations)(nil),                 // 14: animeshon.vision.v1alpha1.ImageAnnotations
	(*timestamppb.Timestamp)(nil),            // 15: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),            // 16: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                    // 17: google.protobuf.Empty
}
var file_animeshon_vision_v1alpha1_vision_proto_depIdxs = []int32{
	13, // 0: animeshon.vision.v1alpha1.ImageReport.properties:type_name -> animeshon.vision.v1alpha1.ImageProperties
	14, // 1: animeshon.vision.v1alpha1.ImageReport.annotations:type_name -> animeshon.vision.v1alpha1.ImageAnnotations
	15, // 2: animeshon.vision.v1alpha1.ImageReport.create_time:type_name -> google.protobuf.Timestamp
	15, // 3: animeshon.vision.v1alpha1.ImageReport.update_time:type_name -> google.protobuf.Timestamp
	14, // 4: animeshon.vision.v1alpha1.ImageAnnotationHint.hints:type_name -> animeshon.vision.v1alpha1.ImageAnnotations
	15, // 5: animeshon.vision.v1alpha1.ImageAnnotationHint.create_time:type_name -> google.protobuf.Timestamp
	15, // 6: animeshon.vision.v1alpha1.ImageAnnotationHint.update_time:type_name -> google.protobuf.Timestamp
	1,  // 7: animeshon.vision.v1alpha1.UpdateImageAnnotationHintRequest.hint:type_name -> animeshon.vision.v1alpha1.ImageAnnotationHint
	16, // 8: animeshon.vision.v1alpha1.UpdateImageAnnotationHintRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 9: animeshon.vision.v1alpha1.Vision.CreateImageReport:input_type -> animeshon.vision.v1alpha1.CreateImageReportRequest
	3,  // 10: animeshon.vision.v1alpha1.Vision.ListImageReports:input_type -> animeshon.vision.v1alpha1.ListImageReportsRequest
	5,  // 11: animeshon.vision.v1alpha1.Vision.GetImageReport:input_type -> animeshon.vision.v1alpha1.GetImageReportRequest
	6,  // 12: animeshon.vision.v1alpha1.Vision.DeleteImageReport:input_type -> animeshon.vision.v1alpha1.DeleteImageReportRequest
	7,  // 13: animeshon.vision.v1alpha1.Vision.CreateImageAnnotationHint:input_type -> animeshon.vision.v1alpha1.CreateImageAnnotationHintRequest
	8,  // 14: animeshon.vision.v1alpha1.Vision.ListImageAnnotationHints:input_type -> animeshon.vision.v1alpha1.ListImageAnnotationHintsRequest
	10, // 15: animeshon.vision.v1alpha1.Vision.GetImageAnnotationHint:input_type -> animeshon.vision.v1alpha1.GetImageAnnotationHintRequest
	11, // 16: animeshon.vision.v1alpha1.Vision.UpdateImageAnnotationHint:input_type -> animeshon.vision.v1alpha1.UpdateImageAnnotationHintRequest
	12, // 17: animeshon.vision.v1alpha1.Vision.DeleteImageAnnotationHint:input_type -> animeshon.vision.v1alpha1.DeleteImageAnnotationHintRequest
	0,  // 18: animeshon.vision.v1alpha1.Vision.CreateImageReport:output_type -> animeshon.vision.v1alpha1.ImageReport
	4,  // 19: animeshon.vision.v1alpha1.Vision.ListImageReports:output_type -> animeshon.vision.v1alpha1.ListImageReportsResponse
	0,  // 20: animeshon.vision.v1alpha1.Vision.GetImageReport:output_type -> animeshon.vision.v1alpha1.ImageReport
	17, // 21: animeshon.vision.v1alpha1.Vision.DeleteImageReport:output_type -> google.protobuf.Empty
	1,  // 22: animeshon.vision.v1alpha1.Vision.CreateImageAnnotationHint:output_type -> animeshon.vision.v1alpha1.ImageAnnotationHint
	9,  // 23: animeshon.vision.v1alpha1.Vision.ListImageAnnotationHints:output_type -> animeshon.vision.v1alpha1.ListImageAnnotationHintsResponse
	1,  // 24: animeshon.vision.v1alpha1.Vision.GetImageAnnotationHint:output_type -> animeshon.vision.v1alpha1.ImageAnnotationHint
	1,  // 25: animeshon.vision.v1alpha1.Vision.UpdateImageAnnotationHint:output_type -> animeshon.vision.v1alpha1.ImageAnnotationHint
	17, // 26: animeshon.vision.v1alpha1.Vision.DeleteImageAnnotationHint:output_type -> google.protobuf.Empty
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_animeshon_vision_v1alpha1_vision_proto_init() }
func file_animeshon_vision_v1alpha1_vision_proto_init() {
	if File_animeshon_vision_v1alpha1_vision_proto != nil {
		return
	}
	file_animeshon_vision_v1alpha1_annotations_proto_init()
	file_animeshon_vision_v1alpha1_properties_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageAnnotationHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageAnnotationHintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageAnnotationHintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageAnnotationHintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageAnnotationHintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageAnnotationHintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_vision_v1alpha1_vision_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageAnnotationHintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_vision_v1alpha1_vision_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_vision_v1alpha1_vision_proto_goTypes,
		DependencyIndexes: file_animeshon_vision_v1alpha1_vision_proto_depIdxs,
		MessageInfos:      file_animeshon_vision_v1alpha1_vision_proto_msgTypes,
	}.Build()
	File_animeshon_vision_v1alpha1_vision_proto = out.File
	file_animeshon_vision_v1alpha1_vision_proto_rawDesc = nil
	file_animeshon_vision_v1alpha1_vision_proto_goTypes = nil
	file_animeshon_vision_v1alpha1_vision_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VisionClient is the client API for Vision service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisionClient interface {
	CreateImageReport(ctx context.Context, in *CreateImageReportRequest, opts ...grpc.CallOption) (*ImageReport, error)
	ListImageReports(ctx context.Context, in *ListImageReportsRequest, opts ...grpc.CallOption) (*ListImageReportsResponse, error)
	GetImageReport(ctx context.Context, in *GetImageReportRequest, opts ...grpc.CallOption) (*ImageReport, error)
	DeleteImageReport(ctx context.Context, in *DeleteImageReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateImageAnnotationHint(ctx context.Context, in *CreateImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error)
	ListImageAnnotationHints(ctx context.Context, in *ListImageAnnotationHintsRequest, opts ...grpc.CallOption) (*ListImageAnnotationHintsResponse, error)
	GetImageAnnotationHint(ctx context.Context, in *GetImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error)
	UpdateImageAnnotationHint(ctx context.Context, in *UpdateImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error)
	DeleteImageAnnotationHint(ctx context.Context, in *DeleteImageAnnotationHintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type visionClient struct {
	cc grpc.ClientConnInterface
}

func NewVisionClient(cc grpc.ClientConnInterface) VisionClient {
	return &visionClient{cc}
}

func (c *visionClient) CreateImageReport(ctx context.Context, in *CreateImageReportRequest, opts ...grpc.CallOption) (*ImageReport, error) {
	out := new(ImageReport)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/CreateImageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) ListImageReports(ctx context.Context, in *ListImageReportsRequest, opts ...grpc.CallOption) (*ListImageReportsResponse, error) {
	out := new(ListImageReportsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/ListImageReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) GetImageReport(ctx context.Context, in *GetImageReportRequest, opts ...grpc.CallOption) (*ImageReport, error) {
	out := new(ImageReport)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/GetImageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) DeleteImageReport(ctx context.Context, in *DeleteImageReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/DeleteImageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) CreateImageAnnotationHint(ctx context.Context, in *CreateImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error) {
	out := new(ImageAnnotationHint)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/CreateImageAnnotationHint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) ListImageAnnotationHints(ctx context.Context, in *ListImageAnnotationHintsRequest, opts ...grpc.CallOption) (*ListImageAnnotationHintsResponse, error) {
	out := new(ListImageAnnotationHintsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/ListImageAnnotationHints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) GetImageAnnotationHint(ctx context.Context, in *GetImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error) {
	out := new(ImageAnnotationHint)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/GetImageAnnotationHint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) UpdateImageAnnotationHint(ctx context.Context, in *UpdateImageAnnotationHintRequest, opts ...grpc.CallOption) (*ImageAnnotationHint, error) {
	out := new(ImageAnnotationHint)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/UpdateImageAnnotationHint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) DeleteImageAnnotationHint(ctx context.Context, in *DeleteImageAnnotationHintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.vision.v1alpha1.Vision/DeleteImageAnnotationHint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisionServer is the server API for Vision service.
type VisionServer interface {
	CreateImageReport(context.Context, *CreateImageReportRequest) (*ImageReport, error)
	ListImageReports(context.Context, *ListImageReportsRequest) (*ListImageReportsResponse, error)
	GetImageReport(context.Context, *GetImageReportRequest) (*ImageReport, error)
	DeleteImageReport(context.Context, *DeleteImageReportRequest) (*emptypb.Empty, error)
	CreateImageAnnotationHint(context.Context, *CreateImageAnnotationHintRequest) (*ImageAnnotationHint, error)
	ListImageAnnotationHints(context.Context, *ListImageAnnotationHintsRequest) (*ListImageAnnotationHintsResponse, error)
	GetImageAnnotationHint(context.Context, *GetImageAnnotationHintRequest) (*ImageAnnotationHint, error)
	UpdateImageAnnotationHint(context.Context, *UpdateImageAnnotationHintRequest) (*ImageAnnotationHint, error)
	DeleteImageAnnotationHint(context.Context, *DeleteImageAnnotationHintRequest) (*emptypb.Empty, error)
}

// UnimplementedVisionServer can be embedded to have forward compatible implementations.
type UnimplementedVisionServer struct {
}

func (*UnimplementedVisionServer) CreateImageReport(context.Context, *CreateImageReportRequest) (*ImageReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageReport not implemented")
}
func (*UnimplementedVisionServer) ListImageReports(context.Context, *ListImageReportsRequest) (*ListImageReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageReports not implemented")
}
func (*UnimplementedVisionServer) GetImageReport(context.Context, *GetImageReportRequest) (*ImageReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageReport not implemented")
}
func (*UnimplementedVisionServer) DeleteImageReport(context.Context, *DeleteImageReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageReport not implemented")
}
func (*UnimplementedVisionServer) CreateImageAnnotationHint(context.Context, *CreateImageAnnotationHintRequest) (*ImageAnnotationHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageAnnotationHint not implemented")
}
func (*UnimplementedVisionServer) ListImageAnnotationHints(context.Context, *ListImageAnnotationHintsRequest) (*ListImageAnnotationHintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageAnnotationHints not implemented")
}
func (*UnimplementedVisionServer) GetImageAnnotationHint(context.Context, *GetImageAnnotationHintRequest) (*ImageAnnotationHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageAnnotationHint not implemented")
}
func (*UnimplementedVisionServer) UpdateImageAnnotationHint(context.Context, *UpdateImageAnnotationHintRequest) (*ImageAnnotationHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageAnnotationHint not implemented")
}
func (*UnimplementedVisionServer) DeleteImageAnnotationHint(context.Context, *DeleteImageAnnotationHintRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageAnnotationHint not implemented")
}

func RegisterVisionServer(s *grpc.Server, srv VisionServer) {
	s.RegisterService(&_Vision_serviceDesc, srv)
}

func _Vision_CreateImageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).CreateImageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/CreateImageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).CreateImageReport(ctx, req.(*CreateImageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_ListImageReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).ListImageReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/ListImageReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).ListImageReports(ctx, req.(*ListImageReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_GetImageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).GetImageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/GetImageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).GetImageReport(ctx, req.(*GetImageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_DeleteImageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).DeleteImageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/DeleteImageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).DeleteImageReport(ctx, req.(*DeleteImageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_CreateImageAnnotationHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageAnnotationHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).CreateImageAnnotationHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/CreateImageAnnotationHint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).CreateImageAnnotationHint(ctx, req.(*CreateImageAnnotationHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_ListImageAnnotationHints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageAnnotationHintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).ListImageAnnotationHints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/ListImageAnnotationHints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).ListImageAnnotationHints(ctx, req.(*ListImageAnnotationHintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_GetImageAnnotationHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageAnnotationHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).GetImageAnnotationHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/GetImageAnnotationHint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).GetImageAnnotationHint(ctx, req.(*GetImageAnnotationHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_UpdateImageAnnotationHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageAnnotationHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).UpdateImageAnnotationHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/UpdateImageAnnotationHint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).UpdateImageAnnotationHint(ctx, req.(*UpdateImageAnnotationHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_DeleteImageAnnotationHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageAnnotationHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).DeleteImageAnnotationHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.vision.v1alpha1.Vision/DeleteImageAnnotationHint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).DeleteImageAnnotationHint(ctx, req.(*DeleteImageAnnotationHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vision_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.vision.v1alpha1.Vision",
	HandlerType: (*VisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImageReport",
			Handler:    _Vision_CreateImageReport_Handler,
		},
		{
			MethodName: "ListImageReports",
			Handler:    _Vision_ListImageReports_Handler,
		},
		{
			MethodName: "GetImageReport",
			Handler:    _Vision_GetImageReport_Handler,
		},
		{
			MethodName: "DeleteImageReport",
			Handler:    _Vision_DeleteImageReport_Handler,
		},
		{
			MethodName: "CreateImageAnnotationHint",
			Handler:    _Vision_CreateImageAnnotationHint_Handler,
		},
		{
			MethodName: "ListImageAnnotationHints",
			Handler:    _Vision_ListImageAnnotationHints_Handler,
		},
		{
			MethodName: "GetImageAnnotationHint",
			Handler:    _Vision_GetImageAnnotationHint_Handler,
		},
		{
			MethodName: "UpdateImageAnnotationHint",
			Handler:    _Vision_UpdateImageAnnotationHint_Handler,
		},
		{
			MethodName: "DeleteImageAnnotationHint",
			Handler:    _Vision_DeleteImageAnnotationHint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/vision/v1alpha1/vision.proto",
}
