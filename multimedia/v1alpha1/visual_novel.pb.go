// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.1
// source: animeshon/multimedia/v1alpha1/visual_novel.proto

package multimedia

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/iam/v1"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	date "google.golang.org/genproto/googleapis/type/date"
	localized_text "google.golang.org/genproto/googleapis/type/localized_text"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VisualNovel_Type int32

const (
	// The default value. This value is used if the state is omitted.
	VisualNovel_TYPE_UNSPECIFIED VisualNovel_Type = 0
)

// Enum value maps for VisualNovel_Type.
var (
	VisualNovel_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
	}
	VisualNovel_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
	}
)

func (x VisualNovel_Type) Enum() *VisualNovel_Type {
	p := new(VisualNovel_Type)
	*p = x
	return p
}

func (x VisualNovel_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualNovel_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes[0].Descriptor()
}

func (VisualNovel_Type) Type() protoreflect.EnumType {
	return &file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes[0]
}

func (x VisualNovel_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualNovel_Type.Descriptor instead.
func (VisualNovel_Type) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{0, 0}
}

type VisualNovel_PlayLength int32

const (
	// The default value. This value is used if the state is omitted.
	VisualNovel_PLAY_LENGTH_UNSPECIFIED VisualNovel_PlayLength = 0
	VisualNovel_VERY_SHORT              VisualNovel_PlayLength = 1
	VisualNovel_SHORT                   VisualNovel_PlayLength = 2
	VisualNovel_MEDIUM                  VisualNovel_PlayLength = 3
	VisualNovel_LONG                    VisualNovel_PlayLength = 4
	VisualNovel_VERY_LONG               VisualNovel_PlayLength = 5
)

// Enum value maps for VisualNovel_PlayLength.
var (
	VisualNovel_PlayLength_name = map[int32]string{
		0: "PLAY_LENGTH_UNSPECIFIED",
		1: "VERY_SHORT",
		2: "SHORT",
		3: "MEDIUM",
		4: "LONG",
		5: "VERY_LONG",
	}
	VisualNovel_PlayLength_value = map[string]int32{
		"PLAY_LENGTH_UNSPECIFIED": 0,
		"VERY_SHORT":              1,
		"SHORT":                   2,
		"MEDIUM":                  3,
		"LONG":                    4,
		"VERY_LONG":               5,
	}
)

func (x VisualNovel_PlayLength) Enum() *VisualNovel_PlayLength {
	p := new(VisualNovel_PlayLength)
	*p = x
	return p
}

func (x VisualNovel_PlayLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualNovel_PlayLength) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes[1].Descriptor()
}

func (VisualNovel_PlayLength) Type() protoreflect.EnumType {
	return &file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes[1]
}

func (x VisualNovel_PlayLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualNovel_PlayLength.Descriptor instead.
func (VisualNovel_PlayLength) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{0, 1}
}

type VisualNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the visual novel.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The cover image of the visual novel.
	CoverImage string `protobuf:"bytes,2,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	// The banner image of the visual novel.
	BannerImage string `protobuf:"bytes,3,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	// The title of the visual novel localized in multiple languages.
	Title []*localized_text.LocalizedText `protobuf:"bytes,4,rep,name=title,proto3" json:"title,omitempty"`
	// The synopsis of the visual novel localized in multiple languages.
	Synopsis []*localized_text.LocalizedText `protobuf:"bytes,5,rep,name=synopsis,proto3" json:"synopsis,omitempty"`
	// The description of the visual novel localized in multiple languages.
	Description []*localized_text.LocalizedText `protobuf:"bytes,6,rep,name=description,proto3" json:"description,omitempty"`
	// The type of visual novel.
	Type VisualNovel_Type `protobuf:"varint,7,opt,name=type,proto3,enum=animeshon.multimedia.v1alpha1.VisualNovel_Type" json:"type,omitempty"`
	// The original release date of visual novel.
	ReleaseDate *date.Date `protobuf:"bytes,8,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// The original publishing type of this content.
	// TODO: migrate this field to a more structured licensing history.
	PublishingType PublishingType `protobuf:"varint,9,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.multimedia.v1alpha1.PublishingType" json:"publishing_type,omitempty"`
	// The current state of the light novel.
	State State `protobuf:"varint,10,opt,name=state,proto3,enum=animeshon.multimedia.v1alpha1.State" json:"state,omitempty"`
	// Whether this content is an original work or a derivative work (parody).
	Original bool `protobuf:"varint,11,opt,name=original,proto3" json:"original,omitempty"`
	// The average duration of the visual novel.
	Length VisualNovel_PlayLength `protobuf:"varint,12,opt,name=length,proto3,enum=animeshon.multimedia.v1alpha1.VisualNovel_PlayLength" json:"length,omitempty"`
}

func (x *VisualNovel) Reset() {
	*x = VisualNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualNovel) ProtoMessage() {}

func (x *VisualNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualNovel.ProtoReflect.Descriptor instead.
func (*VisualNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{0}
}

func (x *VisualNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VisualNovel) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *VisualNovel) GetBannerImage() string {
	if x != nil {
		return x.BannerImage
	}
	return ""
}

func (x *VisualNovel) GetTitle() []*localized_text.LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *VisualNovel) GetSynopsis() []*localized_text.LocalizedText {
	if x != nil {
		return x.Synopsis
	}
	return nil
}

func (x *VisualNovel) GetDescription() []*localized_text.LocalizedText {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *VisualNovel) GetType() VisualNovel_Type {
	if x != nil {
		return x.Type
	}
	return VisualNovel_TYPE_UNSPECIFIED
}

func (x *VisualNovel) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *VisualNovel) GetPublishingType() PublishingType {
	if x != nil {
		return x.PublishingType
	}
	return PublishingType_PUBLISHING_TYPE_UNSPECIFIED
}

func (x *VisualNovel) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *VisualNovel) GetOriginal() bool {
	if x != nil {
		return x.Original
	}
	return false
}

func (x *VisualNovel) GetLength() VisualNovel_PlayLength {
	if x != nil {
		return x.Length
	}
	return VisualNovel_PLAY_LENGTH_UNSPECIFIED
}

type GetVisualNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the visual novel to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVisualNovelRequest) Reset() {
	*x = GetVisualNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisualNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisualNovelRequest) ProtoMessage() {}

func (x *GetVisualNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisualNovelRequest.ProtoReflect.Descriptor instead.
func (*GetVisualNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{1}
}

func (x *GetVisualNovelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVisualNovelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListVisualNovelsRequest) Reset() {
	*x = ListVisualNovelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVisualNovelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVisualNovelsRequest) ProtoMessage() {}

func (x *ListVisualNovelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVisualNovelsRequest.ProtoReflect.Descriptor instead.
func (*ListVisualNovelsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{2}
}

func (x *ListVisualNovelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVisualNovelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListVisualNovelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListVisualNovelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of visual novels.
	VisualNovels []*VisualNovel `protobuf:"bytes,1,rep,name=visual_novels,json=visualNovels,proto3" json:"visual_novels,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVisualNovelsResponse) Reset() {
	*x = ListVisualNovelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVisualNovelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVisualNovelsResponse) ProtoMessage() {}

func (x *ListVisualNovelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVisualNovelsResponse.ProtoReflect.Descriptor instead.
func (*ListVisualNovelsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{3}
}

func (x *ListVisualNovelsResponse) GetVisualNovels() []*VisualNovel {
	if x != nil {
		return x.VisualNovels
	}
	return nil
}

func (x *ListVisualNovelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateVisualNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The visual novel to create.
	VisualNovel *VisualNovel `protobuf:"bytes,1,opt,name=visual_novel,json=visualNovel,proto3" json:"visual_novel,omitempty"`
	// An idempotent identifier to be used as static resource id.
	IdempotentResourceId int64 `protobuf:"varint,2,opt,name=idempotent_resource_id,json=idempotentResourceId,proto3" json:"idempotent_resource_id,omitempty"`
}

func (x *CreateVisualNovelRequest) Reset() {
	*x = CreateVisualNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVisualNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVisualNovelRequest) ProtoMessage() {}

func (x *CreateVisualNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVisualNovelRequest.ProtoReflect.Descriptor instead.
func (*CreateVisualNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{4}
}

func (x *CreateVisualNovelRequest) GetVisualNovel() *VisualNovel {
	if x != nil {
		return x.VisualNovel
	}
	return nil
}

func (x *CreateVisualNovelRequest) GetIdempotentResourceId() int64 {
	if x != nil {
		return x.IdempotentResourceId
	}
	return 0
}

type UpdateVisualNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The visual novel to update.
	VisualNovel *VisualNovel `protobuf:"bytes,1,opt,name=visual_novel,json=visualNovel,proto3" json:"visual_novel,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVisualNovelRequest) Reset() {
	*x = UpdateVisualNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVisualNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisualNovelRequest) ProtoMessage() {}

func (x *UpdateVisualNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisualNovelRequest.ProtoReflect.Descriptor instead.
func (*UpdateVisualNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateVisualNovelRequest) GetVisualNovel() *VisualNovel {
	if x != nil {
		return x.VisualNovel
	}
	return nil
}

func (x *UpdateVisualNovelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteVisualNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the visual novel to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVisualNovelRequest) Reset() {
	*x = DeleteVisualNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVisualNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVisualNovelRequest) ProtoMessage() {}

func (x *DeleteVisualNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVisualNovelRequest.ProtoReflect.Descriptor instead.
func (*DeleteVisualNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteVisualNovelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReconcileVisualNovelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the visual novel to reconcile.
	// Use the wildcard `visualNovels/-` to reconcile all visual novels.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReconcileVisualNovelsRequest) Reset() {
	*x = ReconcileVisualNovelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileVisualNovelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileVisualNovelsRequest) ProtoMessage() {}

func (x *ReconcileVisualNovelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileVisualNovelsRequest.ProtoReflect.Descriptor instead.
func (*ReconcileVisualNovelsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{7}
}

func (x *ReconcileVisualNovelsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReconcileVisualNovelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconcileVisualNovelsResponse) Reset() {
	*x = ReconcileVisualNovelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileVisualNovelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileVisualNovelsResponse) ProtoMessage() {}

func (x *ReconcileVisualNovelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileVisualNovelsResponse.ProtoReflect.Descriptor instead.
func (*ReconcileVisualNovelsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP(), []int{8}
}

var File_animeshon_multimedia_v1alpha1_visual_novel_proto protoreflect.FileDescriptor

var file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDesc = []byte{
	0x0a, 0x30, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x2a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x95, 0x06, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x56, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x4d, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x1c,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22, 0x69, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x33, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xb8, 0x08, 0x0a, 0x12, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x8d, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xde, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x32, 0x0a, 0x1d,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1b, 0xca, 0x41, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x88, 0x01,
	0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0xea, 0x02, 0x1f, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x3a, 0x3a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3a, 0x3a,
	0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescOnce sync.Once
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescData = file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDesc
)

func file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescGZIP() []byte {
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescOnce.Do(func() {
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescData)
	})
	return file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDescData
}

var file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_animeshon_multimedia_v1alpha1_visual_novel_proto_goTypes = []interface{}{
	(VisualNovel_Type)(0),                 // 0: animeshon.multimedia.v1alpha1.VisualNovel.Type
	(VisualNovel_PlayLength)(0),           // 1: animeshon.multimedia.v1alpha1.VisualNovel.PlayLength
	(*VisualNovel)(nil),                   // 2: animeshon.multimedia.v1alpha1.VisualNovel
	(*GetVisualNovelRequest)(nil),         // 3: animeshon.multimedia.v1alpha1.GetVisualNovelRequest
	(*ListVisualNovelsRequest)(nil),       // 4: animeshon.multimedia.v1alpha1.ListVisualNovelsRequest
	(*ListVisualNovelsResponse)(nil),      // 5: animeshon.multimedia.v1alpha1.ListVisualNovelsResponse
	(*CreateVisualNovelRequest)(nil),      // 6: animeshon.multimedia.v1alpha1.CreateVisualNovelRequest
	(*UpdateVisualNovelRequest)(nil),      // 7: animeshon.multimedia.v1alpha1.UpdateVisualNovelRequest
	(*DeleteVisualNovelRequest)(nil),      // 8: animeshon.multimedia.v1alpha1.DeleteVisualNovelRequest
	(*ReconcileVisualNovelsRequest)(nil),  // 9: animeshon.multimedia.v1alpha1.ReconcileVisualNovelsRequest
	(*ReconcileVisualNovelsResponse)(nil), // 10: animeshon.multimedia.v1alpha1.ReconcileVisualNovelsResponse
	(*localized_text.LocalizedText)(nil),  // 11: google.type.LocalizedText
	(*date.Date)(nil),                     // 12: google.type.Date
	(PublishingType)(0),                   // 13: animeshon.multimedia.v1alpha1.PublishingType
	(State)(0),                            // 14: animeshon.multimedia.v1alpha1.State
	(*fieldmaskpb.FieldMask)(nil),         // 15: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                 // 16: google.protobuf.Empty
	(*longrunning.Operation)(nil),         // 17: google.longrunning.Operation
}
var file_animeshon_multimedia_v1alpha1_visual_novel_proto_depIdxs = []int32{
	11, // 0: animeshon.multimedia.v1alpha1.VisualNovel.title:type_name -> google.type.LocalizedText
	11, // 1: animeshon.multimedia.v1alpha1.VisualNovel.synopsis:type_name -> google.type.LocalizedText
	11, // 2: animeshon.multimedia.v1alpha1.VisualNovel.description:type_name -> google.type.LocalizedText
	0,  // 3: animeshon.multimedia.v1alpha1.VisualNovel.type:type_name -> animeshon.multimedia.v1alpha1.VisualNovel.Type
	12, // 4: animeshon.multimedia.v1alpha1.VisualNovel.release_date:type_name -> google.type.Date
	13, // 5: animeshon.multimedia.v1alpha1.VisualNovel.publishing_type:type_name -> animeshon.multimedia.v1alpha1.PublishingType
	14, // 6: animeshon.multimedia.v1alpha1.VisualNovel.state:type_name -> animeshon.multimedia.v1alpha1.State
	1,  // 7: animeshon.multimedia.v1alpha1.VisualNovel.length:type_name -> animeshon.multimedia.v1alpha1.VisualNovel.PlayLength
	2,  // 8: animeshon.multimedia.v1alpha1.ListVisualNovelsResponse.visual_novels:type_name -> animeshon.multimedia.v1alpha1.VisualNovel
	2,  // 9: animeshon.multimedia.v1alpha1.CreateVisualNovelRequest.visual_novel:type_name -> animeshon.multimedia.v1alpha1.VisualNovel
	2,  // 10: animeshon.multimedia.v1alpha1.UpdateVisualNovelRequest.visual_novel:type_name -> animeshon.multimedia.v1alpha1.VisualNovel
	15, // 11: animeshon.multimedia.v1alpha1.UpdateVisualNovelRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 12: animeshon.multimedia.v1alpha1.VisualNovelService.GetVisualNovel:input_type -> animeshon.multimedia.v1alpha1.GetVisualNovelRequest
	4,  // 13: animeshon.multimedia.v1alpha1.VisualNovelService.ListVisualNovels:input_type -> animeshon.multimedia.v1alpha1.ListVisualNovelsRequest
	6,  // 14: animeshon.multimedia.v1alpha1.VisualNovelService.CreateVisualNovel:input_type -> animeshon.multimedia.v1alpha1.CreateVisualNovelRequest
	7,  // 15: animeshon.multimedia.v1alpha1.VisualNovelService.UpdateVisualNovel:input_type -> animeshon.multimedia.v1alpha1.UpdateVisualNovelRequest
	8,  // 16: animeshon.multimedia.v1alpha1.VisualNovelService.DeleteVisualNovel:input_type -> animeshon.multimedia.v1alpha1.DeleteVisualNovelRequest
	9,  // 17: animeshon.multimedia.v1alpha1.VisualNovelService.ReconcileVisualNovels:input_type -> animeshon.multimedia.v1alpha1.ReconcileVisualNovelsRequest
	2,  // 18: animeshon.multimedia.v1alpha1.VisualNovelService.GetVisualNovel:output_type -> animeshon.multimedia.v1alpha1.VisualNovel
	5,  // 19: animeshon.multimedia.v1alpha1.VisualNovelService.ListVisualNovels:output_type -> animeshon.multimedia.v1alpha1.ListVisualNovelsResponse
	2,  // 20: animeshon.multimedia.v1alpha1.VisualNovelService.CreateVisualNovel:output_type -> animeshon.multimedia.v1alpha1.VisualNovel
	2,  // 21: animeshon.multimedia.v1alpha1.VisualNovelService.UpdateVisualNovel:output_type -> animeshon.multimedia.v1alpha1.VisualNovel
	16, // 22: animeshon.multimedia.v1alpha1.VisualNovelService.DeleteVisualNovel:output_type -> google.protobuf.Empty
	17, // 23: animeshon.multimedia.v1alpha1.VisualNovelService.ReconcileVisualNovels:output_type -> google.longrunning.Operation
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_animeshon_multimedia_v1alpha1_visual_novel_proto_init() }
func file_animeshon_multimedia_v1alpha1_visual_novel_proto_init() {
	if File_animeshon_multimedia_v1alpha1_visual_novel_proto != nil {
		return
	}
	file_animeshon_multimedia_v1alpha1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisualNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisualNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVisualNovelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVisualNovelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVisualNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVisualNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVisualNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileVisualNovelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileVisualNovelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_multimedia_v1alpha1_visual_novel_proto_goTypes,
		DependencyIndexes: file_animeshon_multimedia_v1alpha1_visual_novel_proto_depIdxs,
		EnumInfos:         file_animeshon_multimedia_v1alpha1_visual_novel_proto_enumTypes,
		MessageInfos:      file_animeshon_multimedia_v1alpha1_visual_novel_proto_msgTypes,
	}.Build()
	File_animeshon_multimedia_v1alpha1_visual_novel_proto = out.File
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_rawDesc = nil
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_goTypes = nil
	file_animeshon_multimedia_v1alpha1_visual_novel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VisualNovelServiceClient is the client API for VisualNovelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisualNovelServiceClient interface {
	GetVisualNovel(ctx context.Context, in *GetVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error)
	ListVisualNovels(ctx context.Context, in *ListVisualNovelsRequest, opts ...grpc.CallOption) (*ListVisualNovelsResponse, error)
	CreateVisualNovel(ctx context.Context, in *CreateVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error)
	UpdateVisualNovel(ctx context.Context, in *UpdateVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error)
	DeleteVisualNovel(ctx context.Context, in *DeleteVisualNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reconcile visual novels with the search and knowledge base.
	ReconcileVisualNovels(ctx context.Context, in *ReconcileVisualNovelsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type visualNovelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisualNovelServiceClient(cc grpc.ClientConnInterface) VisualNovelServiceClient {
	return &visualNovelServiceClient{cc}
}

func (c *visualNovelServiceClient) GetVisualNovel(ctx context.Context, in *GetVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error) {
	out := new(VisualNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/GetVisualNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualNovelServiceClient) ListVisualNovels(ctx context.Context, in *ListVisualNovelsRequest, opts ...grpc.CallOption) (*ListVisualNovelsResponse, error) {
	out := new(ListVisualNovelsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/ListVisualNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualNovelServiceClient) CreateVisualNovel(ctx context.Context, in *CreateVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error) {
	out := new(VisualNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/CreateVisualNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualNovelServiceClient) UpdateVisualNovel(ctx context.Context, in *UpdateVisualNovelRequest, opts ...grpc.CallOption) (*VisualNovel, error) {
	out := new(VisualNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/UpdateVisualNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualNovelServiceClient) DeleteVisualNovel(ctx context.Context, in *DeleteVisualNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/DeleteVisualNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualNovelServiceClient) ReconcileVisualNovels(ctx context.Context, in *ReconcileVisualNovelsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.VisualNovelService/ReconcileVisualNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisualNovelServiceServer is the server API for VisualNovelService service.
type VisualNovelServiceServer interface {
	GetVisualNovel(context.Context, *GetVisualNovelRequest) (*VisualNovel, error)
	ListVisualNovels(context.Context, *ListVisualNovelsRequest) (*ListVisualNovelsResponse, error)
	CreateVisualNovel(context.Context, *CreateVisualNovelRequest) (*VisualNovel, error)
	UpdateVisualNovel(context.Context, *UpdateVisualNovelRequest) (*VisualNovel, error)
	DeleteVisualNovel(context.Context, *DeleteVisualNovelRequest) (*emptypb.Empty, error)
	// Reconcile visual novels with the search and knowledge base.
	ReconcileVisualNovels(context.Context, *ReconcileVisualNovelsRequest) (*longrunning.Operation, error)
}

// UnimplementedVisualNovelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVisualNovelServiceServer struct {
}

func (*UnimplementedVisualNovelServiceServer) GetVisualNovel(context.Context, *GetVisualNovelRequest) (*VisualNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisualNovel not implemented")
}
func (*UnimplementedVisualNovelServiceServer) ListVisualNovels(context.Context, *ListVisualNovelsRequest) (*ListVisualNovelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisualNovels not implemented")
}
func (*UnimplementedVisualNovelServiceServer) CreateVisualNovel(context.Context, *CreateVisualNovelRequest) (*VisualNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVisualNovel not implemented")
}
func (*UnimplementedVisualNovelServiceServer) UpdateVisualNovel(context.Context, *UpdateVisualNovelRequest) (*VisualNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisualNovel not implemented")
}
func (*UnimplementedVisualNovelServiceServer) DeleteVisualNovel(context.Context, *DeleteVisualNovelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVisualNovel not implemented")
}
func (*UnimplementedVisualNovelServiceServer) ReconcileVisualNovels(context.Context, *ReconcileVisualNovelsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconcileVisualNovels not implemented")
}

func RegisterVisualNovelServiceServer(s *grpc.Server, srv VisualNovelServiceServer) {
	s.RegisterService(&_VisualNovelService_serviceDesc, srv)
}

func _VisualNovelService_GetVisualNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisualNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).GetVisualNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/GetVisualNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).GetVisualNovel(ctx, req.(*GetVisualNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisualNovelService_ListVisualNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisualNovelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).ListVisualNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/ListVisualNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).ListVisualNovels(ctx, req.(*ListVisualNovelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisualNovelService_CreateVisualNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisualNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).CreateVisualNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/CreateVisualNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).CreateVisualNovel(ctx, req.(*CreateVisualNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisualNovelService_UpdateVisualNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisualNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).UpdateVisualNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/UpdateVisualNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).UpdateVisualNovel(ctx, req.(*UpdateVisualNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisualNovelService_DeleteVisualNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVisualNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).DeleteVisualNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/DeleteVisualNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).DeleteVisualNovel(ctx, req.(*DeleteVisualNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisualNovelService_ReconcileVisualNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileVisualNovelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualNovelServiceServer).ReconcileVisualNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.VisualNovelService/ReconcileVisualNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualNovelServiceServer).ReconcileVisualNovels(ctx, req.(*ReconcileVisualNovelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisualNovelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.multimedia.v1alpha1.VisualNovelService",
	HandlerType: (*VisualNovelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVisualNovel",
			Handler:    _VisualNovelService_GetVisualNovel_Handler,
		},
		{
			MethodName: "ListVisualNovels",
			Handler:    _VisualNovelService_ListVisualNovels_Handler,
		},
		{
			MethodName: "CreateVisualNovel",
			Handler:    _VisualNovelService_CreateVisualNovel_Handler,
		},
		{
			MethodName: "UpdateVisualNovel",
			Handler:    _VisualNovelService_UpdateVisualNovel_Handler,
		},
		{
			MethodName: "DeleteVisualNovel",
			Handler:    _VisualNovelService_DeleteVisualNovel_Handler,
		},
		{
			MethodName: "ReconcileVisualNovels",
			Handler:    _VisualNovelService_ReconcileVisualNovels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/multimedia/v1alpha1/visual_novel.proto",
}
