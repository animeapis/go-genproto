// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.1
// source: animeshon/multimedia/v1alpha1/graphic_novel.proto

package multimedia

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/iam/v1"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	date "google.golang.org/genproto/googleapis/type/date"
	localized_text "google.golang.org/genproto/googleapis/type/localized_text"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GraphicNovel_Type int32

const (
	// The default value. This value is used if the state is omitted.
	GraphicNovel_TYPE_UNSPECIFIED GraphicNovel_Type = 0
	GraphicNovel_MANGA            GraphicNovel_Type = 1
	GraphicNovel_ONE_SHOT         GraphicNovel_Type = 2
	GraphicNovel_MANHUA           GraphicNovel_Type = 3
	GraphicNovel_MANHWA           GraphicNovel_Type = 4
	GraphicNovel_OEL              GraphicNovel_Type = 5
	GraphicNovel_WEB_COMIC        GraphicNovel_Type = 6
	GraphicNovel_YON_KOMA         GraphicNovel_Type = 7
	GraphicNovel_OTHER            GraphicNovel_Type = 8
)

// Enum value maps for GraphicNovel_Type.
var (
	GraphicNovel_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "MANGA",
		2: "ONE_SHOT",
		3: "MANHUA",
		4: "MANHWA",
		5: "OEL",
		6: "WEB_COMIC",
		7: "YON_KOMA",
		8: "OTHER",
	}
	GraphicNovel_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"MANGA":            1,
		"ONE_SHOT":         2,
		"MANHUA":           3,
		"MANHWA":           4,
		"OEL":              5,
		"WEB_COMIC":        6,
		"YON_KOMA":         7,
		"OTHER":            8,
	}
)

func (x GraphicNovel_Type) Enum() *GraphicNovel_Type {
	p := new(GraphicNovel_Type)
	*p = x
	return p
}

func (x GraphicNovel_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphicNovel_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_enumTypes[0].Descriptor()
}

func (GraphicNovel_Type) Type() protoreflect.EnumType {
	return &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_enumTypes[0]
}

func (x GraphicNovel_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphicNovel_Type.Descriptor instead.
func (GraphicNovel_Type) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{0, 0}
}

type GraphicNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the graphic novel.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The idempotent unique knowledge base identifier of the anime.
	KnowledgeBaseResourceName string `protobuf:"bytes,2,opt,name=knowledge_base_resource_name,json=knowledgeBaseResourceName,proto3" json:"knowledge_base_resource_name,omitempty"`
	// The cover image of the graphic novel.
	CoverImage string `protobuf:"bytes,3,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	// The banner image of the graphic novel.
	BannerImage string `protobuf:"bytes,4,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	// The title of the graphic novel localized in multiple languages.
	Title []*localized_text.LocalizedText `protobuf:"bytes,5,rep,name=title,proto3" json:"title,omitempty"`
	// The synopsis of the graphic novel localized in multiple languages.
	Synopsis []*localized_text.LocalizedText `protobuf:"bytes,6,rep,name=synopsis,proto3" json:"synopsis,omitempty"`
	// The description of the graphic novel localized in multiple languages.
	Description []*localized_text.LocalizedText `protobuf:"bytes,7,rep,name=description,proto3" json:"description,omitempty"`
	// The type of graphic novel.
	Type GraphicNovel_Type `protobuf:"varint,8,opt,name=type,proto3,enum=animeshon.multimedia.v1alpha1.GraphicNovel_Type" json:"type,omitempty"`
	// The original release date of graphic novel.
	ReleaseDate *date.Date `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// The original publishing type of this content.
	// TODO: migrate this field to a more structured licensing history.
	PublishingType PublishingType `protobuf:"varint,10,opt,name=publishing_type,json=publishingType,proto3,enum=animeshon.multimedia.v1alpha1.PublishingType" json:"publishing_type,omitempty"`
	// The current state of the graphic novel.
	State State `protobuf:"varint,11,opt,name=state,proto3,enum=animeshon.multimedia.v1alpha1.State" json:"state,omitempty"`
	// Whether this content is an original work or a derivative work (parody).
	Original bool `protobuf:"varint,12,opt,name=original,proto3" json:"original,omitempty"`
}

func (x *GraphicNovel) Reset() {
	*x = GraphicNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicNovel) ProtoMessage() {}

func (x *GraphicNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicNovel.ProtoReflect.Descriptor instead.
func (*GraphicNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{0}
}

func (x *GraphicNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphicNovel) GetKnowledgeBaseResourceName() string {
	if x != nil {
		return x.KnowledgeBaseResourceName
	}
	return ""
}

func (x *GraphicNovel) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *GraphicNovel) GetBannerImage() string {
	if x != nil {
		return x.BannerImage
	}
	return ""
}

func (x *GraphicNovel) GetTitle() []*localized_text.LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *GraphicNovel) GetSynopsis() []*localized_text.LocalizedText {
	if x != nil {
		return x.Synopsis
	}
	return nil
}

func (x *GraphicNovel) GetDescription() []*localized_text.LocalizedText {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GraphicNovel) GetType() GraphicNovel_Type {
	if x != nil {
		return x.Type
	}
	return GraphicNovel_TYPE_UNSPECIFIED
}

func (x *GraphicNovel) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *GraphicNovel) GetPublishingType() PublishingType {
	if x != nil {
		return x.PublishingType
	}
	return PublishingType_PUBLISHING_TYPE_UNSPECIFIED
}

func (x *GraphicNovel) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *GraphicNovel) GetOriginal() bool {
	if x != nil {
		return x.Original
	}
	return false
}

type GetGraphicNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the graphic novel to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetGraphicNovelRequest) Reset() {
	*x = GetGraphicNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGraphicNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphicNovelRequest) ProtoMessage() {}

func (x *GetGraphicNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphicNovelRequest.ProtoReflect.Descriptor instead.
func (*GetGraphicNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{1}
}

func (x *GetGraphicNovelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListGraphicNovelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListGraphicNovelsRequest) Reset() {
	*x = ListGraphicNovelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGraphicNovelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGraphicNovelsRequest) ProtoMessage() {}

func (x *ListGraphicNovelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGraphicNovelsRequest.ProtoReflect.Descriptor instead.
func (*ListGraphicNovelsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{2}
}

func (x *ListGraphicNovelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGraphicNovelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListGraphicNovelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListGraphicNovelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of graphic novels.
	GraphicNovels []*GraphicNovel `protobuf:"bytes,1,rep,name=graphic_novels,json=graphicNovels,proto3" json:"graphic_novels,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListGraphicNovelsResponse) Reset() {
	*x = ListGraphicNovelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGraphicNovelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGraphicNovelsResponse) ProtoMessage() {}

func (x *ListGraphicNovelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGraphicNovelsResponse.ProtoReflect.Descriptor instead.
func (*ListGraphicNovelsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{3}
}

func (x *ListGraphicNovelsResponse) GetGraphicNovels() []*GraphicNovel {
	if x != nil {
		return x.GraphicNovels
	}
	return nil
}

func (x *ListGraphicNovelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateGraphicNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graphic novel to create.
	GraphicNovel *GraphicNovel `protobuf:"bytes,1,opt,name=graphic_novel,json=graphicNovel,proto3" json:"graphic_novel,omitempty"`
}

func (x *CreateGraphicNovelRequest) Reset() {
	*x = CreateGraphicNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGraphicNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGraphicNovelRequest) ProtoMessage() {}

func (x *CreateGraphicNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGraphicNovelRequest.ProtoReflect.Descriptor instead.
func (*CreateGraphicNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGraphicNovelRequest) GetGraphicNovel() *GraphicNovel {
	if x != nil {
		return x.GraphicNovel
	}
	return nil
}

type UpdateGraphicNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graphic novel to update.
	GraphicNovel *GraphicNovel `protobuf:"bytes,1,opt,name=graphic_novel,json=graphicNovel,proto3" json:"graphic_novel,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateGraphicNovelRequest) Reset() {
	*x = UpdateGraphicNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGraphicNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGraphicNovelRequest) ProtoMessage() {}

func (x *UpdateGraphicNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGraphicNovelRequest.ProtoReflect.Descriptor instead.
func (*UpdateGraphicNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateGraphicNovelRequest) GetGraphicNovel() *GraphicNovel {
	if x != nil {
		return x.GraphicNovel
	}
	return nil
}

func (x *UpdateGraphicNovelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteGraphicNovelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the graphic novel to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteGraphicNovelRequest) Reset() {
	*x = DeleteGraphicNovelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGraphicNovelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGraphicNovelRequest) ProtoMessage() {}

func (x *DeleteGraphicNovelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGraphicNovelRequest.ProtoReflect.Descriptor instead.
func (*DeleteGraphicNovelRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteGraphicNovelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReconcileGraphicNovelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the graphic novel to reconcile.
	// Use the wildcard `graphicNovels/-` to reconcile all graphic novels.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReconcileGraphicNovelsRequest) Reset() {
	*x = ReconcileGraphicNovelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileGraphicNovelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileGraphicNovelsRequest) ProtoMessage() {}

func (x *ReconcileGraphicNovelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileGraphicNovelsRequest.ProtoReflect.Descriptor instead.
func (*ReconcileGraphicNovelsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{7}
}

func (x *ReconcileGraphicNovelsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReconcileGraphicNovelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconcileGraphicNovelsResponse) Reset() {
	*x = ReconcileGraphicNovelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileGraphicNovelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileGraphicNovelsResponse) ProtoMessage() {}

func (x *ReconcileGraphicNovelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileGraphicNovelsResponse.ProtoReflect.Descriptor instead.
func (*ReconcileGraphicNovelsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP(), []int{8}
}

var File_animeshon_multimedia_v1alpha1_graphic_novel_proto protoreflect.FileDescriptor

var file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDesc = []byte{
	0x0a, 0x31, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x2a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x85, 0x06, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73,
	0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x3c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4e, 0x47, 0x41, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x48, 0x55, 0x41, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x4e, 0x48, 0x57, 0x41, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x45, 0x4c, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x49, 0x43, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x4e, 0x5f, 0x4b, 0x4f, 0x4d, 0x41, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x22, 0x31, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x34, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd1, 0x08,
	0x0a, 0x13, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x37, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x32, 0x2e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xe2, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22,
	0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xca, 0x41,
	0x33, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0xca, 0x41, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x42, 0x88, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0xea, 0x02, 0x1f, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x3a, 0x3a, 0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescOnce sync.Once
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescData = file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDesc
)

func file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescGZIP() []byte {
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescOnce.Do(func() {
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescData)
	})
	return file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDescData
}

var file_animeshon_multimedia_v1alpha1_graphic_novel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_animeshon_multimedia_v1alpha1_graphic_novel_proto_goTypes = []interface{}{
	(GraphicNovel_Type)(0),                 // 0: animeshon.multimedia.v1alpha1.GraphicNovel.Type
	(*GraphicNovel)(nil),                   // 1: animeshon.multimedia.v1alpha1.GraphicNovel
	(*GetGraphicNovelRequest)(nil),         // 2: animeshon.multimedia.v1alpha1.GetGraphicNovelRequest
	(*ListGraphicNovelsRequest)(nil),       // 3: animeshon.multimedia.v1alpha1.ListGraphicNovelsRequest
	(*ListGraphicNovelsResponse)(nil),      // 4: animeshon.multimedia.v1alpha1.ListGraphicNovelsResponse
	(*CreateGraphicNovelRequest)(nil),      // 5: animeshon.multimedia.v1alpha1.CreateGraphicNovelRequest
	(*UpdateGraphicNovelRequest)(nil),      // 6: animeshon.multimedia.v1alpha1.UpdateGraphicNovelRequest
	(*DeleteGraphicNovelRequest)(nil),      // 7: animeshon.multimedia.v1alpha1.DeleteGraphicNovelRequest
	(*ReconcileGraphicNovelsRequest)(nil),  // 8: animeshon.multimedia.v1alpha1.ReconcileGraphicNovelsRequest
	(*ReconcileGraphicNovelsResponse)(nil), // 9: animeshon.multimedia.v1alpha1.ReconcileGraphicNovelsResponse
	(*localized_text.LocalizedText)(nil),   // 10: google.type.LocalizedText
	(*date.Date)(nil),                      // 11: google.type.Date
	(PublishingType)(0),                    // 12: animeshon.multimedia.v1alpha1.PublishingType
	(State)(0),                             // 13: animeshon.multimedia.v1alpha1.State
	(*fieldmaskpb.FieldMask)(nil),          // 14: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                  // 15: google.protobuf.Empty
	(*longrunning.Operation)(nil),          // 16: google.longrunning.Operation
}
var file_animeshon_multimedia_v1alpha1_graphic_novel_proto_depIdxs = []int32{
	10, // 0: animeshon.multimedia.v1alpha1.GraphicNovel.title:type_name -> google.type.LocalizedText
	10, // 1: animeshon.multimedia.v1alpha1.GraphicNovel.synopsis:type_name -> google.type.LocalizedText
	10, // 2: animeshon.multimedia.v1alpha1.GraphicNovel.description:type_name -> google.type.LocalizedText
	0,  // 3: animeshon.multimedia.v1alpha1.GraphicNovel.type:type_name -> animeshon.multimedia.v1alpha1.GraphicNovel.Type
	11, // 4: animeshon.multimedia.v1alpha1.GraphicNovel.release_date:type_name -> google.type.Date
	12, // 5: animeshon.multimedia.v1alpha1.GraphicNovel.publishing_type:type_name -> animeshon.multimedia.v1alpha1.PublishingType
	13, // 6: animeshon.multimedia.v1alpha1.GraphicNovel.state:type_name -> animeshon.multimedia.v1alpha1.State
	1,  // 7: animeshon.multimedia.v1alpha1.ListGraphicNovelsResponse.graphic_novels:type_name -> animeshon.multimedia.v1alpha1.GraphicNovel
	1,  // 8: animeshon.multimedia.v1alpha1.CreateGraphicNovelRequest.graphic_novel:type_name -> animeshon.multimedia.v1alpha1.GraphicNovel
	1,  // 9: animeshon.multimedia.v1alpha1.UpdateGraphicNovelRequest.graphic_novel:type_name -> animeshon.multimedia.v1alpha1.GraphicNovel
	14, // 10: animeshon.multimedia.v1alpha1.UpdateGraphicNovelRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 11: animeshon.multimedia.v1alpha1.GraphicNovelService.GetGraphicNovel:input_type -> animeshon.multimedia.v1alpha1.GetGraphicNovelRequest
	3,  // 12: animeshon.multimedia.v1alpha1.GraphicNovelService.ListGraphicNovels:input_type -> animeshon.multimedia.v1alpha1.ListGraphicNovelsRequest
	5,  // 13: animeshon.multimedia.v1alpha1.GraphicNovelService.CreateGraphicNovel:input_type -> animeshon.multimedia.v1alpha1.CreateGraphicNovelRequest
	6,  // 14: animeshon.multimedia.v1alpha1.GraphicNovelService.UpdateGraphicNovel:input_type -> animeshon.multimedia.v1alpha1.UpdateGraphicNovelRequest
	7,  // 15: animeshon.multimedia.v1alpha1.GraphicNovelService.DeleteGraphicNovel:input_type -> animeshon.multimedia.v1alpha1.DeleteGraphicNovelRequest
	8,  // 16: animeshon.multimedia.v1alpha1.GraphicNovelService.ReconcileGraphicNovels:input_type -> animeshon.multimedia.v1alpha1.ReconcileGraphicNovelsRequest
	1,  // 17: animeshon.multimedia.v1alpha1.GraphicNovelService.GetGraphicNovel:output_type -> animeshon.multimedia.v1alpha1.GraphicNovel
	4,  // 18: animeshon.multimedia.v1alpha1.GraphicNovelService.ListGraphicNovels:output_type -> animeshon.multimedia.v1alpha1.ListGraphicNovelsResponse
	1,  // 19: animeshon.multimedia.v1alpha1.GraphicNovelService.CreateGraphicNovel:output_type -> animeshon.multimedia.v1alpha1.GraphicNovel
	1,  // 20: animeshon.multimedia.v1alpha1.GraphicNovelService.UpdateGraphicNovel:output_type -> animeshon.multimedia.v1alpha1.GraphicNovel
	15, // 21: animeshon.multimedia.v1alpha1.GraphicNovelService.DeleteGraphicNovel:output_type -> google.protobuf.Empty
	16, // 22: animeshon.multimedia.v1alpha1.GraphicNovelService.ReconcileGraphicNovels:output_type -> google.longrunning.Operation
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_animeshon_multimedia_v1alpha1_graphic_novel_proto_init() }
func file_animeshon_multimedia_v1alpha1_graphic_novel_proto_init() {
	if File_animeshon_multimedia_v1alpha1_graphic_novel_proto != nil {
		return
	}
	file_animeshon_multimedia_v1alpha1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGraphicNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGraphicNovelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGraphicNovelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGraphicNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGraphicNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGraphicNovelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileGraphicNovelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileGraphicNovelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_multimedia_v1alpha1_graphic_novel_proto_goTypes,
		DependencyIndexes: file_animeshon_multimedia_v1alpha1_graphic_novel_proto_depIdxs,
		EnumInfos:         file_animeshon_multimedia_v1alpha1_graphic_novel_proto_enumTypes,
		MessageInfos:      file_animeshon_multimedia_v1alpha1_graphic_novel_proto_msgTypes,
	}.Build()
	File_animeshon_multimedia_v1alpha1_graphic_novel_proto = out.File
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_rawDesc = nil
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_goTypes = nil
	file_animeshon_multimedia_v1alpha1_graphic_novel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphicNovelServiceClient is the client API for GraphicNovelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphicNovelServiceClient interface {
	GetGraphicNovel(ctx context.Context, in *GetGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error)
	ListGraphicNovels(ctx context.Context, in *ListGraphicNovelsRequest, opts ...grpc.CallOption) (*ListGraphicNovelsResponse, error)
	CreateGraphicNovel(ctx context.Context, in *CreateGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error)
	UpdateGraphicNovel(ctx context.Context, in *UpdateGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error)
	DeleteGraphicNovel(ctx context.Context, in *DeleteGraphicNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reconcile graphic novels with the search and knowledge base.
	ReconcileGraphicNovels(ctx context.Context, in *ReconcileGraphicNovelsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type graphicNovelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphicNovelServiceClient(cc grpc.ClientConnInterface) GraphicNovelServiceClient {
	return &graphicNovelServiceClient{cc}
}

func (c *graphicNovelServiceClient) GetGraphicNovel(ctx context.Context, in *GetGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error) {
	out := new(GraphicNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/GetGraphicNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphicNovelServiceClient) ListGraphicNovels(ctx context.Context, in *ListGraphicNovelsRequest, opts ...grpc.CallOption) (*ListGraphicNovelsResponse, error) {
	out := new(ListGraphicNovelsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/ListGraphicNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphicNovelServiceClient) CreateGraphicNovel(ctx context.Context, in *CreateGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error) {
	out := new(GraphicNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/CreateGraphicNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphicNovelServiceClient) UpdateGraphicNovel(ctx context.Context, in *UpdateGraphicNovelRequest, opts ...grpc.CallOption) (*GraphicNovel, error) {
	out := new(GraphicNovel)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/UpdateGraphicNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphicNovelServiceClient) DeleteGraphicNovel(ctx context.Context, in *DeleteGraphicNovelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/DeleteGraphicNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphicNovelServiceClient) ReconcileGraphicNovels(ctx context.Context, in *ReconcileGraphicNovelsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.GraphicNovelService/ReconcileGraphicNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphicNovelServiceServer is the server API for GraphicNovelService service.
type GraphicNovelServiceServer interface {
	GetGraphicNovel(context.Context, *GetGraphicNovelRequest) (*GraphicNovel, error)
	ListGraphicNovels(context.Context, *ListGraphicNovelsRequest) (*ListGraphicNovelsResponse, error)
	CreateGraphicNovel(context.Context, *CreateGraphicNovelRequest) (*GraphicNovel, error)
	UpdateGraphicNovel(context.Context, *UpdateGraphicNovelRequest) (*GraphicNovel, error)
	DeleteGraphicNovel(context.Context, *DeleteGraphicNovelRequest) (*emptypb.Empty, error)
	// Reconcile graphic novels with the search and knowledge base.
	ReconcileGraphicNovels(context.Context, *ReconcileGraphicNovelsRequest) (*longrunning.Operation, error)
}

// UnimplementedGraphicNovelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGraphicNovelServiceServer struct {
}

func (*UnimplementedGraphicNovelServiceServer) GetGraphicNovel(context.Context, *GetGraphicNovelRequest) (*GraphicNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraphicNovel not implemented")
}
func (*UnimplementedGraphicNovelServiceServer) ListGraphicNovels(context.Context, *ListGraphicNovelsRequest) (*ListGraphicNovelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGraphicNovels not implemented")
}
func (*UnimplementedGraphicNovelServiceServer) CreateGraphicNovel(context.Context, *CreateGraphicNovelRequest) (*GraphicNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGraphicNovel not implemented")
}
func (*UnimplementedGraphicNovelServiceServer) UpdateGraphicNovel(context.Context, *UpdateGraphicNovelRequest) (*GraphicNovel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGraphicNovel not implemented")
}
func (*UnimplementedGraphicNovelServiceServer) DeleteGraphicNovel(context.Context, *DeleteGraphicNovelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGraphicNovel not implemented")
}
func (*UnimplementedGraphicNovelServiceServer) ReconcileGraphicNovels(context.Context, *ReconcileGraphicNovelsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconcileGraphicNovels not implemented")
}

func RegisterGraphicNovelServiceServer(s *grpc.Server, srv GraphicNovelServiceServer) {
	s.RegisterService(&_GraphicNovelService_serviceDesc, srv)
}

func _GraphicNovelService_GetGraphicNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphicNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).GetGraphicNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/GetGraphicNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).GetGraphicNovel(ctx, req.(*GetGraphicNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphicNovelService_ListGraphicNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGraphicNovelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).ListGraphicNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/ListGraphicNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).ListGraphicNovels(ctx, req.(*ListGraphicNovelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphicNovelService_CreateGraphicNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGraphicNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).CreateGraphicNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/CreateGraphicNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).CreateGraphicNovel(ctx, req.(*CreateGraphicNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphicNovelService_UpdateGraphicNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGraphicNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).UpdateGraphicNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/UpdateGraphicNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).UpdateGraphicNovel(ctx, req.(*UpdateGraphicNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphicNovelService_DeleteGraphicNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGraphicNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).DeleteGraphicNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/DeleteGraphicNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).DeleteGraphicNovel(ctx, req.(*DeleteGraphicNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphicNovelService_ReconcileGraphicNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileGraphicNovelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphicNovelServiceServer).ReconcileGraphicNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.GraphicNovelService/ReconcileGraphicNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphicNovelServiceServer).ReconcileGraphicNovels(ctx, req.(*ReconcileGraphicNovelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphicNovelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.multimedia.v1alpha1.GraphicNovelService",
	HandlerType: (*GraphicNovelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGraphicNovel",
			Handler:    _GraphicNovelService_GetGraphicNovel_Handler,
		},
		{
			MethodName: "ListGraphicNovels",
			Handler:    _GraphicNovelService_ListGraphicNovels_Handler,
		},
		{
			MethodName: "CreateGraphicNovel",
			Handler:    _GraphicNovelService_CreateGraphicNovel_Handler,
		},
		{
			MethodName: "UpdateGraphicNovel",
			Handler:    _GraphicNovelService_UpdateGraphicNovel_Handler,
		},
		{
			MethodName: "DeleteGraphicNovel",
			Handler:    _GraphicNovelService_DeleteGraphicNovel_Handler,
		},
		{
			MethodName: "ReconcileGraphicNovels",
			Handler:    _GraphicNovelService_ReconcileGraphicNovels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/multimedia/v1alpha1/graphic_novel.proto",
}
