// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: animeshon/image/v1alpha1/image.proto

package image

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	_ "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The folder resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{0}
}

func (x *Folder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FolderSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The folder resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The bucket where to store resources.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Whether the folder is system managed.
	SystemManaged bool `protobuf:"varint,3,opt,name=system_managed,json=systemManaged,proto3" json:"system_managed,omitempty"`
	// Whether images in this folder show up in the search engine results.
	EnableSearch bool `protobuf:"varint,4,opt,name=enable_search,json=enableSearch,proto3" json:"enable_search,omitempty"`
	// Whether images in this folder can be annotated.
	EnableAnnotation bool `protobuf:"varint,5,opt,name=enable_annotation,json=enableAnnotation,proto3" json:"enable_annotation,omitempty"`
	// Whether images in this folder must be client-side encrypted.
	EnableEncryption bool `protobuf:"varint,6,opt,name=enable_encryption,json=enableEncryption,proto3" json:"enable_encryption,omitempty"`
	// Whether the content of this folder is highly visible by the public such as
	// profile pictures and banners. Highly visible folders *cannot* contain
	// sensitive or adult images.
	HighVisibility bool `protobuf:"varint,7,opt,name=high_visibility,json=highVisibility,proto3" json:"high_visibility,omitempty"`
}

func (x *FolderSettings) Reset() {
	*x = FolderSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderSettings) ProtoMessage() {}

func (x *FolderSettings) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderSettings.ProtoReflect.Descriptor instead.
func (*FolderSettings) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{1}
}

func (x *FolderSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FolderSettings) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *FolderSettings) GetSystemManaged() bool {
	if x != nil {
		return x.SystemManaged
	}
	return false
}

func (x *FolderSettings) GetEnableSearch() bool {
	if x != nil {
		return x.EnableSearch
	}
	return false
}

func (x *FolderSettings) GetEnableAnnotation() bool {
	if x != nil {
		return x.EnableAnnotation
	}
	return false
}

func (x *FolderSettings) GetEnableEncryption() bool {
	if x != nil {
		return x.EnableEncryption
	}
	return false
}

func (x *FolderSettings) GetHighVisibility() bool {
	if x != nil {
		return x.HighVisibility
	}
	return false
}

type UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image parent of the image. This value defaults to the user performing
	// the upload operation if no parent is set.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The image content, represented as an HttpBody.
	Body *httpbody.HttpBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *UploadImageRequest) Reset() {
	*x = UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest) ProtoMessage() {}

func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{2}
}

func (x *UploadImageRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UploadImageRequest) GetBody() *httpbody.HttpBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type UploadImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UploadImageResponse) Reset() {
	*x = UploadImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageResponse) ProtoMessage() {}

func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{3}
}

func (x *UploadImageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image parent of the image. This value defaults to the user performing
	// the import operation if no parent is set.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	// HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
	// completed. Your request may fail if the specified host denies the
	// request (e.g. due to request throttling or DoS prevention), or if
	// Animeshon throttles requests to the site for abuse prevention. You should
	// not depend on externally-hosted images for production applications.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// The web cache options to apply to the import request.
	CacheOptions *ImportImageRequest_WebCacheOptions `protobuf:"bytes,3,opt,name=cache_options,json=cacheOptions,proto3" json:"cache_options,omitempty"`
}

func (x *ImportImageRequest) Reset() {
	*x = ImportImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportImageRequest) ProtoMessage() {}

func (x *ImportImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportImageRequest.ProtoReflect.Descriptor instead.
func (*ImportImageRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{4}
}

func (x *ImportImageRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ImportImageRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ImportImageRequest) GetCacheOptions() *ImportImageRequest_WebCacheOptions {
	if x != nil {
		return x.CacheOptions
	}
	return nil
}

type ImportImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ImportImageResponse) Reset() {
	*x = ImportImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportImageResponse) ProtoMessage() {}

func (x *ImportImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportImageResponse.ProtoReflect.Descriptor instead.
func (*ImportImageResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{5}
}

func (x *ImportImageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If content type is set and differs from the original content type the image
	// will be converted to match the specified content type.
	//
	// Note: only "image/png", "image/webp", "image/jpeg" are supported values.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The image bounding box to use for resizing. This value is normally used
	// to request image thumbnails. If both width and height are defined then the
	// value with smaller ratio will be used to resize the image. The resized
	// image has the closest standard ratio to the requested width or height.
	// If the requested ratio is larger than the original image it is ignored.
	Resize *GetImageRequest_ResizeBounds `protobuf:"bytes,3,opt,name=resize,proto3" json:"resize,omitempty"`
}

func (x *GetImageRequest) Reset() {
	*x = GetImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRequest) ProtoMessage() {}

func (x *GetImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRequest.ProtoReflect.Descriptor instead.
func (*GetImageRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{6}
}

func (x *GetImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetImageRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GetImageRequest) GetResize() *GetImageRequest_ResizeBounds {
	if x != nil {
		return x.Resize
	}
	return nil
}

type CreateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent this folder belongs to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The folder to create.
	Folder *Folder `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *CreateFolderRequest) Reset() {
	*x = CreateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderRequest) ProtoMessage() {}

func (x *CreateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFolderRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFolderRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateFolderRequest) GetFolder() *Folder {
	if x != nil {
		return x.Folder
	}
	return nil
}

type DeleteFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The folder to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteFolderRequest) Reset() {
	*x = DeleteFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFolderRequest) ProtoMessage() {}

func (x *DeleteFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteFolderRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFolderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetFolderSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the folder to retrieve settings from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetFolderSettingsRequest) Reset() {
	*x = GetFolderSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFolderSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFolderSettingsRequest) ProtoMessage() {}

func (x *GetFolderSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFolderSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetFolderSettingsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{9}
}

func (x *GetFolderSettingsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateFolderSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The folder settings to update.
	Settings *FolderSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateFolderSettingsRequest) Reset() {
	*x = UpdateFolderSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFolderSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFolderSettingsRequest) ProtoMessage() {}

func (x *UpdateFolderSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFolderSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateFolderSettingsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFolderSettingsRequest) GetSettings() *FolderSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdateFolderSettingsRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetImageRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetImageRouteRequest) Reset() {
	*x = GetImageRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRouteRequest) ProtoMessage() {}

func (x *GetImageRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRouteRequest.ProtoReflect.Descriptor instead.
func (*GetImageRouteRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{11}
}

func (x *GetImageRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetImageRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A routable url that points to a link address backed by the CDN.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetImageRouteResponse) Reset() {
	*x = GetImageRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRouteResponse) ProtoMessage() {}

func (x *GetImageRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRouteResponse.ProtoReflect.Descriptor instead.
func (*GetImageRouteResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{12}
}

func (x *GetImageRouteResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RouteImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque route indicating which host received the request and which
	// parameters were passed to the request.
	Get string `protobuf:"bytes,1,opt,name=get,proto3" json:"get,omitempty"`
}

func (x *RouteImageRequest) Reset() {
	*x = RouteImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteImageRequest) ProtoMessage() {}

func (x *RouteImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteImageRequest.ProtoReflect.Descriptor instead.
func (*RouteImageRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{13}
}

func (x *RouteImageRequest) GetGet() string {
	if x != nil {
		return x.Get
	}
	return ""
}

// The WebCache options to be used when importing an image from a public
// website address.
type ImportImageRequest_WebCacheOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If refresh is set to true the image is imported from the remote address
	// regardless of an existing local cache, if the fetched image does not
	// match the existing cache the new image is stored and a new resource is
	// created, otherwise the existing (cached) resource is returned.
	Refresh bool `protobuf:"varint,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// If ignore is set to true no cache lookup is performed and the image is
	// imported into a new resource. If both "ignore" and "refresh" are set to
	// true then "refresh" has no effect.
	Ignore bool `protobuf:"varint,2,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (x *ImportImageRequest_WebCacheOptions) Reset() {
	*x = ImportImageRequest_WebCacheOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportImageRequest_WebCacheOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportImageRequest_WebCacheOptions) ProtoMessage() {}

func (x *ImportImageRequest_WebCacheOptions) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportImageRequest_WebCacheOptions.ProtoReflect.Descriptor instead.
func (*ImportImageRequest_WebCacheOptions) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ImportImageRequest_WebCacheOptions) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *ImportImageRequest_WebCacheOptions) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

// The image resize bounds.
type GetImageRequest_ResizeBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image width.
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// The image height.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetImageRequest_ResizeBounds) Reset() {
	*x = GetImageRequest_ResizeBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRequest_ResizeBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRequest_ResizeBounds) ProtoMessage() {}

func (x *GetImageRequest_ResizeBounds) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_image_v1alpha1_image_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRequest_ResizeBounds.ProtoReflect.Descriptor instead.
func (*GetImageRequest_ResizeBounds) Descriptor() ([]byte, []int) {
	return file_animeshon_image_v1alpha1_image_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetImageRequest_ResizeBounds) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetImageRequest_ResizeBounds) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_animeshon_image_v1alpha1_image_proto protoreflect.FileDescriptor

var file_animeshon_image_v1alpha1_image_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x68, 0x69, 0x67, 0x68, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x5b, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x29, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x43, 0x0a, 0x0f, 0x57, 0x65,
	0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22,
	0x29, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x1a, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2a,
	0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x67, 0x65, 0x74, 0x32, 0xb7, 0x0a, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xa1, 0x01, 0x0a, 0x0b,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x22, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x78, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x5e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x58, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2f, 0x22, 0x2a, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xaf, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x22, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x5a,
	0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xdd, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5a, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xfc, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c,
	0x22, 0x34, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x41, 0x22, 0x3c, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d,
	0x3a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0xca, 0x41,
	0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x32, 0xcd, 0x02, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b,
	0x67, 0x65, 0x74, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0x7d, 0x1a, 0x16, 0xca, 0x41,
	0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x74, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0xea, 0x02, 0x1a,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x3a, 0x3a, 0x76, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_animeshon_image_v1alpha1_image_proto_rawDescOnce sync.Once
	file_animeshon_image_v1alpha1_image_proto_rawDescData = file_animeshon_image_v1alpha1_image_proto_rawDesc
)

func file_animeshon_image_v1alpha1_image_proto_rawDescGZIP() []byte {
	file_animeshon_image_v1alpha1_image_proto_rawDescOnce.Do(func() {
		file_animeshon_image_v1alpha1_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_image_v1alpha1_image_proto_rawDescData)
	})
	return file_animeshon_image_v1alpha1_image_proto_rawDescData
}

var file_animeshon_image_v1alpha1_image_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_animeshon_image_v1alpha1_image_proto_goTypes = []interface{}{
	(*Folder)(nil),                             // 0: animeshon.image.v1alpha1.Folder
	(*FolderSettings)(nil),                     // 1: animeshon.image.v1alpha1.FolderSettings
	(*UploadImageRequest)(nil),                 // 2: animeshon.image.v1alpha1.UploadImageRequest
	(*UploadImageResponse)(nil),                // 3: animeshon.image.v1alpha1.UploadImageResponse
	(*ImportImageRequest)(nil),                 // 4: animeshon.image.v1alpha1.ImportImageRequest
	(*ImportImageResponse)(nil),                // 5: animeshon.image.v1alpha1.ImportImageResponse
	(*GetImageRequest)(nil),                    // 6: animeshon.image.v1alpha1.GetImageRequest
	(*CreateFolderRequest)(nil),                // 7: animeshon.image.v1alpha1.CreateFolderRequest
	(*DeleteFolderRequest)(nil),                // 8: animeshon.image.v1alpha1.DeleteFolderRequest
	(*GetFolderSettingsRequest)(nil),           // 9: animeshon.image.v1alpha1.GetFolderSettingsRequest
	(*UpdateFolderSettingsRequest)(nil),        // 10: animeshon.image.v1alpha1.UpdateFolderSettingsRequest
	(*GetImageRouteRequest)(nil),               // 11: animeshon.image.v1alpha1.GetImageRouteRequest
	(*GetImageRouteResponse)(nil),              // 12: animeshon.image.v1alpha1.GetImageRouteResponse
	(*RouteImageRequest)(nil),                  // 13: animeshon.image.v1alpha1.RouteImageRequest
	(*ImportImageRequest_WebCacheOptions)(nil), // 14: animeshon.image.v1alpha1.ImportImageRequest.WebCacheOptions
	(*GetImageRequest_ResizeBounds)(nil),       // 15: animeshon.image.v1alpha1.GetImageRequest.ResizeBounds
	(*httpbody.HttpBody)(nil),                  // 16: google.api.HttpBody
	(*fieldmaskpb.FieldMask)(nil),              // 17: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                      // 18: google.protobuf.Empty
}
var file_animeshon_image_v1alpha1_image_proto_depIdxs = []int32{
	16, // 0: animeshon.image.v1alpha1.UploadImageRequest.body:type_name -> google.api.HttpBody
	14, // 1: animeshon.image.v1alpha1.ImportImageRequest.cache_options:type_name -> animeshon.image.v1alpha1.ImportImageRequest.WebCacheOptions
	15, // 2: animeshon.image.v1alpha1.GetImageRequest.resize:type_name -> animeshon.image.v1alpha1.GetImageRequest.ResizeBounds
	0,  // 3: animeshon.image.v1alpha1.CreateFolderRequest.folder:type_name -> animeshon.image.v1alpha1.Folder
	1,  // 4: animeshon.image.v1alpha1.UpdateFolderSettingsRequest.settings:type_name -> animeshon.image.v1alpha1.FolderSettings
	17, // 5: animeshon.image.v1alpha1.UpdateFolderSettingsRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 6: animeshon.image.v1alpha1.Image.UploadImage:input_type -> animeshon.image.v1alpha1.UploadImageRequest
	4,  // 7: animeshon.image.v1alpha1.Image.ImportImage:input_type -> animeshon.image.v1alpha1.ImportImageRequest
	6,  // 8: animeshon.image.v1alpha1.Image.GetImage:input_type -> animeshon.image.v1alpha1.GetImageRequest
	7,  // 9: animeshon.image.v1alpha1.Image.CreateFolder:input_type -> animeshon.image.v1alpha1.CreateFolderRequest
	8,  // 10: animeshon.image.v1alpha1.Image.DeleteFolder:input_type -> animeshon.image.v1alpha1.DeleteFolderRequest
	9,  // 11: animeshon.image.v1alpha1.Image.GetFolderSettings:input_type -> animeshon.image.v1alpha1.GetFolderSettingsRequest
	10, // 12: animeshon.image.v1alpha1.Image.UpdateFolderSettings:input_type -> animeshon.image.v1alpha1.UpdateFolderSettingsRequest
	11, // 13: animeshon.image.v1alpha1.ImageRouter.GetImageRoute:input_type -> animeshon.image.v1alpha1.GetImageRouteRequest
	13, // 14: animeshon.image.v1alpha1.ImageRouter.RouteImage:input_type -> animeshon.image.v1alpha1.RouteImageRequest
	3,  // 15: animeshon.image.v1alpha1.Image.UploadImage:output_type -> animeshon.image.v1alpha1.UploadImageResponse
	5,  // 16: animeshon.image.v1alpha1.Image.ImportImage:output_type -> animeshon.image.v1alpha1.ImportImageResponse
	16, // 17: animeshon.image.v1alpha1.Image.GetImage:output_type -> google.api.HttpBody
	0,  // 18: animeshon.image.v1alpha1.Image.CreateFolder:output_type -> animeshon.image.v1alpha1.Folder
	18, // 19: animeshon.image.v1alpha1.Image.DeleteFolder:output_type -> google.protobuf.Empty
	1,  // 20: animeshon.image.v1alpha1.Image.GetFolderSettings:output_type -> animeshon.image.v1alpha1.FolderSettings
	1,  // 21: animeshon.image.v1alpha1.Image.UpdateFolderSettings:output_type -> animeshon.image.v1alpha1.FolderSettings
	12, // 22: animeshon.image.v1alpha1.ImageRouter.GetImageRoute:output_type -> animeshon.image.v1alpha1.GetImageRouteResponse
	16, // 23: animeshon.image.v1alpha1.ImageRouter.RouteImage:output_type -> google.api.HttpBody
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_animeshon_image_v1alpha1_image_proto_init() }
func file_animeshon_image_v1alpha1_image_proto_init() {
	if File_animeshon_image_v1alpha1_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_image_v1alpha1_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFolderSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFolderSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportImageRequest_WebCacheOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_image_v1alpha1_image_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRequest_ResizeBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_image_v1alpha1_image_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_animeshon_image_v1alpha1_image_proto_goTypes,
		DependencyIndexes: file_animeshon_image_v1alpha1_image_proto_depIdxs,
		MessageInfos:      file_animeshon_image_v1alpha1_image_proto_msgTypes,
	}.Build()
	File_animeshon_image_v1alpha1_image_proto = out.File
	file_animeshon_image_v1alpha1_image_proto_rawDesc = nil
	file_animeshon_image_v1alpha1_image_proto_goTypes = nil
	file_animeshon_image_v1alpha1_image_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageClient interface {
	// Uploads an image through the request HttpBody.
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// Imports an image from a remote web address.
	ImportImage(ctx context.Context, in *ImportImageRequest, opts ...grpc.CallOption) (*ImportImageResponse, error)
	// Gets an image in binary representation with the format and size requested.
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Creates a new image folder.
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*Folder, error)
	// Deletes an existing image folder.
	DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the settings of an image folder.
	GetFolderSettings(ctx context.Context, in *GetFolderSettingsRequest, opts ...grpc.CallOption) (*FolderSettings, error)
	// Updates the settings of an image folder.
	UpdateFolderSettings(ctx context.Context, in *UpdateFolderSettingsRequest, opts ...grpc.CallOption) (*FolderSettings, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ImportImage(ctx context.Context, in *ImportImageRequest, opts ...grpc.CallOption) (*ImportImageResponse, error) {
	out := new(ImportImageResponse)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/ImportImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) GetFolderSettings(ctx context.Context, in *GetFolderSettingsRequest, opts ...grpc.CallOption) (*FolderSettings, error) {
	out := new(FolderSettings)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/GetFolderSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) UpdateFolderSettings(ctx context.Context, in *UpdateFolderSettingsRequest, opts ...grpc.CallOption) (*FolderSettings, error) {
	out := new(FolderSettings)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.Image/UpdateFolderSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServer is the server API for Image service.
type ImageServer interface {
	// Uploads an image through the request HttpBody.
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// Imports an image from a remote web address.
	ImportImage(context.Context, *ImportImageRequest) (*ImportImageResponse, error)
	// Gets an image in binary representation with the format and size requested.
	GetImage(context.Context, *GetImageRequest) (*httpbody.HttpBody, error)
	// Creates a new image folder.
	CreateFolder(context.Context, *CreateFolderRequest) (*Folder, error)
	// Deletes an existing image folder.
	DeleteFolder(context.Context, *DeleteFolderRequest) (*emptypb.Empty, error)
	// Gets the settings of an image folder.
	GetFolderSettings(context.Context, *GetFolderSettingsRequest) (*FolderSettings, error)
	// Updates the settings of an image folder.
	UpdateFolderSettings(context.Context, *UpdateFolderSettingsRequest) (*FolderSettings, error)
}

// UnimplementedImageServer can be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (*UnimplementedImageServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedImageServer) ImportImage(context.Context, *ImportImageRequest) (*ImportImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportImage not implemented")
}
func (*UnimplementedImageServer) GetImage(context.Context, *GetImageRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedImageServer) CreateFolder(context.Context, *CreateFolderRequest) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (*UnimplementedImageServer) DeleteFolder(context.Context, *DeleteFolderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (*UnimplementedImageServer) GetFolderSettings(context.Context, *GetFolderSettingsRequest) (*FolderSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderSettings not implemented")
}
func (*UnimplementedImageServer) UpdateFolderSettings(context.Context, *UpdateFolderSettingsRequest) (*FolderSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolderSettings not implemented")
}

func RegisterImageServer(s *grpc.Server, srv ImageServer) {
	s.RegisterService(&_Image_serviceDesc, srv)
}

func _Image_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ImportImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ImportImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/ImportImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ImportImage(ctx, req.(*ImportImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).DeleteFolder(ctx, req.(*DeleteFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_GetFolderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetFolderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/GetFolderSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetFolderSettings(ctx, req.(*GetFolderSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_UpdateFolderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).UpdateFolderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.Image/UpdateFolderSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).UpdateFolderSettings(ctx, req.(*UpdateFolderSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Image_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.image.v1alpha1.Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _Image_UploadImage_Handler,
		},
		{
			MethodName: "ImportImage",
			Handler:    _Image_ImportImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Image_GetImage_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _Image_CreateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _Image_DeleteFolder_Handler,
		},
		{
			MethodName: "GetFolderSettings",
			Handler:    _Image_GetFolderSettings_Handler,
		},
		{
			MethodName: "UpdateFolderSettings",
			Handler:    _Image_UpdateFolderSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/image/v1alpha1/image.proto",
}

// ImageRouterClient is the client API for ImageRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageRouterClient interface {
	// Gets the image public link address that is used to fetch images via CDN.
	GetImageRoute(ctx context.Context, in *GetImageRouteRequest, opts ...grpc.CallOption) (*GetImageRouteResponse, error)
	// Routes a raw request received by a CDN host to its target image.
	RouteImage(ctx context.Context, in *RouteImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type imageRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewImageRouterClient(cc grpc.ClientConnInterface) ImageRouterClient {
	return &imageRouterClient{cc}
}

func (c *imageRouterClient) GetImageRoute(ctx context.Context, in *GetImageRouteRequest, opts ...grpc.CallOption) (*GetImageRouteResponse, error) {
	out := new(GetImageRouteResponse)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.ImageRouter/GetImageRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRouterClient) RouteImage(ctx context.Context, in *RouteImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/animeshon.image.v1alpha1.ImageRouter/RouteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageRouterServer is the server API for ImageRouter service.
type ImageRouterServer interface {
	// Gets the image public link address that is used to fetch images via CDN.
	GetImageRoute(context.Context, *GetImageRouteRequest) (*GetImageRouteResponse, error)
	// Routes a raw request received by a CDN host to its target image.
	RouteImage(context.Context, *RouteImageRequest) (*httpbody.HttpBody, error)
}

// UnimplementedImageRouterServer can be embedded to have forward compatible implementations.
type UnimplementedImageRouterServer struct {
}

func (*UnimplementedImageRouterServer) GetImageRoute(context.Context, *GetImageRouteRequest) (*GetImageRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageRoute not implemented")
}
func (*UnimplementedImageRouterServer) RouteImage(context.Context, *RouteImageRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteImage not implemented")
}

func RegisterImageRouterServer(s *grpc.Server, srv ImageRouterServer) {
	s.RegisterService(&_ImageRouter_serviceDesc, srv)
}

func _ImageRouter_GetImageRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRouterServer).GetImageRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.ImageRouter/GetImageRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRouterServer).GetImageRoute(ctx, req.(*GetImageRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRouter_RouteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRouterServer).RouteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.image.v1alpha1.ImageRouter/RouteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRouterServer).RouteImage(ctx, req.(*RouteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageRouter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.image.v1alpha1.ImageRouter",
	HandlerType: (*ImageRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImageRoute",
			Handler:    _ImageRouter_GetImageRoute_Handler,
		},
		{
			MethodName: "RouteImage",
			Handler:    _ImageRouter_RouteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/image/v1alpha1/image.proto",
}
