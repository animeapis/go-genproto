// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: animeshon/knowledge/v1alpha1/knowledge.proto

package knowledge

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Contribution_State int32

const (
	Contribution_PENDING  Contribution_State = 0
	Contribution_APPROVED Contribution_State = 1
	Contribution_REJECTED Contribution_State = 2
	Contribution_DRAFT    Contribution_State = 3
)

// Enum value maps for Contribution_State.
var (
	Contribution_State_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
		3: "DRAFT",
	}
	Contribution_State_value = map[string]int32{
		"PENDING":  0,
		"APPROVED": 1,
		"REJECTED": 2,
		"DRAFT":    3,
	}
)

func (x Contribution_State) Enum() *Contribution_State {
	p := new(Contribution_State)
	*p = x
	return p
}

func (x Contribution_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contribution_State) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[0].Descriptor()
}

func (Contribution_State) Type() protoreflect.EnumType {
	return &file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes[0]
}

func (x Contribution_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contribution_State.Descriptor instead.
func (Contribution_State) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{3, 0}
}

type AllocateResourceNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource kind of the resource to migrate.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *AllocateResourceNameRequest) Reset() {
	*x = AllocateResourceNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateResourceNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateResourceNameRequest) ProtoMessage() {}

func (x *AllocateResourceNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateResourceNameRequest.ProtoReflect.Descriptor instead.
func (*AllocateResourceNameRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *AllocateResourceNameRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type AllocateResourceNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the resource to migrate.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AllocateResourceNameResponse) Reset() {
	*x = AllocateResourceNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateResourceNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateResourceNameResponse) ProtoMessage() {}

func (x *AllocateResourceNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateResourceNameResponse.ProtoReflect.Descriptor instead.
func (*AllocateResourceNameResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{1}
}

func (x *AllocateResourceNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContributionChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Additions []*EntryEntity `protobuf:"bytes,2,rep,name=additions,proto3" json:"additions,omitempty"`
	Deletions []*EntryEntity `protobuf:"bytes,3,rep,name=deletions,proto3" json:"deletions,omitempty"`
}

func (x *ContributionChanges) Reset() {
	*x = ContributionChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributionChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributionChanges) ProtoMessage() {}

func (x *ContributionChanges) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributionChanges.ProtoReflect.Descriptor instead.
func (*ContributionChanges) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{2}
}

func (x *ContributionChanges) GetAdditions() []*EntryEntity {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *ContributionChanges) GetDeletions() []*EntryEntity {
	if x != nil {
		return x.Deletions
	}
	return nil
}

type Contribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the contribution.
	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reviewer    string             `protobuf:"bytes,3,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	State       Contribution_State `protobuf:"varint,4,opt,name=state,proto3,enum=animeshon.knowledge.v1alpha1.Contribution_State" json:"state,omitempty"`
	DisplayName string             `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Incremental value which specifies how many times the contribution has been reviewed.
	Generation int32 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	// When the album was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the album was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// When the album was reviewed.
	ReviewTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=review_time,json=reviewTime,proto3" json:"review_time,omitempty"`
}

func (x *Contribution) Reset() {
	*x = Contribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contribution) ProtoMessage() {}

func (x *Contribution) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contribution.ProtoReflect.Descriptor instead.
func (*Contribution) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{3}
}

func (x *Contribution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contribution) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *Contribution) GetState() Contribution_State {
	if x != nil {
		return x.State
	}
	return Contribution_PENDING
}

func (x *Contribution) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Contribution) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Contribution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Contribution) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Contribution) GetReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewTime
	}
	return nil
}

type ReviewContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment string               `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Changes *ContributionChanges `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ReviewContributionRequest) Reset() {
	*x = ReviewContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewContributionRequest) ProtoMessage() {}

func (x *ReviewContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewContributionRequest.ProtoReflect.Descriptor instead.
func (*ReviewContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{4}
}

func (x *ReviewContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReviewContributionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReviewContributionRequest) GetChanges() *ContributionChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CreateContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource where this contribution will be created.
	Parent       string               `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Contribution *Contribution        `protobuf:"bytes,2,opt,name=contribution,proto3" json:"contribution,omitempty"`
	Changes      *ContributionChanges `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *CreateContributionRequest) Reset() {
	*x = CreateContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContributionRequest) ProtoMessage() {}

func (x *CreateContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContributionRequest.ProtoReflect.Descriptor instead.
func (*CreateContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{5}
}

func (x *CreateContributionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateContributionRequest) GetContribution() *Contribution {
	if x != nil {
		return x.Contribution
	}
	return nil
}

func (x *CreateContributionRequest) GetChanges() *ContributionChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListContributionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent, which owns this collection of contributions.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	//
	//The maximum number of users to return. Server may return fewer users
	//than requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListContributionsRequest) Reset() {
	*x = ListContributionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContributionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContributionsRequest) ProtoMessage() {}

func (x *ListContributionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContributionsRequest.ProtoReflect.Descriptor instead.
func (*ListContributionsRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{6}
}

func (x *ListContributionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListContributionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListContributionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListContributionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListContributionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of contributions.
	Contributions []*Contribution `protobuf:"bytes,1,rep,name=contributions,proto3" json:"contributions,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListContributionsResponse) Reset() {
	*x = ListContributionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContributionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContributionsResponse) ProtoMessage() {}

func (x *ListContributionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContributionsResponse.ProtoReflect.Descriptor instead.
func (*ListContributionsResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{7}
}

func (x *ListContributionsResponse) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

func (x *ListContributionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetContributionChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested contribution.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContributionChangesRequest) Reset() {
	*x = GetContributionChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContributionChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionChangesRequest) ProtoMessage() {}

func (x *GetContributionChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionChangesRequest.ProtoReflect.Descriptor instead.
func (*GetContributionChangesRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{8}
}

func (x *GetContributionChangesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the requested contribution.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContributionRequest) Reset() {
	*x = GetContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionRequest) ProtoMessage() {}

func (x *GetContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionRequest.ProtoReflect.Descriptor instead.
func (*GetContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{9}
}

func (x *GetContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ApproveContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ApproveContributionRequest) Reset() {
	*x = ApproveContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveContributionRequest) ProtoMessage() {}

func (x *ApproveContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveContributionRequest.ProtoReflect.Descriptor instead.
func (*ApproveContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{10}
}

func (x *ApproveContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RejectContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RejectContributionRequest) Reset() {
	*x = RejectContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectContributionRequest) ProtoMessage() {}

func (x *RejectContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectContributionRequest.ProtoReflect.Descriptor instead.
func (*RejectContributionRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{11}
}

func (x *RejectContributionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EntryEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*EntryEntity_Anime
	//	*EntryEntity_Canonical
	//	*EntryEntity_Chapter
	//	*EntryEntity_Character
	//	*EntryEntity_Episode
	//	*EntryEntity_GameRelease
	//	*EntryEntity_GraphicNovel
	//	*EntryEntity_LightNovel
	//	*EntryEntity_Organization
	//	*EntryEntity_Person
	//	*EntryEntity_Track
	//	*EntryEntity_Universe
	//	*EntryEntity_Volume
	Entity isEntryEntity_Entity `protobuf_oneof:"entity"`
}

func (x *EntryEntity) Reset() {
	*x = EntryEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryEntity) ProtoMessage() {}

func (x *EntryEntity) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryEntity.ProtoReflect.Descriptor instead.
func (*EntryEntity) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{12}
}

func (m *EntryEntity) GetEntity() isEntryEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *EntryEntity) GetAnime() *Anime {
	if x, ok := x.GetEntity().(*EntryEntity_Anime); ok {
		return x.Anime
	}
	return nil
}

func (x *EntryEntity) GetCanonical() *Canonical {
	if x, ok := x.GetEntity().(*EntryEntity_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *EntryEntity) GetChapter() *Chapter {
	if x, ok := x.GetEntity().(*EntryEntity_Chapter); ok {
		return x.Chapter
	}
	return nil
}

func (x *EntryEntity) GetCharacter() *Character {
	if x, ok := x.GetEntity().(*EntryEntity_Character); ok {
		return x.Character
	}
	return nil
}

func (x *EntryEntity) GetEpisode() *Episode {
	if x, ok := x.GetEntity().(*EntryEntity_Episode); ok {
		return x.Episode
	}
	return nil
}

func (x *EntryEntity) GetGameRelease() *GameRelease {
	if x, ok := x.GetEntity().(*EntryEntity_GameRelease); ok {
		return x.GameRelease
	}
	return nil
}

func (x *EntryEntity) GetGraphicNovel() *GraphicNovel {
	if x, ok := x.GetEntity().(*EntryEntity_GraphicNovel); ok {
		return x.GraphicNovel
	}
	return nil
}

func (x *EntryEntity) GetLightNovel() *LightNovel {
	if x, ok := x.GetEntity().(*EntryEntity_LightNovel); ok {
		return x.LightNovel
	}
	return nil
}

func (x *EntryEntity) GetOrganization() *Organization {
	if x, ok := x.GetEntity().(*EntryEntity_Organization); ok {
		return x.Organization
	}
	return nil
}

func (x *EntryEntity) GetPerson() *Person {
	if x, ok := x.GetEntity().(*EntryEntity_Person); ok {
		return x.Person
	}
	return nil
}

func (x *EntryEntity) GetTrack() *Track {
	if x, ok := x.GetEntity().(*EntryEntity_Track); ok {
		return x.Track
	}
	return nil
}

func (x *EntryEntity) GetUniverse() *Universe {
	if x, ok := x.GetEntity().(*EntryEntity_Universe); ok {
		return x.Universe
	}
	return nil
}

func (x *EntryEntity) GetVolume() *Volume {
	if x, ok := x.GetEntity().(*EntryEntity_Volume); ok {
		return x.Volume
	}
	return nil
}

type isEntryEntity_Entity interface {
	isEntryEntity_Entity()
}

type EntryEntity_Anime struct {
	Anime *Anime `protobuf:"bytes,1,opt,name=anime,proto3,oneof"`
}

type EntryEntity_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,2,opt,name=canonical,proto3,oneof"`
}

type EntryEntity_Chapter struct {
	Chapter *Chapter `protobuf:"bytes,3,opt,name=chapter,proto3,oneof"`
}

type EntryEntity_Character struct {
	Character *Character `protobuf:"bytes,4,opt,name=character,proto3,oneof"`
}

type EntryEntity_Episode struct {
	Episode *Episode `protobuf:"bytes,5,opt,name=episode,proto3,oneof"`
}

type EntryEntity_GameRelease struct {
	GameRelease *GameRelease `protobuf:"bytes,6,opt,name=game_release,json=gameRelease,proto3,oneof"`
}

type EntryEntity_GraphicNovel struct {
	GraphicNovel *GraphicNovel `protobuf:"bytes,7,opt,name=graphic_novel,json=graphicNovel,proto3,oneof"`
}

type EntryEntity_LightNovel struct {
	LightNovel *LightNovel `protobuf:"bytes,8,opt,name=light_novel,json=lightNovel,proto3,oneof"`
}

type EntryEntity_Organization struct {
	Organization *Organization `protobuf:"bytes,9,opt,name=organization,proto3,oneof"`
}

type EntryEntity_Person struct {
	Person *Person `protobuf:"bytes,10,opt,name=person,proto3,oneof"`
}

type EntryEntity_Track struct {
	Track *Track `protobuf:"bytes,11,opt,name=track,proto3,oneof"`
}

type EntryEntity_Universe struct {
	Universe *Universe `protobuf:"bytes,12,opt,name=universe,proto3,oneof"`
}

type EntryEntity_Volume struct {
	Volume *Volume `protobuf:"bytes,13,opt,name=volume,proto3,oneof"`
}

func (*EntryEntity_Anime) isEntryEntity_Entity() {}

func (*EntryEntity_Canonical) isEntryEntity_Entity() {}

func (*EntryEntity_Chapter) isEntryEntity_Entity() {}

func (*EntryEntity_Character) isEntryEntity_Entity() {}

func (*EntryEntity_Episode) isEntryEntity_Entity() {}

func (*EntryEntity_GameRelease) isEntryEntity_Entity() {}

func (*EntryEntity_GraphicNovel) isEntryEntity_Entity() {}

func (*EntryEntity_LightNovel) isEntryEntity_Entity() {}

func (*EntryEntity_Organization) isEntryEntity_Entity() {}

func (*EntryEntity_Person) isEntryEntity_Entity() {}

func (*EntryEntity_Track) isEntryEntity_Entity() {}

func (*EntryEntity_Universe) isEntryEntity_Entity() {}

func (*EntryEntity_Volume) isEntryEntity_Entity() {}

type Anime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid anime types:
	//Unknown type
	//UNKNOWN
	//
	//Tv series
	//TV
	//
	//Movie
	//MOVIE
	//
	//Original video animation
	//OVA
	//
	//Original Net Anime
	//ONA
	//
	//Special
	//SPECIAL
	//
	//Web anime
	//WEB
	//
	//Music video
	//MUSIC_VIDEO
	//
	//Other
	//OTHER
	Type          string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Episodes      []*Edge        `protobuf:"bytes,3,rep,name=episodes,proto3" json:"episodes,omitempty"`
	EpisodeCount  int32          `protobuf:"varint,4,opt,name=EpisodeCount,proto3" json:"EpisodeCount,omitempty"`
	Names         []*Text        `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	//
	//Valid content statuses:
	//Unknown status
	//UNKNOWN
	//
	//Publishing or airing is still ongoing.
	//ONGOING
	//
	//Publishing or airing has been completed.
	//COMPLETED
	//
	//Publishing or airing has been scheduled.
	//SCHEDULED
	//
	//Publishing or airing started but never finished.
	//INTERRUPTED
	//
	//Publishing or airing was scheduled but later canceled.
	//CANCELED
	//
	//Publishing or airing has been suspended / has been put on hold.
	//SUSPENDED
	//
	//The content is in work in progress
	//WORK_IN_PROGRESS
	Status           string             `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	ContentRelations []*ContentRelation `protobuf:"bytes,13,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string `protobuf:"bytes,14,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	Original     string                 `protobuf:"bytes,15,opt,name=original,proto3" json:"original,omitempty"`
	Runnings     []*Running             `protobuf:"bytes,16,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate  *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring     []*Cast                `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff        []*Collaboration       `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres       []*Edge                `protobuf:"bytes,20,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases     []*Edge                `protobuf:"bytes,21,rep,name=releases,proto3" json:"releases,omitempty"`
	Soundtracks  []*Soundtrack          `protobuf:"bytes,22,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings []*VoiceActing         `protobuf:"bytes,23,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,24,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,25,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *Anime) Reset() {
	*x = Anime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anime) ProtoMessage() {}

func (x *Anime) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anime.ProtoReflect.Descriptor instead.
func (*Anime) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{13}
}

func (x *Anime) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Anime) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Anime) GetEpisodes() []*Edge {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Anime) GetEpisodeCount() int32 {
	if x != nil {
		return x.EpisodeCount
	}
	return 0
}

func (x *Anime) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Anime) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Anime) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Anime) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Anime) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Anime) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Anime) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Anime) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Anime) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *Anime) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *Anime) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *Anime) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *Anime) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Anime) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Anime) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Anime) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Anime) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Anime) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *Anime) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *Anime) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Anime) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Canonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Names         []*Text        `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,4,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,5,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,6,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,7,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,8,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Contents      []*Edge        `protobuf:"bytes,9,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Canonical) Reset() {
	*x = Canonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canonical) ProtoMessage() {}

func (x *Canonical) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canonical.ProtoReflect.Descriptor instead.
func (*Canonical) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{14}
}

func (x *Canonical) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Canonical) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Canonical) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Canonical) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Canonical) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Canonical) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Canonical) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Canonical) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Canonical) GetContents() []*Edge {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid Chapter types
	//Unknown type
	//UNKNOWN
	//
	//Regular chapter
	//REGULAR
	//
	//Extra chapter
	//EXTRA
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Episodes      []*Edge                `protobuf:"bytes,3,rep,name=episodes,proto3" json:"episodes,omitempty"`
	Identifier    int32                  `protobuf:"varint,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	PageCount     int32                  `protobuf:"varint,5,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	ReleaseDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names         []*Text                `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text                `protobuf:"bytes,8,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text                `protobuf:"bytes,9,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string                 `protobuf:"bytes,10,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string                 `protobuf:"bytes,11,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website             `protobuf:"bytes,12,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace         `protobuf:"bytes,13,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring      []*Cast                `protobuf:"bytes,14,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff         []*Collaboration       `protobuf:"bytes,15,rep,name=staff,proto3" json:"staff,omitempty"`
	Releases      []*Edge                `protobuf:"bytes,16,rep,name=releases,proto3" json:"releases,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,17,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,18,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{15}
}

func (x *Chapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chapter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Chapter) GetEpisodes() []*Edge {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Chapter) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Chapter) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *Chapter) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Chapter) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Chapter) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Chapter) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Chapter) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Chapter) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Chapter) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Chapter) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Chapter) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Chapter) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Chapter) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Chapter) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Chapter) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BirthdayDay   string  `protobuf:"bytes,2,opt,name=birthday_day,json=birthdayDay,proto3" json:"birthday_day,omitempty"`
	BirthdayMonth string  `protobuf:"bytes,3,opt,name=birthday_month,json=birthdayMonth,proto3" json:"birthday_month,omitempty"`
	BirthdayYear  string  `protobuf:"bytes,4,opt,name=birthday_year,json=birthdayYear,proto3" json:"birthday_year,omitempty"`
	Hometown      []*Text `protobuf:"bytes,5,rep,name=hometown,proto3" json:"hometown,omitempty"`
	Birthplace    []*Text `protobuf:"bytes,6,rep,name=birthplace,proto3" json:"birthplace,omitempty"`
	//
	//Unknown gender
	//UNKNOWN
	//
	//Male
	//MALE
	//
	//Female
	//FEMALE
	//
	//Male which seems a female
	//MALE_TRAP
	//
	//Female which seems a male
	//FEMALE_TRAP
	//
	//Both male and female
	//HERMAPHRODITIC
	//
	//None of the default gender applies
	//OTHER
	//
	//The gender is undefined
	//UNDEFINED
	//
	//The gender something between male and female
	//INTERSEXUAL
	Genre string `protobuf:"bytes,7,opt,name=genre,proto3" json:"genre,omitempty"`
	//
	//Valid blood types:
	//Unknown blood type
	//UNKNOWN
	//
	//A (no Rh info)
	//A
	//
	//B (no Rh info)
	//B
	//
	//AB (no Rh info)
	//AB
	//
	//O (no Rh info)
	//O
	//
	//A+
	//A_PLUS
	//
	//B+
	//B_PLUS
	//
	//AB+
	//AB_PLUS
	//
	//O+
	//O_PLUS
	//
	//A-
	//A_MINUS
	//
	//B-
	//B_MINUS
	//
	//AB-
	//AB_MINUS
	//
	//O-
	//O_MINUS
	BloodType string `protobuf:"bytes,8,opt,name=blood_type,json=bloodType,proto3" json:"blood_type,omitempty"`
	//
	//Valid Cup Sizes:
	//UNKNOWN
	//AAA
	//AA
	//A
	//B
	//C
	//D
	//E
	//F
	//G
	//H
	//I
	//J
	//K
	//L
	//M
	//N
	//O
	//P
	//Q
	//R
	//S
	//T
	//U
	//V
	//W
	//X
	//Y
	//Z
	CupSize string `protobuf:"bytes,9,opt,name=cup_size,json=cupSize,proto3" json:"cup_size,omitempty"`
	//
	//Valid Age Range:
	//Unknown
	//UNKNOWN
	//
	//The character is an infant. 1-3
	//INFANT
	//
	//The character is a child. 4-12
	//CHILD
	//
	//The character is a teen. 13-17
	//TEEN
	//
	//The character is a young adult. 18-25
	//YOUNG_ADULT
	//
	//The character is a grown up adult. 26-59
	//ADULT
	//
	//The character is an eldery. 60+
	//ELDERY
	//
	//The character is an entity which the concept of age do not makes sense (robots, ...)
	//NOT_APPLICABLE
	//
	//The character can't be fit in any any of the other category. (Gods, planets, ...)
	//WITHOUT
	AgeRange      string         `protobuf:"bytes,10,opt,name=age_range,json=ageRange,proto3" json:"age_range,omitempty"`
	Age           int32          `protobuf:"varint,11,opt,name=age,proto3" json:"age,omitempty"`
	Height        int32          `protobuf:"varint,12,opt,name=height,proto3" json:"height,omitempty"`
	Weight        int32          `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`
	Bust          int32          `protobuf:"varint,14,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist         int32          `protobuf:"varint,15,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips          int32          `protobuf:"varint,16,opt,name=hips,proto3" json:"hips,omitempty"`
	Names         []*Text        `protobuf:"bytes,17,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,18,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,19,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,20,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,21,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,22,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,23,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	GuiseOf       []*Edge        `protobuf:"bytes,24,rep,name=guise_of,json=guiseOf,proto3" json:"guise_of,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{16}
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetBirthdayDay() string {
	if x != nil {
		return x.BirthdayDay
	}
	return ""
}

func (x *Character) GetBirthdayMonth() string {
	if x != nil {
		return x.BirthdayMonth
	}
	return ""
}

func (x *Character) GetBirthdayYear() string {
	if x != nil {
		return x.BirthdayYear
	}
	return ""
}

func (x *Character) GetHometown() []*Text {
	if x != nil {
		return x.Hometown
	}
	return nil
}

func (x *Character) GetBirthplace() []*Text {
	if x != nil {
		return x.Birthplace
	}
	return nil
}

func (x *Character) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Character) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *Character) GetCupSize() string {
	if x != nil {
		return x.CupSize
	}
	return ""
}

func (x *Character) GetAgeRange() string {
	if x != nil {
		return x.AgeRange
	}
	return ""
}

func (x *Character) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Character) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Character) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Character) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *Character) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *Character) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *Character) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Character) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Character) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Character) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Character) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Character) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Character) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Character) GetGuiseOf() []*Edge {
	if x != nil {
		return x.GuiseOf
	}
	return nil
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid Episode types:
	//Unknown episode type
	//UNKNOWN
	//
	//Regular episode
	//REGULAR
	//
	//Recapitolation episode
	//RECAP
	//
	//Parody
	//PARODY
	//
	//Promo episode
	//PROMO
	//
	//Special episode
	//SPECIAL
	//
	//Opening / ending episode
	//OPENING_ENDING
	//
	//Other
	//OTHER
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Identifier    int32                  `protobuf:"varint,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ReleaseDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names         []*Text                `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text                `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text                `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string                 `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string                 `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website             `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace         `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring      []*Cast                `protobuf:"bytes,12,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff         []*Collaboration       `protobuf:"bytes,13,rep,name=staff,proto3" json:"staff,omitempty"`
	Soundtracks   []*Soundtrack          `protobuf:"bytes,14,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings  []*VoiceActing         `protobuf:"bytes,15,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,16,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,17,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{17}
}

func (x *Episode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Episode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Episode) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Episode) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Episode) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Episode) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Episode) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Episode) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Episode) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Episode) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Episode) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Episode) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Episode) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Episode) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *Episode) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *Episode) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Episode) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type GameRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Languages   []string               `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"` //repeated Media media = 4;
	//
	//Valid Censorships
	//Unknown censorship
	//UNKNOWN
	//
	//No censorship
	//NONE
	//
	//Censorship applied
	//CENSORED
	Censorship string `protobuf:"bytes,5,opt,name=censorship,proto3" json:"censorship,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string `protobuf:"bytes,6,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	Asin           string `protobuf:"bytes,7,opt,name=asin,proto3" json:"asin,omitempty"`
	Gtin           string `protobuf:"bytes,8,opt,name=gtin,proto3" json:"gtin,omitempty"`
	//
	//valid game release types:
	//Unknown game release type
	//UNKNOWN
	//
	//The release is complete
	//COMPLETE
	//
	//The release is only a part of the content
	//PARTIAL
	//
	//The release is just trial
	//TRIAL
	//
	//The release is a dlc
	//DLC
	Type             string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	WidthResolution  int32  `protobuf:"varint,10,opt,name=WidthResolution,proto3" json:"WidthResolution,omitempty"`
	HeightResolution int32  `protobuf:"varint,11,opt,name=HeightResolution,proto3" json:"HeightResolution,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	IsPatch string `protobuf:"bytes,12,opt,name=IsPatch,proto3" json:"IsPatch,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	IsFree string `protobuf:"bytes,13,opt,name=IsFree,proto3" json:"IsFree,omitempty"`
	//
	//Valid game dub degree
	//Unknown DUB degree
	//UNKNOWN
	//
	//Not dubbed
	//NONE
	//
	//Only erotic scenes are dubbed
	//ERO_ONLY
	//
	//Partially dubbed
	//PARTIAL
	//
	//Full dubbed
	//FULL
	DubDegree string `protobuf:"bytes,14,opt,name=dub_degree,json=dubDegree,proto3" json:"dub_degree,omitempty"`
	//
	//Valid game animation degrees:
	//Unknown animation degree
	//UNKNOWN
	//
	//No animation
	//NONE
	//
	//Simple animations
	//SIMPLE
	//
	//Partial animation -  Some fully animated scenes
	//PARTIAL
	//
	//Fully animated
	//FULL
	StoryAnimationDegree string `protobuf:"bytes,15,opt,name=story_animation_degree,json=storyAnimationDegree,proto3" json:"story_animation_degree,omitempty"`
	//
	//Valid game animation degrees:
	//Unknown animation degree
	//UNKNOWN
	//
	//No animation
	//NONE
	//
	//Simple animations
	//SIMPLE
	//
	//Partial animation -  Some fully animated scenes
	//PARTIAL
	//
	//Fully animated
	//FULL
	EroAnimationDegree string `protobuf:"bytes,16,opt,name=ero_animation_degree,json=eroAnimationDegree,proto3" json:"ero_animation_degree,omitempty"`
	Engine             string `protobuf:"bytes,17,opt,name=engine,proto3" json:"engine,omitempty"`
	//
	//Valid Platforms:
	//Unknown platform
	//UNKNOWN
	//
	//Windows
	//WINDOWS
	//
	//DOS
	//DOS
	//
	//LINUX
	//LINUX
	//
	//Mac
	//MAC
	//
	//IOs devices
	//IOS
	//
	//Android
	//ANDROID
	//
	//DVD player
	//DVD_PLAYER
	//
	//Blu-ray Player
	//BLU_RAY_PLAYER
	//
	//FM Towns https://en.wikipedia.org/wiki/FM_Towns
	//FM_TOWNS
	//
	//FM-7 Towns https://en.wikipedia.org/wiki/FM-7
	//FM7_TOWNS
	//
	//FM-8 Towns https://en.wikipedia.org/wiki/FM-8
	//FM8_TOWNS
	//
	//Gameboy advance
	//GAMEBOY_ADVANCE
	//
	//Gameboy color
	//GAMEBOY_COLOR
	//
	//MSX Computer https://en.wikipedia.org/wiki/MSX
	//MSX
	//
	//Nintendo DS
	//NINTENDO_DS
	//
	//NES platform
	//NES
	//
	//C88 https://en.wikipedia.org/wiki/PC-8800_series
	//P88
	//
	//PC98 https://en.wikipedia.org/wiki/PC-9800_series
	//P98
	//
	//PC Engine
	//PC_ENGINE
	//
	//Pc-FX https://en.wikipedia.org/wiki/PC-FX
	//PC_FX
	//
	//Playstation portable
	//PSP
	//
	//Playstation 1
	//PS1
	//
	//Playstation 2
	//PS2
	//
	//Playstation 3
	//PS3
	//
	//Playstation 4
	//PS4
	//
	//Playstation 5
	//PS5
	//
	//Playstation vita
	//PS_VITA
	//
	//Dgramcast https://en.wikipedia.org/wiki/Dreamcast
	//DGRAMCAST
	//
	//Sega Staurn
	//SEGA_SATURN
	//
	//Sega Mega-CD
	//SEGA_MEGACD
	//
	//Super Nintendo
	//SUPER_NINTENDO
	//
	//Nintendo Switch
	//NINTENDO_SWITCH
	//
	//Ninentdo WII
	//NINTENDO_WII
	//
	//Nintendo WI
	//NINTENDO_WII_U
	//
	//Nintendo 3Ds
	//NINTENDO_3DS
	//
	//X68000 https://en.wikipedia.org/wiki/X68000
	//X68000
	//
	//Xbox One
	//XBOX_ONE
	//
	//Xbox 360
	//XBOX_360
	//
	//Xbox
	//XBOX
	//
	//Xbox Series X
	//XBOX_X
	//
	//Website
	//WEBSITE
	//
	//Visual Novel DS https://github.com/BASLQC/vnds/wiki
	//VN_DS
	//
	//Sharp X1 https://en.wikipedia.org/wiki/Sharp_X1
	//SHARP_X1
	//
	//3DO Interactive Multiplayer
	//INTERACTIVE_3DO
	//
	//Other
	//OTHER
	//
	//Mobile Other
	//MOBILE_OTHER
	Platforms     []string         `protobuf:"bytes,18,rep,name=platforms,proto3" json:"platforms,omitempty"`
	Names         []*Text          `protobuf:"bytes,19,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text          `protobuf:"bytes,20,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text          `protobuf:"bytes,21,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string           `protobuf:"bytes,22,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string           `protobuf:"bytes,23,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website       `protobuf:"bytes,24,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace   `protobuf:"bytes,25,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring      []*Cast          `protobuf:"bytes,26,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff         []*Collaboration `protobuf:"bytes,27,rep,name=staff,proto3" json:"staff,omitempty"`
	Soundtracks   []*Soundtrack    `protobuf:"bytes,28,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings  []*VoiceActing   `protobuf:"bytes,29,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,30,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,31,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *GameRelease) Reset() {
	*x = GameRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRelease) ProtoMessage() {}

func (x *GameRelease) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRelease.ProtoReflect.Descriptor instead.
func (*GameRelease) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{18}
}

func (x *GameRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameRelease) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *GameRelease) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *GameRelease) GetCensorship() string {
	if x != nil {
		return x.Censorship
	}
	return ""
}

func (x *GameRelease) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *GameRelease) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *GameRelease) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *GameRelease) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GameRelease) GetWidthResolution() int32 {
	if x != nil {
		return x.WidthResolution
	}
	return 0
}

func (x *GameRelease) GetHeightResolution() int32 {
	if x != nil {
		return x.HeightResolution
	}
	return 0
}

func (x *GameRelease) GetIsPatch() string {
	if x != nil {
		return x.IsPatch
	}
	return ""
}

func (x *GameRelease) GetIsFree() string {
	if x != nil {
		return x.IsFree
	}
	return ""
}

func (x *GameRelease) GetDubDegree() string {
	if x != nil {
		return x.DubDegree
	}
	return ""
}

func (x *GameRelease) GetStoryAnimationDegree() string {
	if x != nil {
		return x.StoryAnimationDegree
	}
	return ""
}

func (x *GameRelease) GetEroAnimationDegree() string {
	if x != nil {
		return x.EroAnimationDegree
	}
	return ""
}

func (x *GameRelease) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *GameRelease) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *GameRelease) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GameRelease) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GameRelease) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *GameRelease) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *GameRelease) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *GameRelease) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *GameRelease) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *GameRelease) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *GameRelease) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *GameRelease) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *GameRelease) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *GameRelease) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *GameRelease) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type GraphicNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid Graphic Novel types:
	//Unknown graphic novel type
	//UNKNOWN
	//
	//Japanese GraphicNovel
	//MANGA
	//
	//One shot (only one volume)
	//ONE_SHOT
	//
	//Cinese GraphicNovel
	//MANHUA
	//
	//Korean GraphicNovel
	//MANHWA
	//
	//Original English Language
	//OEL
	//
	//Web native comic (webtoon)
	//WEB_COMIC
	//
	//GraphicNovel consisting of 4 pannels
	//YON_KOMA
	//
	//Other
	//OTHER
	Type          string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Chapters      []*Edge        `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	ChapterCount  int32          `protobuf:"varint,4,opt,name=ChapterCount,proto3" json:"ChapterCount,omitempty"`
	Names         []*Text        `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,11,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	//
	//Valid content statuses:
	//Unknown status
	//UNKNOWN
	//
	//Publishing or airing is still ongoing.
	//ONGOING
	//
	//Publishing or airing has been completed.
	//COMPLETED
	//
	//Publishing or airing has been scheduled.
	//SCHEDULED
	//
	//Publishing or airing started but never finished.
	//INTERRUPTED
	//
	//Publishing or airing was scheduled but later canceled.
	//CANCELED
	//
	//Publishing or airing has been suspended / has been put on hold.
	//SUSPENDED
	//
	//The content is in work in progress
	//WORK_IN_PROGRESS
	Status           string             `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	ContentRelations []*ContentRelation `protobuf:"bytes,13,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string `protobuf:"bytes,14,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	Original    string                 `protobuf:"bytes,15,opt,name=original,proto3" json:"original,omitempty"`
	Runnings    []*Running             `protobuf:"bytes,16,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring    []*Cast                `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff       []*Collaboration       `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres      []*Edge                `protobuf:"bytes,20,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases    []*Edge                `protobuf:"bytes,21,rep,name=releases,proto3" json:"releases,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,22,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,23,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
	Volumes            []*Edge  `protobuf:"bytes,24,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *GraphicNovel) Reset() {
	*x = GraphicNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicNovel) ProtoMessage() {}

func (x *GraphicNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicNovel.ProtoReflect.Descriptor instead.
func (*GraphicNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{19}
}

func (x *GraphicNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GraphicNovel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GraphicNovel) GetChapters() []*Edge {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *GraphicNovel) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *GraphicNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GraphicNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GraphicNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *GraphicNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *GraphicNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *GraphicNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *GraphicNovel) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *GraphicNovel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GraphicNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *GraphicNovel) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *GraphicNovel) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *GraphicNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *GraphicNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *GraphicNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *GraphicNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *GraphicNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GraphicNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *GraphicNovel) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *GraphicNovel) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

func (x *GraphicNovel) GetVolumes() []*Edge {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type LightNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chapters      []*Edge        `protobuf:"bytes,2,rep,name=chapters,proto3" json:"chapters,omitempty"`
	ChapterCount  int32          `protobuf:"varint,3,opt,name=ChapterCount,proto3" json:"ChapterCount,omitempty"`
	Names         []*Text        `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,6,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,7,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,8,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,9,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,10,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	//
	//Valid content statuses:
	//Unknown status
	//UNKNOWN
	//
	//Publishing or airing is still ongoing.
	//ONGOING
	//
	//Publishing or airing has been completed.
	//COMPLETED
	//
	//Publishing or airing has been scheduled.
	//SCHEDULED
	//
	//Publishing or airing started but never finished.
	//INTERRUPTED
	//
	//Publishing or airing was scheduled but later canceled.
	//CANCELED
	//
	//Publishing or airing has been suspended / has been put on hold.
	//SUSPENDED
	//
	//The content is in work in progress
	//WORK_IN_PROGRESS
	Status           string             `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	ContentRelations []*ContentRelation `protobuf:"bytes,12,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string `protobuf:"bytes,13,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	Original    string                 `protobuf:"bytes,14,opt,name=original,proto3" json:"original,omitempty"`
	Runnings    []*Running             `protobuf:"bytes,15,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring    []*Cast                `protobuf:"bytes,17,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff       []*Collaboration       `protobuf:"bytes,18,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres      []*Edge                `protobuf:"bytes,19,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases    []*Edge                `protobuf:"bytes,20,rep,name=releases,proto3" json:"releases,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,21,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,22,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
	Volumes            []*Edge  `protobuf:"bytes,23,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *LightNovel) Reset() {
	*x = LightNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightNovel) ProtoMessage() {}

func (x *LightNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightNovel.ProtoReflect.Descriptor instead.
func (*LightNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{20}
}

func (x *LightNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LightNovel) GetChapters() []*Edge {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *LightNovel) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *LightNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *LightNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *LightNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *LightNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *LightNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *LightNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *LightNovel) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *LightNovel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LightNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *LightNovel) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *LightNovel) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *LightNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *LightNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *LightNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *LightNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *LightNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *LightNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *LightNovel) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *LightNovel) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

func (x *LightNovel) GetVolumes() []*Edge {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid Organization types:
	//Uunknown organization type
	//UNKNOWN
	//
	//Coorporation / company
	//CORPORATE
	//
	//Circle of people
	//CIRCLE
	Type           string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	FoundationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=foundation_date,json=foundationDate,proto3" json:"foundation_date,omitempty"`
	//
	//Valid Content Focuses:
	//Unknown focus
	//UNKNOWN
	//
	//Main content handled are games
	//GAME
	//
	//Main content handled are anime
	//ANIME
	//
	//Main content handled are manga
	//MANGA
	//
	//Main content handled are light novels
	//LIGHT_NOVEL
	//
	//ContentFocusOther other
	//OTHER
	Focus         string     `protobuf:"bytes,4,opt,name=focus,proto3" json:"focus,omitempty"`
	Names         []*Text    `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text    `protobuf:"bytes,6,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text    `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string     `protobuf:"bytes,8,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string     `protobuf:"bytes,9,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website `protobuf:"bytes,10,rep,name=websites,proto3" json:"websites,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{21}
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Organization) GetFoundationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FoundationDate
	}
	return nil
}

func (x *Organization) GetFocus() string {
	if x != nil {
		return x.Focus
	}
	return ""
}

func (x *Organization) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Organization) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Organization) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Organization) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Organization) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Organization) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nationalities []string               `protobuf:"bytes,2,rep,name=nationalities,proto3" json:"nationalities,omitempty"`
	Languages     []string               `protobuf:"bytes,3,rep,name=languages,proto3" json:"languages,omitempty"`
	Birthday      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
	//
	//Unknown gender
	//UNKNOWN
	//
	//Male
	//MALE
	//
	//Female
	//FEMALE
	//
	//Male which seems a female
	//MALE_TRAP
	//
	//Female which seems a male
	//FEMALE_TRAP
	//
	//Both male and female
	//HERMAPHRODITIC
	//
	//None of the default gender applies
	//OTHER
	//
	//The gender is undefined
	//UNDEFINED
	//
	//The gender something between male and female
	//INTERSEXUAL
	Gender string `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	//
	//Valid blood types:
	//Unknown blood type
	//UNKNOWN
	//
	//A (no Rh info)
	//A
	//
	//B (no Rh info)
	//B
	//
	//AB (no Rh info)
	//AB
	//
	//O (no Rh info)
	//O
	//
	//A+
	//A_PLUS
	//
	//B+
	//B_PLUS
	//
	//AB+
	//AB_PLUS
	//
	//O+
	//O_PLUS
	//
	//A-
	//A_MINUS
	//
	//B-
	//B_MINUS
	//
	//AB-
	//AB_MINUS
	//
	//O-
	//O_MINUS
	BloodType     string     `protobuf:"bytes,6,opt,name=blood_type,json=bloodType,proto3" json:"blood_type,omitempty"`
	Names         []*Text    `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text    `protobuf:"bytes,8,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text    `protobuf:"bytes,9,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string     `protobuf:"bytes,10,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string     `protobuf:"bytes,11,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website `protobuf:"bytes,12,rep,name=websites,proto3" json:"websites,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{22}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetNationalities() []string {
	if x != nil {
		return x.Nationalities
	}
	return nil
}

func (x *Person) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Person) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *Person) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Person) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *Person) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Person) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Person) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Person) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Person) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Person) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Names         []*Text                `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text                `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text                `protobuf:"bytes,5,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string                 `protobuf:"bytes,6,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string                 `protobuf:"bytes,7,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website             `protobuf:"bytes,8,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace         `protobuf:"bytes,9,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Staff         []*Collaboration       `protobuf:"bytes,10,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres        []*Edge                `protobuf:"bytes,11,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases      []*Edge                `protobuf:"bytes,12,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{23}
}

func (x *Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Track) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Track) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Track) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Track) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Track) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Track) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Track) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Track) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Track) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Track) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Track) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

type Universe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Names         []*Text        `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,4,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,5,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,6,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,7,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,8,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Contents      []*Edge        `protobuf:"bytes,9,rep,name=contents,proto3" json:"contents,omitempty"`
	Canonicals    []*Edge        `protobuf:"bytes,10,rep,name=canonicals,proto3" json:"canonicals,omitempty"`
}

func (x *Universe) Reset() {
	*x = Universe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Universe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Universe) ProtoMessage() {}

func (x *Universe) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Universe.ProtoReflect.Descriptor instead.
func (*Universe) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{24}
}

func (x *Universe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Universe) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Universe) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Universe) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Universe) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Universe) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Universe) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Universe) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Universe) GetContents() []*Edge {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Universe) GetCanonicals() []*Edge {
	if x != nil {
		return x.Canonicals
	}
	return nil
}

type VisualNovel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	//Valid Visual Novel lengths:
	//Unknown length
	//UNKNOWN
	//
	//< 2 hours
	//VERY_SHORT
	//
	//20 - 10 hours
	//SHORT
	//
	//10 - 30 hours
	//MEDIUM
	//
	//30 - 50 hours
	//LONG
	//
	//> 50 hours
	//VERY_LONG
	Length        string         `protobuf:"bytes,2,opt,name=length,proto3" json:"length,omitempty"`
	Names         []*Text        `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Aliases       []*Text        `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions  []*Text        `protobuf:"bytes,5,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId  string         `protobuf:"bytes,6,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId string         `protobuf:"bytes,7,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites      []*Website     `protobuf:"bytes,8,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces  []*Marketplace `protobuf:"bytes,9,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	//
	//Valid content statuses:
	//Unknown status
	//UNKNOWN
	//
	//Publishing or airing is still ongoing.
	//ONGOING
	//
	//Publishing or airing has been completed.
	//COMPLETED
	//
	//Publishing or airing has been scheduled.
	//SCHEDULED
	//
	//Publishing or airing started but never finished.
	//INTERRUPTED
	//
	//Publishing or airing was scheduled but later canceled.
	//CANCELED
	//
	//Publishing or airing has been suspended / has been put on hold.
	//SUSPENDED
	//
	//The content is in work in progress
	//WORK_IN_PROGRESS
	Status           string             `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	ContentRelations []*ContentRelation `protobuf:"bytes,11,rep,name=content_relations,json=contentRelations,proto3" json:"content_relations,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string `protobuf:"bytes,12,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	Original     string                 `protobuf:"bytes,13,opt,name=original,proto3" json:"original,omitempty"`
	Runnings     []*Running             `protobuf:"bytes,14,rep,name=runnings,proto3" json:"runnings,omitempty"`
	ReleaseDate  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Starring     []*Cast                `protobuf:"bytes,16,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff        []*Collaboration       `protobuf:"bytes,17,rep,name=staff,proto3" json:"staff,omitempty"`
	Genres       []*Edge                `protobuf:"bytes,18,rep,name=genres,proto3" json:"genres,omitempty"`
	Releases     []*Edge                `protobuf:"bytes,19,rep,name=releases,proto3" json:"releases,omitempty"`
	Soundtracks  []*Soundtrack          `protobuf:"bytes,20,rep,name=soundtracks,proto3" json:"soundtracks,omitempty"`
	Voiceactings []*VoiceActing         `protobuf:"bytes,21,rep,name=voiceactings,proto3" json:"voiceactings,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,22,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,23,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *VisualNovel) Reset() {
	*x = VisualNovel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualNovel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualNovel) ProtoMessage() {}

func (x *VisualNovel) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualNovel.ProtoReflect.Descriptor instead.
func (*VisualNovel) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{25}
}

func (x *VisualNovel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VisualNovel) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

func (x *VisualNovel) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *VisualNovel) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *VisualNovel) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *VisualNovel) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *VisualNovel) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *VisualNovel) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *VisualNovel) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *VisualNovel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VisualNovel) GetContentRelations() []*ContentRelation {
	if x != nil {
		return x.ContentRelations
	}
	return nil
}

func (x *VisualNovel) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *VisualNovel) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *VisualNovel) GetRunnings() []*Running {
	if x != nil {
		return x.Runnings
	}
	return nil
}

func (x *VisualNovel) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *VisualNovel) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *VisualNovel) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *VisualNovel) GetGenres() []*Edge {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *VisualNovel) GetReleases() []*Edge {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *VisualNovel) GetSoundtracks() []*Soundtrack {
	if x != nil {
		return x.Soundtracks
	}
	return nil
}

func (x *VisualNovel) GetVoiceactings() []*VoiceActing {
	if x != nil {
		return x.Voiceactings
	}
	return nil
}

func (x *VisualNovel) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *VisualNovel) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Languages   []string               `protobuf:"bytes,2,rep,name=languages,proto3" json:"languages,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"` //repeated Media media = 4;
	//
	//Valid Censorships
	//Unknown censorship
	//UNKNOWN
	//
	//No censorship
	//NONE
	//
	//Censorship applied
	//CENSORED
	Censorship string `protobuf:"bytes,5,opt,name=censorship,proto3" json:"censorship,omitempty"`
	//
	//Valid Publishing types:
	//Unknown status
	//UNKNOWN
	//
	//Self publishing
	//SELF
	//
	//Publisched by a corporation
	//CORPORATE
	PublishingType string           `protobuf:"bytes,6,opt,name=publishing_type,json=publishingType,proto3" json:"publishing_type,omitempty"`
	Asin           string           `protobuf:"bytes,7,opt,name=asin,proto3" json:"asin,omitempty"`
	Gtin           string           `protobuf:"bytes,8,opt,name=gtin,proto3" json:"gtin,omitempty"`
	Identifier     int32            `protobuf:"varint,9,opt,name=identifier,proto3" json:"identifier,omitempty"` // ReadingComplexity reading_complexity = 10;
	Names          []*Text          `protobuf:"bytes,11,rep,name=names,proto3" json:"names,omitempty"`
	Aliases        []*Text          `protobuf:"bytes,12,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Descriptions   []*Text          `protobuf:"bytes,13,rep,name=descriptions,proto3" json:"descriptions,omitempty"`
	CoverImageId   string           `protobuf:"bytes,14,opt,name=cover_image_id,json=coverImageId,proto3" json:"cover_image_id,omitempty"`
	BannerImageId  string           `protobuf:"bytes,15,opt,name=banner_image_id,json=bannerImageId,proto3" json:"banner_image_id,omitempty"`
	Websites       []*Website       `protobuf:"bytes,16,rep,name=websites,proto3" json:"websites,omitempty"`
	Marketplaces   []*Marketplace   `protobuf:"bytes,17,rep,name=marketplaces,proto3" json:"marketplaces,omitempty"`
	Starring       []*Cast          `protobuf:"bytes,18,rep,name=starring,proto3" json:"starring,omitempty"`
	Staff          []*Collaboration `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	//
	//Valid maturity Ratings:
	//
	//Over 18 in USA
	//MTR_RTN_USA_NC17
	//
	//Over 18 in USA
	//MTR_RTN_USA_R
	//
	//Over 13 in USA
	//MTR_RTN_USA_PG13
	//
	//Over 3 in USA
	//MTR_RTN_USA_PG
	//
	//Safe in USA
	//MTR_RTN_USA_G
	MaturityRatings []string `protobuf:"bytes,20,rep,name=maturity_ratings,json=maturityRatings,proto3" json:"maturity_ratings,omitempty"`
	//
	//Valid Region Restrictions:
	//No Region Restriction
	//NONE
	//
	//The Entity is illegal following the U.N. guidelines
	//ILLEGAL
	RegionRestrictions []string `protobuf:"bytes,21,rep,name=region_restrictions,json=regionRestrictions,proto3" json:"region_restrictions,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{26}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Volume) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Volume) GetCensorship() string {
	if x != nil {
		return x.Censorship
	}
	return ""
}

func (x *Volume) GetPublishingType() string {
	if x != nil {
		return x.PublishingType
	}
	return ""
}

func (x *Volume) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *Volume) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *Volume) GetIdentifier() int32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *Volume) GetNames() []*Text {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Volume) GetAliases() []*Text {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Volume) GetDescriptions() []*Text {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Volume) GetCoverImageId() string {
	if x != nil {
		return x.CoverImageId
	}
	return ""
}

func (x *Volume) GetBannerImageId() string {
	if x != nil {
		return x.BannerImageId
	}
	return ""
}

func (x *Volume) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

func (x *Volume) GetMarketplaces() []*Marketplace {
	if x != nil {
		return x.Marketplaces
	}
	return nil
}

func (x *Volume) GetStarring() []*Cast {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Volume) GetStaff() []*Collaboration {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *Volume) GetMaturityRatings() []string {
	if x != nil {
		return x.MaturityRatings
	}
	return nil
}

func (x *Volume) GetRegionRestrictions() []string {
	if x != nil {
		return x.RegionRestrictions
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Localization string `protobuf:"bytes,2,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{27}
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Text) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

type Running struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Localization string                 `protobuf:"bytes,3,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Running) Reset() {
	*x = Running{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Running) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Running) ProtoMessage() {}

func (x *Running) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Running.ProtoReflect.Descriptor instead.
func (*Running) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{28}
}

func (x *Running) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Running) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Running) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{29}
}

func (x *Edge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//ContentRelation represent the relation between 2 different content.
//The ContentReleation field is common to both the content, therefore the server do not need
//to have both relations (from content A to B, and from B to A) because it will generate automatically
//the reverse relation.
//
//> Sending A sequel of B, the server will generate B prequel A
//
//The relation has to be read as
//entity -> has <relation> -> which is <related>
//EG: Naruto -> Sequel -> Naruto Shippuden = <Naruto> has <sequel>, which is <Naruto Shippuden>
type ContentRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Related *Edge `protobuf:"bytes,1,opt,name=related,proto3" json:"related,omitempty"`
	//
	//Valid relations:
	//ADAPTATION implies that the subject is the base from which the object has been adapted
	//ADAPTATION
	//
	//BASE Adaptation
	//BASE
	//
	//SAMESETTING Same universe/world/reality/timeline with completely different characters.
	//SAME_SETTING
	//
	//ALTSETTING Same universe/world/reality/timeline same characters with different universe/world/reality/timeline.
	//ALTERNATIVE_SETTING
	//
	//ALTVERSION alternative version Same setting, same characters, story is told differently.
	//ALTERNATIVE_VERSION
	//
	//CHARACTER When characters appear in both series, but is not a spin-off
	//CHARACTER
	//
	//FULLSTORY the object is full story of the subject
	//this implies that the subject is a summary of the object
	//FULL_STORY
	//
	//SUMMARY summary
	//SUMMARY
	//
	//PARENTSTORY the object is the parent story of the subject
	//this implies that the subject is a spin-off of the object
	//PARENT_STORY
	//
	//SpinOff spin off
	//SPIN_OFF
	//
	//PREQUEL prequel
	//PREQUEL
	//
	//SEQUEL sequel
	//SEQUEL
	//
	//MAINSTORY the object is the main story from which the subject has been created
	//this implies that the subject is a side story of the object
	//MAIN_STORY
	//
	//SIDESTORY side story
	//SIDE_STORY
	//
	//ORIGINAL the object is the original of the subject
	//this implies that the subject is the parody or fan made object
	//ORIGINAL
	//
	//PARODY is parody
	//PARODY
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ContentRelation) Reset() {
	*x = ContentRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentRelation) ProtoMessage() {}

func (x *ContentRelation) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentRelation.ProtoReflect.Descriptor instead.
func (*ContentRelation) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{30}
}

func (x *ContentRelation) GetRelated() *Edge {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *ContentRelation) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

//
//Cast represnt the relation between a character and a content.
//The cast is always field of the content and the Edge points to the character.
type Cast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character *Edge `protobuf:"bytes,1,opt,name=character,proto3" json:"character,omitempty"`
	//
	//Valid relations:
	//MAIN
	//SUPPORT
	//APPEARS
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *Cast) Reset() {
	*x = Cast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cast) ProtoMessage() {}

func (x *Cast) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cast.ProtoReflect.Descriptor instead.
func (*Cast) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{31}
}

func (x *Cast) GetCharacter() *Edge {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *Cast) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

//
//Collaboration represent the relation between a content and a person or organization.
//The collaboration must be localizaed and it must carry the information about the role of the collaborator.
//The Collaboration is always field of the content and the Edge points to the collaborator.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the collaborator collaborated
type Collaboration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collaborator *Edge  `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	Localization string `protobuf:"bytes,2,opt,name=localization,proto3" json:"localization,omitempty"`
	Role         string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Collaboration) Reset() {
	*x = Collaboration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaboration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaboration) ProtoMessage() {}

func (x *Collaboration) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaboration.ProtoReflect.Descriptor instead.
func (*Collaboration) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{32}
}

func (x *Collaboration) GetCollaborator() *Edge {
	if x != nil {
		return x.Collaborator
	}
	return nil
}

func (x *Collaboration) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

func (x *Collaboration) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

//
//Voice Acting represent voice given by a person to a voiced entity in a specific content
//The Voice Acting is always field of the content and it must be localized.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the actor gave the voice to the entity
type VoiceActing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voiced       *Edge  `protobuf:"bytes,1,opt,name=voiced,proto3" json:"voiced,omitempty"`
	Actor        *Edge  `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	Localization string `protobuf:"bytes,3,opt,name=localization,proto3" json:"localization,omitempty"`
	//
	//Valid values:
	//TRUE
	//FALSE
	//UNKNOWN
	Primary string `protobuf:"bytes,4,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *VoiceActing) Reset() {
	*x = VoiceActing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceActing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceActing) ProtoMessage() {}

func (x *VoiceActing) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceActing.ProtoReflect.Descriptor instead.
func (*VoiceActing) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{33}
}

func (x *VoiceActing) GetVoiced() *Edge {
	if x != nil {
		return x.Voiced
	}
	return nil
}

func (x *VoiceActing) GetActor() *Edge {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *VoiceActing) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

func (x *VoiceActing) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

//
//Any kind of website related to the entity.
//Could be official website, twitter, or external resources such as wikipedia
type Website struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Website) Reset() {
	*x = Website{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Website) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Website) ProtoMessage() {}

func (x *Website) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Website.ProtoReflect.Descriptor instead.
func (*Website) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{34}
}

func (x *Website) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//
//Marketplace is where to consume the content.
//The name field must point to a valid valid marketplace id in order to load icon and name of the marketplace.
//If the marketplace is limited to some specific country, add them to the field region following the IOS3 standard
type Marketplace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Marketplace) Reset() {
	*x = Marketplace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marketplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marketplace) ProtoMessage() {}

func (x *Marketplace) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marketplace.ProtoReflect.Descriptor instead.
func (*Marketplace) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{35}
}

func (x *Marketplace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Marketplace) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Marketplace) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

//
//Soundtrack exposes the information about which Track has been used in which Content in which localization and for what.
//The localization must be a valid ISO3 localization which identifies the language/full localization of the content's version
//for which the Track is used
type Soundtrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track *Edge `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	//
	//Valid Soundtrack types:
	//Unknown type
	//UNKNOWN
	//
	//The track is used as ending
	//ENDING
	//
	//The track is used as opening
	//OPENING
	//
	//The track is used as insert song
	//INSERT
	//
	//The track is used as background song
	//BACKGROUND
	//
	//The track is used as image song
	//IMAGE
	//
	//The track is used as theme song
	//THEME
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	//
	//Valid track versions:
	//Unknown version
	//UNKNOWN
	//
	//Normal version of the track
	//NORMAL
	//
	//Instrumental version
	//INSTRUMENTAL
	//
	//Only piano version
	//PIANO
	//
	//Japanese version
	//JAPANESE
	//
	//English version
	//ENGLISH
	//
	//TV version of the track
	//TV
	//
	//The track has been mixed with another
	//MIX
	//
	//The track has been remixed
	//REMIX
	//
	//Extended version of the track
	//EXTENDED
	//
	//other
	//OTHER
	Version      string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Localization string `protobuf:"bytes,4,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *Soundtrack) Reset() {
	*x = Soundtrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soundtrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soundtrack) ProtoMessage() {}

func (x *Soundtrack) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soundtrack.ProtoReflect.Descriptor instead.
func (*Soundtrack) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{36}
}

func (x *Soundtrack) GetTrack() *Edge {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *Soundtrack) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Soundtrack) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Soundtrack) GetLocalization() string {
	if x != nil {
		return x.Localization
	}
	return ""
}

//
//TrackListing exposes the information about which Track has been released from which MusicRelease in which version and in whic order.
type TrackListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicRelease *Edge `protobuf:"bytes,1,opt,name=musicRelease,proto3" json:"musicRelease,omitempty"`
	//
	//Valid track versions:
	//Unknown version
	//UNKNOWN
	//
	//Normal version of the track
	//NORMAL
	//
	//Instrumental version
	//INSTRUMENTAL
	//
	//Only piano version
	//PIANO
	//
	//Japanese version
	//JAPANESE
	//
	//English version
	//ENGLISH
	//
	//TV version of the track
	//TV
	//
	//The track has been mixed with another
	//MIX
	//
	//The track has been remixed
	//REMIX
	//
	//Extended version of the track
	//EXTENDED
	//
	//other
	//OTHER
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Index   int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TrackListing) Reset() {
	*x = TrackListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackListing) ProtoMessage() {}

func (x *TrackListing) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackListing.ProtoReflect.Descriptor instead.
func (*TrackListing) Descriptor() ([]byte, []int) {
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP(), []int{37}
}

func (x *TrackListing) GetMusicRelease() *Edge {
	if x != nil {
		return x.MusicRelease
	}
	return nil
}

func (x *TrackListing) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TrackListing) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_animeshon_knowledge_v1alpha1_knowledge_proto protoreflect.FileDescriptor

var file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a,
	0x1b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x1c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x22, 0x96, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x38, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x35, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x07, 0x0a,
	0x0b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x44, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0xe9, 0x0a, 0x0a, 0x05, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x04, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xb3, 0x07, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3e, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x07, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x44, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x3e, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x12,
	0x42, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x62, 0x75, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x07, 0x67, 0x75, 0x69, 0x73, 0x65, 0x4f, 0x66, 0x22,
	0xaf, 0x07, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xe7, 0x0a, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x73, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x62, 0x44, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x72, 0x6f,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x72, 0x6f, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x0a, 0x0a, 0x0c,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x22, 0xfd, 0x09, 0x0a, 0x0a, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x22, 0xe7, 0x03, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0xa5, 0x04, 0x0a, 0x06,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x22, 0xbe, 0x05, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x22, 0xc7, 0x04, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x22, 0x8f,
	0x0a, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x3a, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x8e, 0x07, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a,
	0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x75,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x20,
	0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x55, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0xef,
	0x0b, 0x0a, 0x09, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xae, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc2,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xb8, 0x01, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xc3,
	0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0xca, 0x41, 0x17, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x42, 0x84, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0xea, 0x02, 0x1e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x3a, 0x3a, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x3a, 0x3a, 0x76,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescOnce sync.Once
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData = file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc
)

func file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescGZIP() []byte {
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescOnce.Do(func() {
		file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData)
	})
	return file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDescData
}

var file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes = []interface{}{
	(Contribution_State)(0),               // 0: animeshon.knowledge.v1alpha1.Contribution.State
	(*AllocateResourceNameRequest)(nil),   // 1: animeshon.knowledge.v1alpha1.AllocateResourceNameRequest
	(*AllocateResourceNameResponse)(nil),  // 2: animeshon.knowledge.v1alpha1.AllocateResourceNameResponse
	(*ContributionChanges)(nil),           // 3: animeshon.knowledge.v1alpha1.ContributionChanges
	(*Contribution)(nil),                  // 4: animeshon.knowledge.v1alpha1.Contribution
	(*ReviewContributionRequest)(nil),     // 5: animeshon.knowledge.v1alpha1.ReviewContributionRequest
	(*CreateContributionRequest)(nil),     // 6: animeshon.knowledge.v1alpha1.CreateContributionRequest
	(*ListContributionsRequest)(nil),      // 7: animeshon.knowledge.v1alpha1.ListContributionsRequest
	(*ListContributionsResponse)(nil),     // 8: animeshon.knowledge.v1alpha1.ListContributionsResponse
	(*GetContributionChangesRequest)(nil), // 9: animeshon.knowledge.v1alpha1.GetContributionChangesRequest
	(*GetContributionRequest)(nil),        // 10: animeshon.knowledge.v1alpha1.GetContributionRequest
	(*ApproveContributionRequest)(nil),    // 11: animeshon.knowledge.v1alpha1.ApproveContributionRequest
	(*RejectContributionRequest)(nil),     // 12: animeshon.knowledge.v1alpha1.RejectContributionRequest
	(*EntryEntity)(nil),                   // 13: animeshon.knowledge.v1alpha1.EntryEntity
	(*Anime)(nil),                         // 14: animeshon.knowledge.v1alpha1.Anime
	(*Canonical)(nil),                     // 15: animeshon.knowledge.v1alpha1.Canonical
	(*Chapter)(nil),                       // 16: animeshon.knowledge.v1alpha1.Chapter
	(*Character)(nil),                     // 17: animeshon.knowledge.v1alpha1.Character
	(*Episode)(nil),                       // 18: animeshon.knowledge.v1alpha1.Episode
	(*GameRelease)(nil),                   // 19: animeshon.knowledge.v1alpha1.GameRelease
	(*GraphicNovel)(nil),                  // 20: animeshon.knowledge.v1alpha1.GraphicNovel
	(*LightNovel)(nil),                    // 21: animeshon.knowledge.v1alpha1.LightNovel
	(*Organization)(nil),                  // 22: animeshon.knowledge.v1alpha1.Organization
	(*Person)(nil),                        // 23: animeshon.knowledge.v1alpha1.Person
	(*Track)(nil),                         // 24: animeshon.knowledge.v1alpha1.Track
	(*Universe)(nil),                      // 25: animeshon.knowledge.v1alpha1.Universe
	(*VisualNovel)(nil),                   // 26: animeshon.knowledge.v1alpha1.VisualNovel
	(*Volume)(nil),                        // 27: animeshon.knowledge.v1alpha1.Volume
	(*Text)(nil),                          // 28: animeshon.knowledge.v1alpha1.Text
	(*Running)(nil),                       // 29: animeshon.knowledge.v1alpha1.Running
	(*Edge)(nil),                          // 30: animeshon.knowledge.v1alpha1.Edge
	(*ContentRelation)(nil),               // 31: animeshon.knowledge.v1alpha1.ContentRelation
	(*Cast)(nil),                          // 32: animeshon.knowledge.v1alpha1.Cast
	(*Collaboration)(nil),                 // 33: animeshon.knowledge.v1alpha1.Collaboration
	(*VoiceActing)(nil),                   // 34: animeshon.knowledge.v1alpha1.VoiceActing
	(*Website)(nil),                       // 35: animeshon.knowledge.v1alpha1.Website
	(*Marketplace)(nil),                   // 36: animeshon.knowledge.v1alpha1.Marketplace
	(*Soundtrack)(nil),                    // 37: animeshon.knowledge.v1alpha1.Soundtrack
	(*TrackListing)(nil),                  // 38: animeshon.knowledge.v1alpha1.TrackListing
	(*timestamppb.Timestamp)(nil),         // 39: google.protobuf.Timestamp
}
var file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs = []int32{
	13,  // 0: animeshon.knowledge.v1alpha1.ContributionChanges.additions:type_name -> animeshon.knowledge.v1alpha1.EntryEntity
	13,  // 1: animeshon.knowledge.v1alpha1.ContributionChanges.deletions:type_name -> animeshon.knowledge.v1alpha1.EntryEntity
	0,   // 2: animeshon.knowledge.v1alpha1.Contribution.state:type_name -> animeshon.knowledge.v1alpha1.Contribution.State
	39,  // 3: animeshon.knowledge.v1alpha1.Contribution.create_time:type_name -> google.protobuf.Timestamp
	39,  // 4: animeshon.knowledge.v1alpha1.Contribution.update_time:type_name -> google.protobuf.Timestamp
	39,  // 5: animeshon.knowledge.v1alpha1.Contribution.review_time:type_name -> google.protobuf.Timestamp
	3,   // 6: animeshon.knowledge.v1alpha1.ReviewContributionRequest.changes:type_name -> animeshon.knowledge.v1alpha1.ContributionChanges
	4,   // 7: animeshon.knowledge.v1alpha1.CreateContributionRequest.contribution:type_name -> animeshon.knowledge.v1alpha1.Contribution
	3,   // 8: animeshon.knowledge.v1alpha1.CreateContributionRequest.changes:type_name -> animeshon.knowledge.v1alpha1.ContributionChanges
	4,   // 9: animeshon.knowledge.v1alpha1.ListContributionsResponse.contributions:type_name -> animeshon.knowledge.v1alpha1.Contribution
	14,  // 10: animeshon.knowledge.v1alpha1.EntryEntity.anime:type_name -> animeshon.knowledge.v1alpha1.Anime
	15,  // 11: animeshon.knowledge.v1alpha1.EntryEntity.canonical:type_name -> animeshon.knowledge.v1alpha1.Canonical
	16,  // 12: animeshon.knowledge.v1alpha1.EntryEntity.chapter:type_name -> animeshon.knowledge.v1alpha1.Chapter
	17,  // 13: animeshon.knowledge.v1alpha1.EntryEntity.character:type_name -> animeshon.knowledge.v1alpha1.Character
	18,  // 14: animeshon.knowledge.v1alpha1.EntryEntity.episode:type_name -> animeshon.knowledge.v1alpha1.Episode
	19,  // 15: animeshon.knowledge.v1alpha1.EntryEntity.game_release:type_name -> animeshon.knowledge.v1alpha1.GameRelease
	20,  // 16: animeshon.knowledge.v1alpha1.EntryEntity.graphic_novel:type_name -> animeshon.knowledge.v1alpha1.GraphicNovel
	21,  // 17: animeshon.knowledge.v1alpha1.EntryEntity.light_novel:type_name -> animeshon.knowledge.v1alpha1.LightNovel
	22,  // 18: animeshon.knowledge.v1alpha1.EntryEntity.organization:type_name -> animeshon.knowledge.v1alpha1.Organization
	23,  // 19: animeshon.knowledge.v1alpha1.EntryEntity.person:type_name -> animeshon.knowledge.v1alpha1.Person
	24,  // 20: animeshon.knowledge.v1alpha1.EntryEntity.track:type_name -> animeshon.knowledge.v1alpha1.Track
	25,  // 21: animeshon.knowledge.v1alpha1.EntryEntity.universe:type_name -> animeshon.knowledge.v1alpha1.Universe
	27,  // 22: animeshon.knowledge.v1alpha1.EntryEntity.volume:type_name -> animeshon.knowledge.v1alpha1.Volume
	30,  // 23: animeshon.knowledge.v1alpha1.Anime.episodes:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 24: animeshon.knowledge.v1alpha1.Anime.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 25: animeshon.knowledge.v1alpha1.Anime.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 26: animeshon.knowledge.v1alpha1.Anime.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 27: animeshon.knowledge.v1alpha1.Anime.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 28: animeshon.knowledge.v1alpha1.Anime.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	31,  // 29: animeshon.knowledge.v1alpha1.Anime.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	29,  // 30: animeshon.knowledge.v1alpha1.Anime.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	39,  // 31: animeshon.knowledge.v1alpha1.Anime.release_date:type_name -> google.protobuf.Timestamp
	32,  // 32: animeshon.knowledge.v1alpha1.Anime.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 33: animeshon.knowledge.v1alpha1.Anime.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 34: animeshon.knowledge.v1alpha1.Anime.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 35: animeshon.knowledge.v1alpha1.Anime.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	37,  // 36: animeshon.knowledge.v1alpha1.Anime.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	34,  // 37: animeshon.knowledge.v1alpha1.Anime.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	28,  // 38: animeshon.knowledge.v1alpha1.Canonical.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 39: animeshon.knowledge.v1alpha1.Canonical.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 40: animeshon.knowledge.v1alpha1.Canonical.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 41: animeshon.knowledge.v1alpha1.Canonical.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 42: animeshon.knowledge.v1alpha1.Canonical.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	30,  // 43: animeshon.knowledge.v1alpha1.Canonical.contents:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 44: animeshon.knowledge.v1alpha1.Chapter.episodes:type_name -> animeshon.knowledge.v1alpha1.Edge
	39,  // 45: animeshon.knowledge.v1alpha1.Chapter.release_date:type_name -> google.protobuf.Timestamp
	28,  // 46: animeshon.knowledge.v1alpha1.Chapter.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 47: animeshon.knowledge.v1alpha1.Chapter.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 48: animeshon.knowledge.v1alpha1.Chapter.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 49: animeshon.knowledge.v1alpha1.Chapter.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 50: animeshon.knowledge.v1alpha1.Chapter.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	32,  // 51: animeshon.knowledge.v1alpha1.Chapter.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 52: animeshon.knowledge.v1alpha1.Chapter.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 53: animeshon.knowledge.v1alpha1.Chapter.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 54: animeshon.knowledge.v1alpha1.Character.hometown:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 55: animeshon.knowledge.v1alpha1.Character.birthplace:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 56: animeshon.knowledge.v1alpha1.Character.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 57: animeshon.knowledge.v1alpha1.Character.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 58: animeshon.knowledge.v1alpha1.Character.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 59: animeshon.knowledge.v1alpha1.Character.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 60: animeshon.knowledge.v1alpha1.Character.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	30,  // 61: animeshon.knowledge.v1alpha1.Character.guise_of:type_name -> animeshon.knowledge.v1alpha1.Edge
	39,  // 62: animeshon.knowledge.v1alpha1.Episode.release_date:type_name -> google.protobuf.Timestamp
	28,  // 63: animeshon.knowledge.v1alpha1.Episode.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 64: animeshon.knowledge.v1alpha1.Episode.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 65: animeshon.knowledge.v1alpha1.Episode.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 66: animeshon.knowledge.v1alpha1.Episode.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 67: animeshon.knowledge.v1alpha1.Episode.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	32,  // 68: animeshon.knowledge.v1alpha1.Episode.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 69: animeshon.knowledge.v1alpha1.Episode.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	37,  // 70: animeshon.knowledge.v1alpha1.Episode.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	34,  // 71: animeshon.knowledge.v1alpha1.Episode.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	39,  // 72: animeshon.knowledge.v1alpha1.GameRelease.release_date:type_name -> google.protobuf.Timestamp
	28,  // 73: animeshon.knowledge.v1alpha1.GameRelease.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 74: animeshon.knowledge.v1alpha1.GameRelease.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 75: animeshon.knowledge.v1alpha1.GameRelease.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 76: animeshon.knowledge.v1alpha1.GameRelease.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 77: animeshon.knowledge.v1alpha1.GameRelease.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	32,  // 78: animeshon.knowledge.v1alpha1.GameRelease.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 79: animeshon.knowledge.v1alpha1.GameRelease.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	37,  // 80: animeshon.knowledge.v1alpha1.GameRelease.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	34,  // 81: animeshon.knowledge.v1alpha1.GameRelease.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	30,  // 82: animeshon.knowledge.v1alpha1.GraphicNovel.chapters:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 83: animeshon.knowledge.v1alpha1.GraphicNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 84: animeshon.knowledge.v1alpha1.GraphicNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 85: animeshon.knowledge.v1alpha1.GraphicNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 86: animeshon.knowledge.v1alpha1.GraphicNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 87: animeshon.knowledge.v1alpha1.GraphicNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	31,  // 88: animeshon.knowledge.v1alpha1.GraphicNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	29,  // 89: animeshon.knowledge.v1alpha1.GraphicNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	39,  // 90: animeshon.knowledge.v1alpha1.GraphicNovel.release_date:type_name -> google.protobuf.Timestamp
	32,  // 91: animeshon.knowledge.v1alpha1.GraphicNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 92: animeshon.knowledge.v1alpha1.GraphicNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 93: animeshon.knowledge.v1alpha1.GraphicNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 94: animeshon.knowledge.v1alpha1.GraphicNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 95: animeshon.knowledge.v1alpha1.GraphicNovel.volumes:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 96: animeshon.knowledge.v1alpha1.LightNovel.chapters:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 97: animeshon.knowledge.v1alpha1.LightNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 98: animeshon.knowledge.v1alpha1.LightNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 99: animeshon.knowledge.v1alpha1.LightNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 100: animeshon.knowledge.v1alpha1.LightNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 101: animeshon.knowledge.v1alpha1.LightNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	31,  // 102: animeshon.knowledge.v1alpha1.LightNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	29,  // 103: animeshon.knowledge.v1alpha1.LightNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	39,  // 104: animeshon.knowledge.v1alpha1.LightNovel.release_date:type_name -> google.protobuf.Timestamp
	32,  // 105: animeshon.knowledge.v1alpha1.LightNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 106: animeshon.knowledge.v1alpha1.LightNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 107: animeshon.knowledge.v1alpha1.LightNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 108: animeshon.knowledge.v1alpha1.LightNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 109: animeshon.knowledge.v1alpha1.LightNovel.volumes:type_name -> animeshon.knowledge.v1alpha1.Edge
	39,  // 110: animeshon.knowledge.v1alpha1.Organization.foundation_date:type_name -> google.protobuf.Timestamp
	28,  // 111: animeshon.knowledge.v1alpha1.Organization.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 112: animeshon.knowledge.v1alpha1.Organization.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 113: animeshon.knowledge.v1alpha1.Organization.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 114: animeshon.knowledge.v1alpha1.Organization.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	39,  // 115: animeshon.knowledge.v1alpha1.Person.birthday:type_name -> google.protobuf.Timestamp
	28,  // 116: animeshon.knowledge.v1alpha1.Person.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 117: animeshon.knowledge.v1alpha1.Person.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 118: animeshon.knowledge.v1alpha1.Person.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 119: animeshon.knowledge.v1alpha1.Person.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	39,  // 120: animeshon.knowledge.v1alpha1.Track.release_date:type_name -> google.protobuf.Timestamp
	28,  // 121: animeshon.knowledge.v1alpha1.Track.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 122: animeshon.knowledge.v1alpha1.Track.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 123: animeshon.knowledge.v1alpha1.Track.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 124: animeshon.knowledge.v1alpha1.Track.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 125: animeshon.knowledge.v1alpha1.Track.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	33,  // 126: animeshon.knowledge.v1alpha1.Track.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 127: animeshon.knowledge.v1alpha1.Track.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 128: animeshon.knowledge.v1alpha1.Track.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 129: animeshon.knowledge.v1alpha1.Universe.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 130: animeshon.knowledge.v1alpha1.Universe.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 131: animeshon.knowledge.v1alpha1.Universe.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 132: animeshon.knowledge.v1alpha1.Universe.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 133: animeshon.knowledge.v1alpha1.Universe.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	30,  // 134: animeshon.knowledge.v1alpha1.Universe.contents:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 135: animeshon.knowledge.v1alpha1.Universe.canonicals:type_name -> animeshon.knowledge.v1alpha1.Edge
	28,  // 136: animeshon.knowledge.v1alpha1.VisualNovel.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 137: animeshon.knowledge.v1alpha1.VisualNovel.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 138: animeshon.knowledge.v1alpha1.VisualNovel.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 139: animeshon.knowledge.v1alpha1.VisualNovel.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 140: animeshon.knowledge.v1alpha1.VisualNovel.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	31,  // 141: animeshon.knowledge.v1alpha1.VisualNovel.content_relations:type_name -> animeshon.knowledge.v1alpha1.ContentRelation
	29,  // 142: animeshon.knowledge.v1alpha1.VisualNovel.runnings:type_name -> animeshon.knowledge.v1alpha1.Running
	39,  // 143: animeshon.knowledge.v1alpha1.VisualNovel.release_date:type_name -> google.protobuf.Timestamp
	32,  // 144: animeshon.knowledge.v1alpha1.VisualNovel.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 145: animeshon.knowledge.v1alpha1.VisualNovel.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	30,  // 146: animeshon.knowledge.v1alpha1.VisualNovel.genres:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 147: animeshon.knowledge.v1alpha1.VisualNovel.releases:type_name -> animeshon.knowledge.v1alpha1.Edge
	37,  // 148: animeshon.knowledge.v1alpha1.VisualNovel.soundtracks:type_name -> animeshon.knowledge.v1alpha1.Soundtrack
	34,  // 149: animeshon.knowledge.v1alpha1.VisualNovel.voiceactings:type_name -> animeshon.knowledge.v1alpha1.VoiceActing
	39,  // 150: animeshon.knowledge.v1alpha1.Volume.release_date:type_name -> google.protobuf.Timestamp
	28,  // 151: animeshon.knowledge.v1alpha1.Volume.names:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 152: animeshon.knowledge.v1alpha1.Volume.aliases:type_name -> animeshon.knowledge.v1alpha1.Text
	28,  // 153: animeshon.knowledge.v1alpha1.Volume.descriptions:type_name -> animeshon.knowledge.v1alpha1.Text
	35,  // 154: animeshon.knowledge.v1alpha1.Volume.websites:type_name -> animeshon.knowledge.v1alpha1.Website
	36,  // 155: animeshon.knowledge.v1alpha1.Volume.marketplaces:type_name -> animeshon.knowledge.v1alpha1.Marketplace
	32,  // 156: animeshon.knowledge.v1alpha1.Volume.starring:type_name -> animeshon.knowledge.v1alpha1.Cast
	33,  // 157: animeshon.knowledge.v1alpha1.Volume.staff:type_name -> animeshon.knowledge.v1alpha1.Collaboration
	39,  // 158: animeshon.knowledge.v1alpha1.Running.start_time:type_name -> google.protobuf.Timestamp
	39,  // 159: animeshon.knowledge.v1alpha1.Running.end_time:type_name -> google.protobuf.Timestamp
	30,  // 160: animeshon.knowledge.v1alpha1.ContentRelation.related:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 161: animeshon.knowledge.v1alpha1.Cast.character:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 162: animeshon.knowledge.v1alpha1.Collaboration.collaborator:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 163: animeshon.knowledge.v1alpha1.VoiceActing.voiced:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 164: animeshon.knowledge.v1alpha1.VoiceActing.actor:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 165: animeshon.knowledge.v1alpha1.Soundtrack.track:type_name -> animeshon.knowledge.v1alpha1.Edge
	30,  // 166: animeshon.knowledge.v1alpha1.TrackListing.musicRelease:type_name -> animeshon.knowledge.v1alpha1.Edge
	10,  // 167: animeshon.knowledge.v1alpha1.Knowledge.GetContribution:input_type -> animeshon.knowledge.v1alpha1.GetContributionRequest
	7,   // 168: animeshon.knowledge.v1alpha1.Knowledge.ListContributions:input_type -> animeshon.knowledge.v1alpha1.ListContributionsRequest
	6,   // 169: animeshon.knowledge.v1alpha1.Knowledge.CreateContribution:input_type -> animeshon.knowledge.v1alpha1.CreateContributionRequest
	9,   // 170: animeshon.knowledge.v1alpha1.Knowledge.GetContributionChanges:input_type -> animeshon.knowledge.v1alpha1.GetContributionChangesRequest
	5,   // 171: animeshon.knowledge.v1alpha1.Knowledge.ReviewContribution:input_type -> animeshon.knowledge.v1alpha1.ReviewContributionRequest
	11,  // 172: animeshon.knowledge.v1alpha1.Knowledge.ApproveContribution:input_type -> animeshon.knowledge.v1alpha1.ApproveContributionRequest
	12,  // 173: animeshon.knowledge.v1alpha1.Knowledge.RejectContribution:input_type -> animeshon.knowledge.v1alpha1.RejectContributionRequest
	1,   // 174: animeshon.knowledge.v1alpha1.Knowledge.AllocateResourceName:input_type -> animeshon.knowledge.v1alpha1.AllocateResourceNameRequest
	4,   // 175: animeshon.knowledge.v1alpha1.Knowledge.GetContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	8,   // 176: animeshon.knowledge.v1alpha1.Knowledge.ListContributions:output_type -> animeshon.knowledge.v1alpha1.ListContributionsResponse
	4,   // 177: animeshon.knowledge.v1alpha1.Knowledge.CreateContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	3,   // 178: animeshon.knowledge.v1alpha1.Knowledge.GetContributionChanges:output_type -> animeshon.knowledge.v1alpha1.ContributionChanges
	4,   // 179: animeshon.knowledge.v1alpha1.Knowledge.ReviewContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	4,   // 180: animeshon.knowledge.v1alpha1.Knowledge.ApproveContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	4,   // 181: animeshon.knowledge.v1alpha1.Knowledge.RejectContribution:output_type -> animeshon.knowledge.v1alpha1.Contribution
	2,   // 182: animeshon.knowledge.v1alpha1.Knowledge.AllocateResourceName:output_type -> animeshon.knowledge.v1alpha1.AllocateResourceNameResponse
	175, // [175:183] is the sub-list for method output_type
	167, // [167:175] is the sub-list for method input_type
	167, // [167:167] is the sub-list for extension type_name
	167, // [167:167] is the sub-list for extension extendee
	0,   // [0:167] is the sub-list for field type_name
}

func init() { file_animeshon_knowledge_v1alpha1_knowledge_proto_init() }
func file_animeshon_knowledge_v1alpha1_knowledge_proto_init() {
	if File_animeshon_knowledge_v1alpha1_knowledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateResourceNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateResourceNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributionChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContributionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContributionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContributionChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Canonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Universe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisualNovel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Running); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaboration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceActing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Website); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marketplace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soundtrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*EntryEntity_Anime)(nil),
		(*EntryEntity_Canonical)(nil),
		(*EntryEntity_Chapter)(nil),
		(*EntryEntity_Character)(nil),
		(*EntryEntity_Episode)(nil),
		(*EntryEntity_GameRelease)(nil),
		(*EntryEntity_GraphicNovel)(nil),
		(*EntryEntity_LightNovel)(nil),
		(*EntryEntity_Organization)(nil),
		(*EntryEntity_Person)(nil),
		(*EntryEntity_Track)(nil),
		(*EntryEntity_Universe)(nil),
		(*EntryEntity_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes,
		DependencyIndexes: file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs,
		EnumInfos:         file_animeshon_knowledge_v1alpha1_knowledge_proto_enumTypes,
		MessageInfos:      file_animeshon_knowledge_v1alpha1_knowledge_proto_msgTypes,
	}.Build()
	File_animeshon_knowledge_v1alpha1_knowledge_proto = out.File
	file_animeshon_knowledge_v1alpha1_knowledge_proto_rawDesc = nil
	file_animeshon_knowledge_v1alpha1_knowledge_proto_goTypes = nil
	file_animeshon_knowledge_v1alpha1_knowledge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KnowledgeClient is the client API for Knowledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KnowledgeClient interface {
	GetContribution(ctx context.Context, in *GetContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ListContributionsResponse, error)
	CreateContribution(ctx context.Context, in *CreateContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	GetContributionChanges(ctx context.Context, in *GetContributionChangesRequest, opts ...grpc.CallOption) (*ContributionChanges, error)
	ReviewContribution(ctx context.Context, in *ReviewContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	ApproveContribution(ctx context.Context, in *ApproveContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	RejectContribution(ctx context.Context, in *RejectContributionRequest, opts ...grpc.CallOption) (*Contribution, error)
	AllocateResourceName(ctx context.Context, in *AllocateResourceNameRequest, opts ...grpc.CallOption) (*AllocateResourceNameResponse, error)
}

type knowledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeClient(cc grpc.ClientConnInterface) KnowledgeClient {
	return &knowledgeClient{cc}
}

func (c *knowledgeClient) GetContribution(ctx context.Context, in *GetContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/GetContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ListContributionsResponse, error) {
	out := new(ListContributionsResponse)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ListContributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) CreateContribution(ctx context.Context, in *CreateContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/CreateContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetContributionChanges(ctx context.Context, in *GetContributionChangesRequest, opts ...grpc.CallOption) (*ContributionChanges, error) {
	out := new(ContributionChanges)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/GetContributionChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ReviewContribution(ctx context.Context, in *ReviewContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ReviewContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ApproveContribution(ctx context.Context, in *ApproveContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/ApproveContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) RejectContribution(ctx context.Context, in *RejectContributionRequest, opts ...grpc.CallOption) (*Contribution, error) {
	out := new(Contribution)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/RejectContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) AllocateResourceName(ctx context.Context, in *AllocateResourceNameRequest, opts ...grpc.CallOption) (*AllocateResourceNameResponse, error) {
	out := new(AllocateResourceNameResponse)
	err := c.cc.Invoke(ctx, "/animeshon.knowledge.v1alpha1.Knowledge/AllocateResourceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServer is the server API for Knowledge service.
type KnowledgeServer interface {
	GetContribution(context.Context, *GetContributionRequest) (*Contribution, error)
	ListContributions(context.Context, *ListContributionsRequest) (*ListContributionsResponse, error)
	CreateContribution(context.Context, *CreateContributionRequest) (*Contribution, error)
	GetContributionChanges(context.Context, *GetContributionChangesRequest) (*ContributionChanges, error)
	ReviewContribution(context.Context, *ReviewContributionRequest) (*Contribution, error)
	ApproveContribution(context.Context, *ApproveContributionRequest) (*Contribution, error)
	RejectContribution(context.Context, *RejectContributionRequest) (*Contribution, error)
	AllocateResourceName(context.Context, *AllocateResourceNameRequest) (*AllocateResourceNameResponse, error)
}

// UnimplementedKnowledgeServer can be embedded to have forward compatible implementations.
type UnimplementedKnowledgeServer struct {
}

func (*UnimplementedKnowledgeServer) GetContribution(context.Context, *GetContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContribution not implemented")
}
func (*UnimplementedKnowledgeServer) ListContributions(context.Context, *ListContributionsRequest) (*ListContributionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContributions not implemented")
}
func (*UnimplementedKnowledgeServer) CreateContribution(context.Context, *CreateContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContribution not implemented")
}
func (*UnimplementedKnowledgeServer) GetContributionChanges(context.Context, *GetContributionChangesRequest) (*ContributionChanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributionChanges not implemented")
}
func (*UnimplementedKnowledgeServer) ReviewContribution(context.Context, *ReviewContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewContribution not implemented")
}
func (*UnimplementedKnowledgeServer) ApproveContribution(context.Context, *ApproveContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveContribution not implemented")
}
func (*UnimplementedKnowledgeServer) RejectContribution(context.Context, *RejectContributionRequest) (*Contribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectContribution not implemented")
}
func (*UnimplementedKnowledgeServer) AllocateResourceName(context.Context, *AllocateResourceNameRequest) (*AllocateResourceNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateResourceName not implemented")
}

func RegisterKnowledgeServer(s *grpc.Server, srv KnowledgeServer) {
	s.RegisterService(&_Knowledge_serviceDesc, srv)
}

func _Knowledge_GetContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/GetContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetContribution(ctx, req.(*GetContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ListContributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListContributions(ctx, req.(*ListContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_CreateContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).CreateContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/CreateContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).CreateContribution(ctx, req.(*CreateContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetContributionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetContributionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/GetContributionChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetContributionChanges(ctx, req.(*GetContributionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ReviewContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ReviewContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ReviewContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ReviewContribution(ctx, req.(*ReviewContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ApproveContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ApproveContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/ApproveContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ApproveContribution(ctx, req.(*ApproveContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_RejectContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).RejectContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/RejectContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).RejectContribution(ctx, req.(*RejectContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_AllocateResourceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateResourceNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).AllocateResourceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.knowledge.v1alpha1.Knowledge/AllocateResourceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).AllocateResourceName(ctx, req.(*AllocateResourceNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Knowledge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.knowledge.v1alpha1.Knowledge",
	HandlerType: (*KnowledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContribution",
			Handler:    _Knowledge_GetContribution_Handler,
		},
		{
			MethodName: "ListContributions",
			Handler:    _Knowledge_ListContributions_Handler,
		},
		{
			MethodName: "CreateContribution",
			Handler:    _Knowledge_CreateContribution_Handler,
		},
		{
			MethodName: "GetContributionChanges",
			Handler:    _Knowledge_GetContributionChanges_Handler,
		},
		{
			MethodName: "ReviewContribution",
			Handler:    _Knowledge_ReviewContribution_Handler,
		},
		{
			MethodName: "ApproveContribution",
			Handler:    _Knowledge_ApproveContribution_Handler,
		},
		{
			MethodName: "RejectContribution",
			Handler:    _Knowledge_RejectContribution_Handler,
		},
		{
			MethodName: "AllocateResourceName",
			Handler:    _Knowledge_AllocateResourceName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/knowledge/v1alpha1/knowledge.proto",
}
