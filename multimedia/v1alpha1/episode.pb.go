// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.18.1
// source: animeshon/multimedia/v1alpha1/episode.proto

package multimedia

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/iam/v1"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	status "google.golang.org/genproto/googleapis/rpc/status"
	date "google.golang.org/genproto/googleapis/type/date"
	localized_text "google.golang.org/genproto/googleapis/type/localized_text"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Episode_Type int32

const (
	// The default value. This value is used if the state is omitted.
	Episode_TYPE_UNSPECIFIED Episode_Type = 0
	// The episode is a regular canonical episode.
	Episode_REGULAR Episode_Type = 1
	// The episode is a recap.
	Episode_RECAP Episode_Type = 2
	// The episode is a parody.
	Episode_PARODY Episode_Type = 3
	// The episode is a promo.
	Episode_PROMO Episode_Type = 4
	// The episode is a special.
	Episode_SPECIAL Episode_Type = 5
	// The episode is an opening or ending.
	Episode_OPENING_ENDING Episode_Type = 6
	// The episode is unclassified.
	Episode_OTHER Episode_Type = 7
)

// Enum value maps for Episode_Type.
var (
	Episode_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "REGULAR",
		2: "RECAP",
		3: "PARODY",
		4: "PROMO",
		5: "SPECIAL",
		6: "OPENING_ENDING",
		7: "OTHER",
	}
	Episode_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"REGULAR":          1,
		"RECAP":            2,
		"PARODY":           3,
		"PROMO":            4,
		"SPECIAL":          5,
		"OPENING_ENDING":   6,
		"OTHER":            7,
	}
)

func (x Episode_Type) Enum() *Episode_Type {
	p := new(Episode_Type)
	*p = x
	return p
}

func (x Episode_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Episode_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_animeshon_multimedia_v1alpha1_episode_proto_enumTypes[0].Descriptor()
}

func (Episode_Type) Type() protoreflect.EnumType {
	return &file_animeshon_multimedia_v1alpha1_episode_proto_enumTypes[0]
}

func (x Episode_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Episode_Type.Descriptor instead.
func (Episode_Type) EnumDescriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{0, 0}
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the episode.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The cover image of the episode.
	CoverImage string `protobuf:"bytes,2,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	// The banner image of the episode.
	BannerImage string `protobuf:"bytes,3,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	// The title of the episode localized in multiple languages.
	Title []*localized_text.LocalizedText `protobuf:"bytes,4,rep,name=title,proto3" json:"title,omitempty"`
	// The synopsis of the episode localized in multiple languages.
	Synopsis []*localized_text.LocalizedText `protobuf:"bytes,5,rep,name=synopsis,proto3" json:"synopsis,omitempty"`
	// The description of the episode localized in multiple languages.
	Description []*localized_text.LocalizedText `protobuf:"bytes,6,rep,name=description,proto3" json:"description,omitempty"`
	// The type of episode.
	Type Episode_Type `protobuf:"varint,7,opt,name=type,proto3,enum=animeshon.multimedia.v1alpha1.Episode_Type" json:"type,omitempty"`
	// The index of episode.
	Index int32 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
	// The original release date of episode.
	ReleaseDate *date.Date `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// The original duration of the episode.
	Duration *durationpb.Duration `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{0}
}

func (x *Episode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Episode) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Episode) GetBannerImage() string {
	if x != nil {
		return x.BannerImage
	}
	return ""
}

func (x *Episode) GetTitle() []*localized_text.LocalizedText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Episode) GetSynopsis() []*localized_text.LocalizedText {
	if x != nil {
		return x.Synopsis
	}
	return nil
}

func (x *Episode) GetDescription() []*localized_text.LocalizedText {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Episode) GetType() Episode_Type {
	if x != nil {
		return x.Type
	}
	return Episode_TYPE_UNSPECIFIED
}

func (x *Episode) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Episode) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Episode) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type GetEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the episode to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEpisodeRequest) Reset() {
	*x = GetEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpisodeRequest) ProtoMessage() {}

func (x *GetEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpisodeRequest.ProtoReflect.Descriptor instead.
func (*GetEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{1}
}

func (x *GetEpisodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListEpisodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent this episode belongs to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned from the previous call.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter to be applied to results.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListEpisodesRequest) Reset() {
	*x = ListEpisodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEpisodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEpisodesRequest) ProtoMessage() {}

func (x *ListEpisodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEpisodesRequest.ProtoReflect.Descriptor instead.
func (*ListEpisodesRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{2}
}

func (x *ListEpisodesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListEpisodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEpisodesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEpisodesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListEpisodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of episodes.
	Episodes []*Episode `protobuf:"bytes,1,rep,name=episodes,proto3" json:"episodes,omitempty"`
	// A token to retrieve next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListEpisodesResponse) Reset() {
	*x = ListEpisodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEpisodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEpisodesResponse) ProtoMessage() {}

func (x *ListEpisodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEpisodesResponse.ProtoReflect.Descriptor instead.
func (*ListEpisodesResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{3}
}

func (x *ListEpisodesResponse) GetEpisodes() []*Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *ListEpisodesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent this episode belongs to.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The episode to create.
	Episode *Episode `protobuf:"bytes,2,opt,name=episode,proto3" json:"episode,omitempty"`
	// An idempotent identifier to be used as static resource id.
	IdempotentResourceId int64 `protobuf:"varint,3,opt,name=idempotent_resource_id,json=idempotentResourceId,proto3" json:"idempotent_resource_id,omitempty"`
}

func (x *CreateEpisodeRequest) Reset() {
	*x = CreateEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEpisodeRequest) ProtoMessage() {}

func (x *CreateEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEpisodeRequest.ProtoReflect.Descriptor instead.
func (*CreateEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEpisodeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateEpisodeRequest) GetEpisode() *Episode {
	if x != nil {
		return x.Episode
	}
	return nil
}

func (x *CreateEpisodeRequest) GetIdempotentResourceId() int64 {
	if x != nil {
		return x.IdempotentResourceId
	}
	return 0
}

type BatchCreateEpisodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual create episode requests for this batch.
	Requests []*BatchCreateEpisodesRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// The parent this batch belongs to.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *BatchCreateEpisodesRequest) Reset() {
	*x = BatchCreateEpisodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEpisodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEpisodesRequest) ProtoMessage() {}

func (x *BatchCreateEpisodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEpisodesRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateEpisodesRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{5}
}

func (x *BatchCreateEpisodesRequest) GetRequests() []*BatchCreateEpisodesRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateEpisodesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type BatchCreateEpisodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual responses to create episode requests within the batch.
	Responses []*BatchCreateEpisodesResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BatchCreateEpisodesResponse) Reset() {
	*x = BatchCreateEpisodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEpisodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEpisodesResponse) ProtoMessage() {}

func (x *BatchCreateEpisodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEpisodesResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateEpisodesResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{6}
}

func (x *BatchCreateEpisodesResponse) GetResponses() []*BatchCreateEpisodesResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UpdateEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The episode to update.
	Episode *Episode `protobuf:"bytes,1,opt,name=episode,proto3" json:"episode,omitempty"`
	// The field mask to determine which fields are to be updated. If empty, the
	// server will assume all fields are to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEpisodeRequest) Reset() {
	*x = UpdateEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEpisodeRequest) ProtoMessage() {}

func (x *UpdateEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEpisodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateEpisodeRequest) GetEpisode() *Episode {
	if x != nil {
		return x.Episode
	}
	return nil
}

func (x *UpdateEpisodeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the episode to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteEpisodeRequest) Reset() {
	*x = DeleteEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEpisodeRequest) ProtoMessage() {}

func (x *DeleteEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEpisodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteEpisodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReconcileEpisodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ReconcileEpisodesRequest) Reset() {
	*x = ReconcileEpisodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileEpisodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileEpisodesRequest) ProtoMessage() {}

func (x *ReconcileEpisodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileEpisodesRequest.ProtoReflect.Descriptor instead.
func (*ReconcileEpisodesRequest) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{9}
}

func (x *ReconcileEpisodesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ReconcileEpisodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconcileEpisodesResponse) Reset() {
	*x = ReconcileEpisodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileEpisodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileEpisodesResponse) ProtoMessage() {}

func (x *ReconcileEpisodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileEpisodesResponse.ProtoReflect.Descriptor instead.
func (*ReconcileEpisodesResponse) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{10}
}

type BatchCreateEpisodesRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The episode to create.
	Episode *Episode `protobuf:"bytes,1,opt,name=episode,proto3" json:"episode,omitempty"`
	// An idempotent identifier to be used as static resource id.
	IdempotentResourceId int64 `protobuf:"varint,2,opt,name=idempotent_resource_id,json=idempotentResourceId,proto3" json:"idempotent_resource_id,omitempty"`
}

func (x *BatchCreateEpisodesRequest_Request) Reset() {
	*x = BatchCreateEpisodesRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEpisodesRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEpisodesRequest_Request) ProtoMessage() {}

func (x *BatchCreateEpisodesRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEpisodesRequest_Request.ProtoReflect.Descriptor instead.
func (*BatchCreateEpisodesRequest_Request) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BatchCreateEpisodesRequest_Request) GetEpisode() *Episode {
	if x != nil {
		return x.Episode
	}
	return nil
}

func (x *BatchCreateEpisodesRequest_Request) GetIdempotentResourceId() int64 {
	if x != nil {
		return x.IdempotentResourceId
	}
	return 0
}

type BatchCreateEpisodesResponse_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created episode.
	Episode *Episode `protobuf:"bytes,1,opt,name=episode,proto3" json:"episode,omitempty"`
	// If set, represents the error message for the operation.
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchCreateEpisodesResponse_Response) Reset() {
	*x = BatchCreateEpisodesResponse_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEpisodesResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEpisodesResponse_Response) ProtoMessage() {}

func (x *BatchCreateEpisodesResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEpisodesResponse_Response.ProtoReflect.Descriptor instead.
func (*BatchCreateEpisodesResponse_Response) Descriptor() ([]byte, []int) {
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BatchCreateEpisodesResponse_Response) GetEpisode() *Episode {
	if x != nil {
		return x.Episode
	}
	return nil
}

func (x *BatchCreateEpisodesResponse_Response) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_animeshon_multimedia_v1alpha1_episode_proto protoreflect.FileDescriptor

var file_animeshon_multimedia_v1alpha1_episode_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x04, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x43, 0x41, 0x50,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x4f, 0x44, 0x59, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x1a, 0x86, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6d, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xf8, 0x01,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x1a, 0x76, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x2f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfa, 0x09, 0x0a,
	0x0e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x94, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x12, 0x24, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x9d,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f,
	0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xdc,
	0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68,
	0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0xca, 0x41, 0x30, 0x0a, 0x1b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa5, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x7b, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73,
	0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xd7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x2e, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0xca, 0x41,
	0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0x88, 0x01, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0xea, 0x02, 0x1f, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x6f, 0x6e, 0x3a, 0x3a,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3a, 0x3a, 0x76, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_animeshon_multimedia_v1alpha1_episode_proto_rawDescOnce sync.Once
	file_animeshon_multimedia_v1alpha1_episode_proto_rawDescData = file_animeshon_multimedia_v1alpha1_episode_proto_rawDesc
)

func file_animeshon_multimedia_v1alpha1_episode_proto_rawDescGZIP() []byte {
	file_animeshon_multimedia_v1alpha1_episode_proto_rawDescOnce.Do(func() {
		file_animeshon_multimedia_v1alpha1_episode_proto_rawDescData = protoimpl.X.CompressGZIP(file_animeshon_multimedia_v1alpha1_episode_proto_rawDescData)
	})
	return file_animeshon_multimedia_v1alpha1_episode_proto_rawDescData
}

var file_animeshon_multimedia_v1alpha1_episode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_animeshon_multimedia_v1alpha1_episode_proto_goTypes = []interface{}{
	(Episode_Type)(0),                            // 0: animeshon.multimedia.v1alpha1.Episode.Type
	(*Episode)(nil),                              // 1: animeshon.multimedia.v1alpha1.Episode
	(*GetEpisodeRequest)(nil),                    // 2: animeshon.multimedia.v1alpha1.GetEpisodeRequest
	(*ListEpisodesRequest)(nil),                  // 3: animeshon.multimedia.v1alpha1.ListEpisodesRequest
	(*ListEpisodesResponse)(nil),                 // 4: animeshon.multimedia.v1alpha1.ListEpisodesResponse
	(*CreateEpisodeRequest)(nil),                 // 5: animeshon.multimedia.v1alpha1.CreateEpisodeRequest
	(*BatchCreateEpisodesRequest)(nil),           // 6: animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest
	(*BatchCreateEpisodesResponse)(nil),          // 7: animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse
	(*UpdateEpisodeRequest)(nil),                 // 8: animeshon.multimedia.v1alpha1.UpdateEpisodeRequest
	(*DeleteEpisodeRequest)(nil),                 // 9: animeshon.multimedia.v1alpha1.DeleteEpisodeRequest
	(*ReconcileEpisodesRequest)(nil),             // 10: animeshon.multimedia.v1alpha1.ReconcileEpisodesRequest
	(*ReconcileEpisodesResponse)(nil),            // 11: animeshon.multimedia.v1alpha1.ReconcileEpisodesResponse
	(*BatchCreateEpisodesRequest_Request)(nil),   // 12: animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest.Request
	(*BatchCreateEpisodesResponse_Response)(nil), // 13: animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse.Response
	(*localized_text.LocalizedText)(nil),         // 14: google.type.LocalizedText
	(*date.Date)(nil),                            // 15: google.type.Date
	(*durationpb.Duration)(nil),                  // 16: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),                // 17: google.protobuf.FieldMask
	(*status.Status)(nil),                        // 18: google.rpc.Status
	(*longrunning.Operation)(nil),                // 19: google.longrunning.Operation
	(*emptypb.Empty)(nil),                        // 20: google.protobuf.Empty
}
var file_animeshon_multimedia_v1alpha1_episode_proto_depIdxs = []int32{
	14, // 0: animeshon.multimedia.v1alpha1.Episode.title:type_name -> google.type.LocalizedText
	14, // 1: animeshon.multimedia.v1alpha1.Episode.synopsis:type_name -> google.type.LocalizedText
	14, // 2: animeshon.multimedia.v1alpha1.Episode.description:type_name -> google.type.LocalizedText
	0,  // 3: animeshon.multimedia.v1alpha1.Episode.type:type_name -> animeshon.multimedia.v1alpha1.Episode.Type
	15, // 4: animeshon.multimedia.v1alpha1.Episode.release_date:type_name -> google.type.Date
	16, // 5: animeshon.multimedia.v1alpha1.Episode.duration:type_name -> google.protobuf.Duration
	1,  // 6: animeshon.multimedia.v1alpha1.ListEpisodesResponse.episodes:type_name -> animeshon.multimedia.v1alpha1.Episode
	1,  // 7: animeshon.multimedia.v1alpha1.CreateEpisodeRequest.episode:type_name -> animeshon.multimedia.v1alpha1.Episode
	12, // 8: animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest.requests:type_name -> animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest.Request
	13, // 9: animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse.responses:type_name -> animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse.Response
	1,  // 10: animeshon.multimedia.v1alpha1.UpdateEpisodeRequest.episode:type_name -> animeshon.multimedia.v1alpha1.Episode
	17, // 11: animeshon.multimedia.v1alpha1.UpdateEpisodeRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 12: animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest.Request.episode:type_name -> animeshon.multimedia.v1alpha1.Episode
	1,  // 13: animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse.Response.episode:type_name -> animeshon.multimedia.v1alpha1.Episode
	18, // 14: animeshon.multimedia.v1alpha1.BatchCreateEpisodesResponse.Response.error:type_name -> google.rpc.Status
	2,  // 15: animeshon.multimedia.v1alpha1.EpisodeService.GetEpisode:input_type -> animeshon.multimedia.v1alpha1.GetEpisodeRequest
	3,  // 16: animeshon.multimedia.v1alpha1.EpisodeService.ListEpisodes:input_type -> animeshon.multimedia.v1alpha1.ListEpisodesRequest
	5,  // 17: animeshon.multimedia.v1alpha1.EpisodeService.CreateEpisode:input_type -> animeshon.multimedia.v1alpha1.CreateEpisodeRequest
	6,  // 18: animeshon.multimedia.v1alpha1.EpisodeService.BatchCreateEpisodes:input_type -> animeshon.multimedia.v1alpha1.BatchCreateEpisodesRequest
	8,  // 19: animeshon.multimedia.v1alpha1.EpisodeService.UpdateEpisode:input_type -> animeshon.multimedia.v1alpha1.UpdateEpisodeRequest
	9,  // 20: animeshon.multimedia.v1alpha1.EpisodeService.DeleteEpisode:input_type -> animeshon.multimedia.v1alpha1.DeleteEpisodeRequest
	10, // 21: animeshon.multimedia.v1alpha1.EpisodeService.ReconcileEpisodes:input_type -> animeshon.multimedia.v1alpha1.ReconcileEpisodesRequest
	1,  // 22: animeshon.multimedia.v1alpha1.EpisodeService.GetEpisode:output_type -> animeshon.multimedia.v1alpha1.Episode
	4,  // 23: animeshon.multimedia.v1alpha1.EpisodeService.ListEpisodes:output_type -> animeshon.multimedia.v1alpha1.ListEpisodesResponse
	1,  // 24: animeshon.multimedia.v1alpha1.EpisodeService.CreateEpisode:output_type -> animeshon.multimedia.v1alpha1.Episode
	19, // 25: animeshon.multimedia.v1alpha1.EpisodeService.BatchCreateEpisodes:output_type -> google.longrunning.Operation
	1,  // 26: animeshon.multimedia.v1alpha1.EpisodeService.UpdateEpisode:output_type -> animeshon.multimedia.v1alpha1.Episode
	20, // 27: animeshon.multimedia.v1alpha1.EpisodeService.DeleteEpisode:output_type -> google.protobuf.Empty
	19, // 28: animeshon.multimedia.v1alpha1.EpisodeService.ReconcileEpisodes:output_type -> google.longrunning.Operation
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_animeshon_multimedia_v1alpha1_episode_proto_init() }
func file_animeshon_multimedia_v1alpha1_episode_proto_init() {
	if File_animeshon_multimedia_v1alpha1_episode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEpisodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEpisodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateEpisodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateEpisodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileEpisodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileEpisodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateEpisodesRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateEpisodesResponse_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_animeshon_multimedia_v1alpha1_episode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_animeshon_multimedia_v1alpha1_episode_proto_goTypes,
		DependencyIndexes: file_animeshon_multimedia_v1alpha1_episode_proto_depIdxs,
		EnumInfos:         file_animeshon_multimedia_v1alpha1_episode_proto_enumTypes,
		MessageInfos:      file_animeshon_multimedia_v1alpha1_episode_proto_msgTypes,
	}.Build()
	File_animeshon_multimedia_v1alpha1_episode_proto = out.File
	file_animeshon_multimedia_v1alpha1_episode_proto_rawDesc = nil
	file_animeshon_multimedia_v1alpha1_episode_proto_goTypes = nil
	file_animeshon_multimedia_v1alpha1_episode_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EpisodeServiceClient is the client API for EpisodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EpisodeServiceClient interface {
	GetEpisode(ctx context.Context, in *GetEpisodeRequest, opts ...grpc.CallOption) (*Episode, error)
	ListEpisodes(ctx context.Context, in *ListEpisodesRequest, opts ...grpc.CallOption) (*ListEpisodesResponse, error)
	CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error)
	BatchCreateEpisodes(ctx context.Context, in *BatchCreateEpisodesRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	UpdateEpisode(ctx context.Context, in *UpdateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error)
	DeleteEpisode(ctx context.Context, in *DeleteEpisodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reconcile episodes with the search and knowledge base.
	ReconcileEpisodes(ctx context.Context, in *ReconcileEpisodesRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type episodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeServiceClient(cc grpc.ClientConnInterface) EpisodeServiceClient {
	return &episodeServiceClient{cc}
}

func (c *episodeServiceClient) GetEpisode(ctx context.Context, in *GetEpisodeRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/GetEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) ListEpisodes(ctx context.Context, in *ListEpisodesRequest, opts ...grpc.CallOption) (*ListEpisodesResponse, error) {
	out := new(ListEpisodesResponse)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/ListEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/CreateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) BatchCreateEpisodes(ctx context.Context, in *BatchCreateEpisodesRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/BatchCreateEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) UpdateEpisode(ctx context.Context, in *UpdateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/UpdateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) DeleteEpisode(ctx context.Context, in *DeleteEpisodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/DeleteEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) ReconcileEpisodes(ctx context.Context, in *ReconcileEpisodesRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/animeshon.multimedia.v1alpha1.EpisodeService/ReconcileEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeServiceServer is the server API for EpisodeService service.
type EpisodeServiceServer interface {
	GetEpisode(context.Context, *GetEpisodeRequest) (*Episode, error)
	ListEpisodes(context.Context, *ListEpisodesRequest) (*ListEpisodesResponse, error)
	CreateEpisode(context.Context, *CreateEpisodeRequest) (*Episode, error)
	BatchCreateEpisodes(context.Context, *BatchCreateEpisodesRequest) (*longrunning.Operation, error)
	UpdateEpisode(context.Context, *UpdateEpisodeRequest) (*Episode, error)
	DeleteEpisode(context.Context, *DeleteEpisodeRequest) (*emptypb.Empty, error)
	// Reconcile episodes with the search and knowledge base.
	ReconcileEpisodes(context.Context, *ReconcileEpisodesRequest) (*longrunning.Operation, error)
}

// UnimplementedEpisodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEpisodeServiceServer struct {
}

func (*UnimplementedEpisodeServiceServer) GetEpisode(context.Context, *GetEpisodeRequest) (*Episode, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetEpisode not implemented")
}
func (*UnimplementedEpisodeServiceServer) ListEpisodes(context.Context, *ListEpisodesRequest) (*ListEpisodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEpisodes not implemented")
}
func (*UnimplementedEpisodeServiceServer) CreateEpisode(context.Context, *CreateEpisodeRequest) (*Episode, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateEpisode not implemented")
}
func (*UnimplementedEpisodeServiceServer) BatchCreateEpisodes(context.Context, *BatchCreateEpisodesRequest) (*longrunning.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchCreateEpisodes not implemented")
}
func (*UnimplementedEpisodeServiceServer) UpdateEpisode(context.Context, *UpdateEpisodeRequest) (*Episode, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateEpisode not implemented")
}
func (*UnimplementedEpisodeServiceServer) DeleteEpisode(context.Context, *DeleteEpisodeRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteEpisode not implemented")
}
func (*UnimplementedEpisodeServiceServer) ReconcileEpisodes(context.Context, *ReconcileEpisodesRequest) (*longrunning.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReconcileEpisodes not implemented")
}

func RegisterEpisodeServiceServer(s *grpc.Server, srv EpisodeServiceServer) {
	s.RegisterService(&_EpisodeService_serviceDesc, srv)
}

func _EpisodeService_GetEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).GetEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/GetEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).GetEpisode(ctx, req.(*GetEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_ListEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEpisodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).ListEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/ListEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).ListEpisodes(ctx, req.(*ListEpisodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_CreateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).CreateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/CreateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).CreateEpisode(ctx, req.(*CreateEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_BatchCreateEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateEpisodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).BatchCreateEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/BatchCreateEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).BatchCreateEpisodes(ctx, req.(*BatchCreateEpisodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_UpdateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).UpdateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/UpdateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).UpdateEpisode(ctx, req.(*UpdateEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_DeleteEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).DeleteEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/DeleteEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).DeleteEpisode(ctx, req.(*DeleteEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_ReconcileEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileEpisodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).ReconcileEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animeshon.multimedia.v1alpha1.EpisodeService/ReconcileEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).ReconcileEpisodes(ctx, req.(*ReconcileEpisodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EpisodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animeshon.multimedia.v1alpha1.EpisodeService",
	HandlerType: (*EpisodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpisode",
			Handler:    _EpisodeService_GetEpisode_Handler,
		},
		{
			MethodName: "ListEpisodes",
			Handler:    _EpisodeService_ListEpisodes_Handler,
		},
		{
			MethodName: "CreateEpisode",
			Handler:    _EpisodeService_CreateEpisode_Handler,
		},
		{
			MethodName: "BatchCreateEpisodes",
			Handler:    _EpisodeService_BatchCreateEpisodes_Handler,
		},
		{
			MethodName: "UpdateEpisode",
			Handler:    _EpisodeService_UpdateEpisode_Handler,
		},
		{
			MethodName: "DeleteEpisode",
			Handler:    _EpisodeService_DeleteEpisode_Handler,
		},
		{
			MethodName: "ReconcileEpisodes",
			Handler:    _EpisodeService_ReconcileEpisodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "animeshon/multimedia/v1alpha1/episode.proto",
}
